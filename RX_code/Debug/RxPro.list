
RxPro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045d4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08004764  08004764  00005764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047d0  080047d0  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  080047d0  080047d0  000057d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080047d8  080047d8  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047d8  080047d8  000057d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080047dc  080047dc  000057dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080047e0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000605c  2**0
                  CONTENTS
 10 .bss          00000268  2000005c  2000005c  0000605c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002c4  200002c4  0000605c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d743  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e96  00000000  00000000  000137cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000dd0  00000000  00000000  00015668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000acc  00000000  00000000  00016438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000216bc  00000000  00000000  00016f04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f9d3  00000000  00000000  000385c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd93e  00000000  00000000  00047f93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001158d1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004020  00000000  00000000  00115914  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000051  00000000  00000000  00119934  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800474c 	.word	0x0800474c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	0800474c 	.word	0x0800474c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b086      	sub	sp, #24
 8000564:	af02      	add	r7, sp, #8
 8000566:	4603      	mov	r3, r0
 8000568:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800056a:	79fb      	ldrb	r3, [r7, #7]
 800056c:	f023 030f 	bic.w	r3, r3, #15
 8000570:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000572:	79fb      	ldrb	r3, [r7, #7]
 8000574:	011b      	lsls	r3, r3, #4
 8000576:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000578:	7bfb      	ldrb	r3, [r7, #15]
 800057a:	f043 030c 	orr.w	r3, r3, #12
 800057e:	b2db      	uxtb	r3, r3
 8000580:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000582:	7bfb      	ldrb	r3, [r7, #15]
 8000584:	f043 0308 	orr.w	r3, r3, #8
 8000588:	b2db      	uxtb	r3, r3
 800058a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 800058c:	7bbb      	ldrb	r3, [r7, #14]
 800058e:	f043 030c 	orr.w	r3, r3, #12
 8000592:	b2db      	uxtb	r3, r3
 8000594:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000596:	7bbb      	ldrb	r3, [r7, #14]
 8000598:	f043 0308 	orr.w	r3, r3, #8
 800059c:	b2db      	uxtb	r3, r3
 800059e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80005a0:	f107 0208 	add.w	r2, r7, #8
 80005a4:	2364      	movs	r3, #100	@ 0x64
 80005a6:	9300      	str	r3, [sp, #0]
 80005a8:	2304      	movs	r3, #4
 80005aa:	214e      	movs	r1, #78	@ 0x4e
 80005ac:	4803      	ldr	r0, [pc, #12]	@ (80005bc <lcd_send_cmd+0x5c>)
 80005ae:	f002 f813 	bl	80025d8 <HAL_I2C_Master_Transmit>
}
 80005b2:	bf00      	nop
 80005b4:	3710      	adds	r7, #16
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	200000a0 	.word	0x200000a0

080005c0 <lcd_send_data>:

void lcd_send_data (char data)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b086      	sub	sp, #24
 80005c4:	af02      	add	r7, sp, #8
 80005c6:	4603      	mov	r3, r0
 80005c8:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	f023 030f 	bic.w	r3, r3, #15
 80005d0:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80005d2:	79fb      	ldrb	r3, [r7, #7]
 80005d4:	011b      	lsls	r3, r3, #4
 80005d6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 80005d8:	7bfb      	ldrb	r3, [r7, #15]
 80005da:	f043 030d 	orr.w	r3, r3, #13
 80005de:	b2db      	uxtb	r3, r3
 80005e0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 80005e2:	7bfb      	ldrb	r3, [r7, #15]
 80005e4:	f043 0309 	orr.w	r3, r3, #9
 80005e8:	b2db      	uxtb	r3, r3
 80005ea:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 80005ec:	7bbb      	ldrb	r3, [r7, #14]
 80005ee:	f043 030d 	orr.w	r3, r3, #13
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 80005f6:	7bbb      	ldrb	r3, [r7, #14]
 80005f8:	f043 0309 	orr.w	r3, r3, #9
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000600:	f107 0208 	add.w	r2, r7, #8
 8000604:	2364      	movs	r3, #100	@ 0x64
 8000606:	9300      	str	r3, [sp, #0]
 8000608:	2304      	movs	r3, #4
 800060a:	214e      	movs	r1, #78	@ 0x4e
 800060c:	4803      	ldr	r0, [pc, #12]	@ (800061c <lcd_send_data+0x5c>)
 800060e:	f001 ffe3 	bl	80025d8 <HAL_I2C_Master_Transmit>
}
 8000612:	bf00      	nop
 8000614:	3710      	adds	r7, #16
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	200000a0 	.word	0x200000a0

08000620 <lcd_clear>:

void lcd_clear (void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x00);
 8000626:	2000      	movs	r0, #0
 8000628:	f7ff ff9a 	bl	8000560 <lcd_send_cmd>
	for (int i=0; i<100; i++)
 800062c:	2300      	movs	r3, #0
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	e005      	b.n	800063e <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8000632:	2020      	movs	r0, #32
 8000634:	f7ff ffc4 	bl	80005c0 <lcd_send_data>
	for (int i=0; i<100; i++)
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	3301      	adds	r3, #1
 800063c:	607b      	str	r3, [r7, #4]
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	2b63      	cmp	r3, #99	@ 0x63
 8000642:	ddf6      	ble.n	8000632 <lcd_clear+0x12>
	}
}
 8000644:	bf00      	nop
 8000646:	bf00      	nop
 8000648:	3708      	adds	r7, #8
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}

0800064e <lcd_init>:

void lcd_init (void)
{
 800064e:	b580      	push	{r7, lr}
 8000650:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000652:	2032      	movs	r0, #50	@ 0x32
 8000654:	f000 fdf8 	bl	8001248 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000658:	2030      	movs	r0, #48	@ 0x30
 800065a:	f7ff ff81 	bl	8000560 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 800065e:	2005      	movs	r0, #5
 8000660:	f000 fdf2 	bl	8001248 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000664:	2030      	movs	r0, #48	@ 0x30
 8000666:	f7ff ff7b 	bl	8000560 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 800066a:	2001      	movs	r0, #1
 800066c:	f000 fdec 	bl	8001248 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000670:	2030      	movs	r0, #48	@ 0x30
 8000672:	f7ff ff75 	bl	8000560 <lcd_send_cmd>
	HAL_Delay(10);
 8000676:	200a      	movs	r0, #10
 8000678:	f000 fde6 	bl	8001248 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 800067c:	2020      	movs	r0, #32
 800067e:	f7ff ff6f 	bl	8000560 <lcd_send_cmd>
	HAL_Delay(10);
 8000682:	200a      	movs	r0, #10
 8000684:	f000 fde0 	bl	8001248 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000688:	2028      	movs	r0, #40	@ 0x28
 800068a:	f7ff ff69 	bl	8000560 <lcd_send_cmd>
	HAL_Delay(1);
 800068e:	2001      	movs	r0, #1
 8000690:	f000 fdda 	bl	8001248 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000694:	2008      	movs	r0, #8
 8000696:	f7ff ff63 	bl	8000560 <lcd_send_cmd>
	HAL_Delay(1);
 800069a:	2001      	movs	r0, #1
 800069c:	f000 fdd4 	bl	8001248 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80006a0:	2001      	movs	r0, #1
 80006a2:	f7ff ff5d 	bl	8000560 <lcd_send_cmd>
	HAL_Delay(1);
 80006a6:	2001      	movs	r0, #1
 80006a8:	f000 fdce 	bl	8001248 <HAL_Delay>
	HAL_Delay(1);
 80006ac:	2001      	movs	r0, #1
 80006ae:	f000 fdcb 	bl	8001248 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80006b2:	2006      	movs	r0, #6
 80006b4:	f7ff ff54 	bl	8000560 <lcd_send_cmd>
	HAL_Delay(1);
 80006b8:	2001      	movs	r0, #1
 80006ba:	f000 fdc5 	bl	8001248 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80006be:	200c      	movs	r0, #12
 80006c0:	f7ff ff4e 	bl	8000560 <lcd_send_cmd>
}
 80006c4:	bf00      	nop
 80006c6:	bd80      	pop	{r7, pc}

080006c8 <lcd_send_string>:

void lcd_send_string (char *str)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80006d0:	e006      	b.n	80006e0 <lcd_send_string+0x18>
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	1c5a      	adds	r2, r3, #1
 80006d6:	607a      	str	r2, [r7, #4]
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	4618      	mov	r0, r3
 80006dc:	f7ff ff70 	bl	80005c0 <lcd_send_data>
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d1f4      	bne.n	80006d2 <lcd_send_string+0xa>
}
 80006e8:	bf00      	nop
 80006ea:	bf00      	nop
 80006ec:	3708      	adds	r7, #8
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
	...

080006f4 <HAL_CAN_RxFifo0MsgPendingCallback>:
uint8_t RxData[5];
char str[20];



void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET); // blue
 80006fc:	2201      	movs	r2, #1
 80006fe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000702:	4806      	ldr	r0, [pc, #24]	@ (800071c <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8000704:	f001 fe0a 	bl	800231c <HAL_GPIO_WritePin>
	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData);
 8000708:	4b05      	ldr	r3, [pc, #20]	@ (8000720 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 800070a:	4a06      	ldr	r2, [pc, #24]	@ (8000724 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 800070c:	2100      	movs	r1, #0
 800070e:	4806      	ldr	r0, [pc, #24]	@ (8000728 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000710:	f000 ffde 	bl	80016d0 <HAL_CAN_GetRxMessage>
}
 8000714:	bf00      	nop
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	40020c00 	.word	0x40020c00
 8000720:	20000158 	.word	0x20000158
 8000724:	2000013c 	.word	0x2000013c
 8000728:	20000078 	.word	0x20000078

0800072c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000730:	f000 fd18 	bl	8001164 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000734:	f000 f930 	bl	8000998 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000738:	f000 fa9c 	bl	8000c74 <MX_GPIO_Init>
  MX_CAN1_Init();
 800073c:	f000 f994 	bl	8000a68 <MX_CAN1_Init>
  MX_I2C1_Init();
 8000740:	f000 f9e6 	bl	8000b10 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000744:	f000 fa12 	bl	8000b6c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan1);
 8000748:	4889      	ldr	r0, [pc, #548]	@ (8000970 <main+0x244>)
 800074a:	f000 ff7d 	bl	8001648 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 800074e:	2102      	movs	r1, #2
 8000750:	4887      	ldr	r0, [pc, #540]	@ (8000970 <main+0x244>)
 8000752:	f001 f8df 	bl	8001914 <HAL_CAN_ActivateNotification>
  HAL_Delay(100);
 8000756:	2064      	movs	r0, #100	@ 0x64
 8000758:	f000 fd76 	bl	8001248 <HAL_Delay>
  HAL_Delay(100);
 800075c:	2064      	movs	r0, #100	@ 0x64
 800075e:	f000 fd73 	bl	8001248 <HAL_Delay>

  lcd_init();
 8000762:	f7ff ff74 	bl	800064e <lcd_init>
  lcd_clear();
 8000766:	f7ff ff5b 	bl	8000620 <lcd_clear>
  //HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);   //M1
 800076a:	2200      	movs	r2, #0
 800076c:	2140      	movs	r1, #64	@ 0x40
 800076e:	4881      	ldr	r0, [pc, #516]	@ (8000974 <main+0x248>)
 8000770:	f001 fdd4 	bl	800231c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);   //M1
 8000774:	2200      	movs	r2, #0
 8000776:	2180      	movs	r1, #128	@ 0x80
 8000778:	487e      	ldr	r0, [pc, #504]	@ (8000974 <main+0x248>)
 800077a:	f001 fdcf 	bl	800231c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);  //M2
 800077e:	2200      	movs	r2, #0
 8000780:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000784:	487b      	ldr	r0, [pc, #492]	@ (8000974 <main+0x248>)
 8000786:	f001 fdc9 	bl	800231c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);  //M2
 800078a:	2200      	movs	r2, #0
 800078c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000790:	4878      	ldr	r0, [pc, #480]	@ (8000974 <main+0x248>)
 8000792:	f001 fdc3 	bl	800231c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);  //LED
 8000796:	2200      	movs	r2, #0
 8000798:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800079c:	4876      	ldr	r0, [pc, #472]	@ (8000978 <main+0x24c>)
 800079e:	f001 fdbd 	bl	800231c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);  //Buzzer
 80007a2:	2200      	movs	r2, #0
 80007a4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007a8:	4873      	ldr	r0, [pc, #460]	@ (8000978 <main+0x24c>)
 80007aa:	f001 fdb7 	bl	800231c <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  lcd_clear();
 80007ae:	f7ff ff37 	bl	8000620 <lcd_clear>
  	  /*sprintf(str, "Temp:%d",RxData[1]);
  	  lcd_send_cmd(0x80|0x00);
  	  lcd_send_string(str);*/

  	  sprintf(str, "Dist:%d",RxData[2]);
 80007b2:	4b72      	ldr	r3, [pc, #456]	@ (800097c <main+0x250>)
 80007b4:	789b      	ldrb	r3, [r3, #2]
 80007b6:	461a      	mov	r2, r3
 80007b8:	4971      	ldr	r1, [pc, #452]	@ (8000980 <main+0x254>)
 80007ba:	4872      	ldr	r0, [pc, #456]	@ (8000984 <main+0x258>)
 80007bc:	f003 fb26 	bl	8003e0c <siprintf>
  	  lcd_send_cmd(0x80|0x40);
 80007c0:	20c0      	movs	r0, #192	@ 0xc0
 80007c2:	f7ff fecd 	bl	8000560 <lcd_send_cmd>
  	  lcd_send_string(str);
 80007c6:	486f      	ldr	r0, [pc, #444]	@ (8000984 <main+0x258>)
 80007c8:	f7ff ff7e 	bl	80006c8 <lcd_send_string>

  	  if(RxData[2] < 10){
 80007cc:	4b6b      	ldr	r3, [pc, #428]	@ (800097c <main+0x250>)
 80007ce:	789b      	ldrb	r3, [r3, #2]
 80007d0:	2b09      	cmp	r3, #9
 80007d2:	d838      	bhi.n	8000846 <main+0x11a>
  		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 80007d4:	2200      	movs	r2, #0
 80007d6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007da:	4866      	ldr	r0, [pc, #408]	@ (8000974 <main+0x248>)
 80007dc:	f001 fd9e 	bl	800231c <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 80007e0:	2200      	movs	r2, #0
 80007e2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007e6:	4863      	ldr	r0, [pc, #396]	@ (8000974 <main+0x248>)
 80007e8:	f001 fd98 	bl	800231c <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 80007ec:	2200      	movs	r2, #0
 80007ee:	2140      	movs	r1, #64	@ 0x40
 80007f0:	4860      	ldr	r0, [pc, #384]	@ (8000974 <main+0x248>)
 80007f2:	f001 fd93 	bl	800231c <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80007f6:	2200      	movs	r2, #0
 80007f8:	2180      	movs	r1, #128	@ 0x80
 80007fa:	485e      	ldr	r0, [pc, #376]	@ (8000974 <main+0x248>)
 80007fc:	f001 fd8e 	bl	800231c <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000800:	2201      	movs	r2, #1
 8000802:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000806:	485c      	ldr	r0, [pc, #368]	@ (8000978 <main+0x24c>)
 8000808:	f001 fd88 	bl	800231c <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 800080c:	2201      	movs	r2, #1
 800080e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000812:	4859      	ldr	r0, [pc, #356]	@ (8000978 <main+0x24c>)
 8000814:	f001 fd82 	bl	800231c <HAL_GPIO_WritePin>
  	  	  sprintf(str, "ZONE 3");
 8000818:	495b      	ldr	r1, [pc, #364]	@ (8000988 <main+0x25c>)
 800081a:	485a      	ldr	r0, [pc, #360]	@ (8000984 <main+0x258>)
 800081c:	f003 faf6 	bl	8003e0c <siprintf>
  	  	  lcd_send_cmd(0x80|0x00);
 8000820:	2080      	movs	r0, #128	@ 0x80
 8000822:	f7ff fe9d 	bl	8000560 <lcd_send_cmd>
  	  	  lcd_send_string(str);
 8000826:	4857      	ldr	r0, [pc, #348]	@ (8000984 <main+0x258>)
 8000828:	f7ff ff4e 	bl	80006c8 <lcd_send_string>
  		  sprintf(str, "Dist:%d",RxData[2]);
 800082c:	4b53      	ldr	r3, [pc, #332]	@ (800097c <main+0x250>)
 800082e:	789b      	ldrb	r3, [r3, #2]
 8000830:	461a      	mov	r2, r3
 8000832:	4953      	ldr	r1, [pc, #332]	@ (8000980 <main+0x254>)
 8000834:	4853      	ldr	r0, [pc, #332]	@ (8000984 <main+0x258>)
 8000836:	f003 fae9 	bl	8003e0c <siprintf>
  	  	  lcd_send_cmd(0x80|0x40);
 800083a:	20c0      	movs	r0, #192	@ 0xc0
 800083c:	f7ff fe90 	bl	8000560 <lcd_send_cmd>
  	  	  lcd_send_string(str);
 8000840:	4850      	ldr	r0, [pc, #320]	@ (8000984 <main+0x258>)
 8000842:	f7ff ff41 	bl	80006c8 <lcd_send_string>
  	  }

  	  if(RxData[2] > 10 && RxData[2] < 30){
 8000846:	4b4d      	ldr	r3, [pc, #308]	@ (800097c <main+0x250>)
 8000848:	789b      	ldrb	r3, [r3, #2]
 800084a:	2b0a      	cmp	r3, #10
 800084c:	d93c      	bls.n	80008c8 <main+0x19c>
 800084e:	4b4b      	ldr	r3, [pc, #300]	@ (800097c <main+0x250>)
 8000850:	789b      	ldrb	r3, [r3, #2]
 8000852:	2b1d      	cmp	r3, #29
 8000854:	d838      	bhi.n	80008c8 <main+0x19c>
  		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8000856:	2201      	movs	r2, #1
 8000858:	2140      	movs	r1, #64	@ 0x40
 800085a:	4846      	ldr	r0, [pc, #280]	@ (8000974 <main+0x248>)
 800085c:	f001 fd5e 	bl	800231c <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000860:	2200      	movs	r2, #0
 8000862:	2180      	movs	r1, #128	@ 0x80
 8000864:	4843      	ldr	r0, [pc, #268]	@ (8000974 <main+0x248>)
 8000866:	f001 fd59 	bl	800231c <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800086a:	2201      	movs	r2, #1
 800086c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000870:	4840      	ldr	r0, [pc, #256]	@ (8000974 <main+0x248>)
 8000872:	f001 fd53 	bl	800231c <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8000876:	2200      	movs	r2, #0
 8000878:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800087c:	483d      	ldr	r0, [pc, #244]	@ (8000974 <main+0x248>)
 800087e:	f001 fd4d 	bl	800231c <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000882:	2201      	movs	r2, #1
 8000884:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000888:	483b      	ldr	r0, [pc, #236]	@ (8000978 <main+0x24c>)
 800088a:	f001 fd47 	bl	800231c <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 800088e:	2200      	movs	r2, #0
 8000890:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000894:	4838      	ldr	r0, [pc, #224]	@ (8000978 <main+0x24c>)
 8000896:	f001 fd41 	bl	800231c <HAL_GPIO_WritePin>
  	  	  sprintf(str, "ZONE 2");
 800089a:	493c      	ldr	r1, [pc, #240]	@ (800098c <main+0x260>)
 800089c:	4839      	ldr	r0, [pc, #228]	@ (8000984 <main+0x258>)
 800089e:	f003 fab5 	bl	8003e0c <siprintf>
  	  	  lcd_send_cmd(0x80|0x00);
 80008a2:	2080      	movs	r0, #128	@ 0x80
 80008a4:	f7ff fe5c 	bl	8000560 <lcd_send_cmd>
  	  	  lcd_send_string(str);
 80008a8:	4836      	ldr	r0, [pc, #216]	@ (8000984 <main+0x258>)
 80008aa:	f7ff ff0d 	bl	80006c8 <lcd_send_string>
  		  sprintf(str, "Dist:%d",RxData[2]);
 80008ae:	4b33      	ldr	r3, [pc, #204]	@ (800097c <main+0x250>)
 80008b0:	789b      	ldrb	r3, [r3, #2]
 80008b2:	461a      	mov	r2, r3
 80008b4:	4932      	ldr	r1, [pc, #200]	@ (8000980 <main+0x254>)
 80008b6:	4833      	ldr	r0, [pc, #204]	@ (8000984 <main+0x258>)
 80008b8:	f003 faa8 	bl	8003e0c <siprintf>
  	  	  lcd_send_cmd(0x80|0x40);
 80008bc:	20c0      	movs	r0, #192	@ 0xc0
 80008be:	f7ff fe4f 	bl	8000560 <lcd_send_cmd>
  	  	  lcd_send_string(str);
 80008c2:	4830      	ldr	r0, [pc, #192]	@ (8000984 <main+0x258>)
 80008c4:	f7ff ff00 	bl	80006c8 <lcd_send_string>
  	  }

  	  if(RxData[2] > 30){
 80008c8:	4b2c      	ldr	r3, [pc, #176]	@ (800097c <main+0x250>)
 80008ca:	789b      	ldrb	r3, [r3, #2]
 80008cc:	2b1e      	cmp	r3, #30
 80008ce:	d938      	bls.n	8000942 <main+0x216>
  		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 80008d0:	2201      	movs	r2, #1
 80008d2:	2140      	movs	r1, #64	@ 0x40
 80008d4:	4827      	ldr	r0, [pc, #156]	@ (8000974 <main+0x248>)
 80008d6:	f001 fd21 	bl	800231c <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80008da:	2200      	movs	r2, #0
 80008dc:	2180      	movs	r1, #128	@ 0x80
 80008de:	4825      	ldr	r0, [pc, #148]	@ (8000974 <main+0x248>)
 80008e0:	f001 fd1c 	bl	800231c <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 80008e4:	2201      	movs	r2, #1
 80008e6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008ea:	4822      	ldr	r0, [pc, #136]	@ (8000974 <main+0x248>)
 80008ec:	f001 fd16 	bl	800231c <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 80008f0:	2200      	movs	r2, #0
 80008f2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008f6:	481f      	ldr	r0, [pc, #124]	@ (8000974 <main+0x248>)
 80008f8:	f001 fd10 	bl	800231c <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80008fc:	2200      	movs	r2, #0
 80008fe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000902:	481d      	ldr	r0, [pc, #116]	@ (8000978 <main+0x24c>)
 8000904:	f001 fd0a 	bl	800231c <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000908:	2200      	movs	r2, #0
 800090a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800090e:	481a      	ldr	r0, [pc, #104]	@ (8000978 <main+0x24c>)
 8000910:	f001 fd04 	bl	800231c <HAL_GPIO_WritePin>
  	  	  sprintf(str, "ZONE 1");
 8000914:	491e      	ldr	r1, [pc, #120]	@ (8000990 <main+0x264>)
 8000916:	481b      	ldr	r0, [pc, #108]	@ (8000984 <main+0x258>)
 8000918:	f003 fa78 	bl	8003e0c <siprintf>
  	  	  lcd_send_cmd(0x80|0x00);
 800091c:	2080      	movs	r0, #128	@ 0x80
 800091e:	f7ff fe1f 	bl	8000560 <lcd_send_cmd>
  	  	  lcd_send_string(str);
 8000922:	4818      	ldr	r0, [pc, #96]	@ (8000984 <main+0x258>)
 8000924:	f7ff fed0 	bl	80006c8 <lcd_send_string>
  		  sprintf(str, "Dist:%d",RxData[2]);
 8000928:	4b14      	ldr	r3, [pc, #80]	@ (800097c <main+0x250>)
 800092a:	789b      	ldrb	r3, [r3, #2]
 800092c:	461a      	mov	r2, r3
 800092e:	4914      	ldr	r1, [pc, #80]	@ (8000980 <main+0x254>)
 8000930:	4814      	ldr	r0, [pc, #80]	@ (8000984 <main+0x258>)
 8000932:	f003 fa6b 	bl	8003e0c <siprintf>
  	  	  lcd_send_cmd(0x80|0x40);
 8000936:	20c0      	movs	r0, #192	@ 0xc0
 8000938:	f7ff fe12 	bl	8000560 <lcd_send_cmd>
  	  	  lcd_send_string(str);
 800093c:	4811      	ldr	r0, [pc, #68]	@ (8000984 <main+0x258>)
 800093e:	f7ff fec3 	bl	80006c8 <lcd_send_string>
  	  }


  		if(RxData[0] == 1){
 8000942:	4b0e      	ldr	r3, [pc, #56]	@ (800097c <main+0x250>)
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	2b01      	cmp	r3, #1
 8000948:	d105      	bne.n	8000956 <main+0x22a>
  			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET); //
 800094a:	2201      	movs	r2, #1
 800094c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000950:	4810      	ldr	r0, [pc, #64]	@ (8000994 <main+0x268>)
 8000952:	f001 fce3 	bl	800231c <HAL_GPIO_WritePin>
  		}
  		if(RxData[0] == 0){
 8000956:	4b09      	ldr	r3, [pc, #36]	@ (800097c <main+0x250>)
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	2b00      	cmp	r3, #0
 800095c:	f47f af27 	bne.w	80007ae <main+0x82>
  			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET); //
 8000960:	2200      	movs	r2, #0
 8000962:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000966:	480b      	ldr	r0, [pc, #44]	@ (8000994 <main+0x268>)
 8000968:	f001 fcd8 	bl	800231c <HAL_GPIO_WritePin>
	  lcd_clear();
 800096c:	e71f      	b.n	80007ae <main+0x82>
 800096e:	bf00      	nop
 8000970:	20000078 	.word	0x20000078
 8000974:	40020800 	.word	0x40020800
 8000978:	40020000 	.word	0x40020000
 800097c:	20000158 	.word	0x20000158
 8000980:	08004764 	.word	0x08004764
 8000984:	20000160 	.word	0x20000160
 8000988:	0800476c 	.word	0x0800476c
 800098c:	08004774 	.word	0x08004774
 8000990:	0800477c 	.word	0x0800477c
 8000994:	40020c00 	.word	0x40020c00

08000998 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b094      	sub	sp, #80	@ 0x50
 800099c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800099e:	f107 0320 	add.w	r3, r7, #32
 80009a2:	2230      	movs	r2, #48	@ 0x30
 80009a4:	2100      	movs	r1, #0
 80009a6:	4618      	mov	r0, r3
 80009a8:	f003 fa50 	bl	8003e4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009ac:	f107 030c 	add.w	r3, r7, #12
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
 80009b8:	60da      	str	r2, [r3, #12]
 80009ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009bc:	2300      	movs	r3, #0
 80009be:	60bb      	str	r3, [r7, #8]
 80009c0:	4b27      	ldr	r3, [pc, #156]	@ (8000a60 <SystemClock_Config+0xc8>)
 80009c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009c4:	4a26      	ldr	r2, [pc, #152]	@ (8000a60 <SystemClock_Config+0xc8>)
 80009c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80009cc:	4b24      	ldr	r3, [pc, #144]	@ (8000a60 <SystemClock_Config+0xc8>)
 80009ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009d4:	60bb      	str	r3, [r7, #8]
 80009d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009d8:	2300      	movs	r3, #0
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	4b21      	ldr	r3, [pc, #132]	@ (8000a64 <SystemClock_Config+0xcc>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a20      	ldr	r2, [pc, #128]	@ (8000a64 <SystemClock_Config+0xcc>)
 80009e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009e6:	6013      	str	r3, [r2, #0]
 80009e8:	4b1e      	ldr	r3, [pc, #120]	@ (8000a64 <SystemClock_Config+0xcc>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009f0:	607b      	str	r3, [r7, #4]
 80009f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009f4:	2301      	movs	r3, #1
 80009f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009f8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80009fc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009fe:	2302      	movs	r3, #2
 8000a00:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a02:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000a06:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a08:	2304      	movs	r3, #4
 8000a0a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000a0c:	2348      	movs	r3, #72	@ 0x48
 8000a0e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a10:	2302      	movs	r3, #2
 8000a12:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a14:	2307      	movs	r3, #7
 8000a16:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a18:	f107 0320 	add.w	r3, r7, #32
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f002 f935 	bl	8002c8c <HAL_RCC_OscConfig>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a28:	f000 f9ce 	bl	8000dc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a2c:	230f      	movs	r3, #15
 8000a2e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a30:	2302      	movs	r3, #2
 8000a32:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a34:	2300      	movs	r3, #0
 8000a36:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a38:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a3c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a42:	f107 030c 	add.w	r3, r7, #12
 8000a46:	2102      	movs	r1, #2
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f002 fb97 	bl	800317c <HAL_RCC_ClockConfig>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000a54:	f000 f9b8 	bl	8000dc8 <Error_Handler>
  }
}
 8000a58:	bf00      	nop
 8000a5a:	3750      	adds	r7, #80	@ 0x50
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	40023800 	.word	0x40023800
 8000a64:	40007000 	.word	0x40007000

08000a68 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b08a      	sub	sp, #40	@ 0x28
 8000a6c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000a6e:	4b26      	ldr	r3, [pc, #152]	@ (8000b08 <MX_CAN1_Init+0xa0>)
 8000a70:	4a26      	ldr	r2, [pc, #152]	@ (8000b0c <MX_CAN1_Init+0xa4>)
 8000a72:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 18;
 8000a74:	4b24      	ldr	r3, [pc, #144]	@ (8000b08 <MX_CAN1_Init+0xa0>)
 8000a76:	2212      	movs	r2, #18
 8000a78:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000a7a:	4b23      	ldr	r3, [pc, #140]	@ (8000b08 <MX_CAN1_Init+0xa0>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a80:	4b21      	ldr	r3, [pc, #132]	@ (8000b08 <MX_CAN1_Init+0xa0>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000a86:	4b20      	ldr	r3, [pc, #128]	@ (8000b08 <MX_CAN1_Init+0xa0>)
 8000a88:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000a8c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000a8e:	4b1e      	ldr	r3, [pc, #120]	@ (8000b08 <MX_CAN1_Init+0xa0>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000a94:	4b1c      	ldr	r3, [pc, #112]	@ (8000b08 <MX_CAN1_Init+0xa0>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000a9a:	4b1b      	ldr	r3, [pc, #108]	@ (8000b08 <MX_CAN1_Init+0xa0>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000aa0:	4b19      	ldr	r3, [pc, #100]	@ (8000b08 <MX_CAN1_Init+0xa0>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000aa6:	4b18      	ldr	r3, [pc, #96]	@ (8000b08 <MX_CAN1_Init+0xa0>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000aac:	4b16      	ldr	r3, [pc, #88]	@ (8000b08 <MX_CAN1_Init+0xa0>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000ab2:	4b15      	ldr	r3, [pc, #84]	@ (8000b08 <MX_CAN1_Init+0xa0>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000ab8:	4813      	ldr	r0, [pc, #76]	@ (8000b08 <MX_CAN1_Init+0xa0>)
 8000aba:	f000 fbe9 	bl	8001290 <HAL_CAN_Init>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000ac4:	f000 f980 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canFilterConfig;
  canFilterConfig.FilterActivation=CAN_FILTER_ENABLE;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	623b      	str	r3, [r7, #32]
  canFilterConfig.SlaveStartFilterBank=14;
 8000acc:	230e      	movs	r3, #14
 8000ace:	627b      	str	r3, [r7, #36]	@ 0x24
  canFilterConfig.FilterBank=2;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	617b      	str	r3, [r7, #20]
  canFilterConfig.FilterFIFOAssignment=CAN_RX_FIFO0;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	613b      	str	r3, [r7, #16]
  canFilterConfig.FilterScale=CAN_FILTERSCALE_32BIT;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	61fb      	str	r3, [r7, #28]
  canFilterConfig.FilterMode=CAN_FILTERMODE_IDMASK;
 8000adc:	2300      	movs	r3, #0
 8000ade:	61bb      	str	r3, [r7, #24]
  canFilterConfig.FilterMaskIdLow=0x0000;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	60fb      	str	r3, [r7, #12]
  canFilterConfig.FilterMaskIdHigh=0xFF00;
 8000ae4:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 8000ae8:	60bb      	str	r3, [r7, #8]
  canFilterConfig.FilterIdLow=0x0000;
 8000aea:	2300      	movs	r3, #0
 8000aec:	607b      	str	r3, [r7, #4]
  canFilterConfig.FilterIdHigh=0x1500;
 8000aee:	f44f 53a8 	mov.w	r3, #5376	@ 0x1500
 8000af2:	603b      	str	r3, [r7, #0]
  HAL_CAN_ConfigFilter(&hcan1, &canFilterConfig);
 8000af4:	463b      	mov	r3, r7
 8000af6:	4619      	mov	r1, r3
 8000af8:	4803      	ldr	r0, [pc, #12]	@ (8000b08 <MX_CAN1_Init+0xa0>)
 8000afa:	f000 fcc5 	bl	8001488 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 8000afe:	bf00      	nop
 8000b00:	3728      	adds	r7, #40	@ 0x28
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	20000078 	.word	0x20000078
 8000b0c:	40006400 	.word	0x40006400

08000b10 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b14:	4b12      	ldr	r3, [pc, #72]	@ (8000b60 <MX_I2C1_Init+0x50>)
 8000b16:	4a13      	ldr	r2, [pc, #76]	@ (8000b64 <MX_I2C1_Init+0x54>)
 8000b18:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b1a:	4b11      	ldr	r3, [pc, #68]	@ (8000b60 <MX_I2C1_Init+0x50>)
 8000b1c:	4a12      	ldr	r2, [pc, #72]	@ (8000b68 <MX_I2C1_Init+0x58>)
 8000b1e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b20:	4b0f      	ldr	r3, [pc, #60]	@ (8000b60 <MX_I2C1_Init+0x50>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b26:	4b0e      	ldr	r3, [pc, #56]	@ (8000b60 <MX_I2C1_Init+0x50>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b60 <MX_I2C1_Init+0x50>)
 8000b2e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000b32:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b34:	4b0a      	ldr	r3, [pc, #40]	@ (8000b60 <MX_I2C1_Init+0x50>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b3a:	4b09      	ldr	r3, [pc, #36]	@ (8000b60 <MX_I2C1_Init+0x50>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b40:	4b07      	ldr	r3, [pc, #28]	@ (8000b60 <MX_I2C1_Init+0x50>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b46:	4b06      	ldr	r3, [pc, #24]	@ (8000b60 <MX_I2C1_Init+0x50>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b4c:	4804      	ldr	r0, [pc, #16]	@ (8000b60 <MX_I2C1_Init+0x50>)
 8000b4e:	f001 fbff 	bl	8002350 <HAL_I2C_Init>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b58:	f000 f936 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b5c:	bf00      	nop
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	200000a0 	.word	0x200000a0
 8000b64:	40005400 	.word	0x40005400
 8000b68:	000186a0 	.word	0x000186a0

08000b6c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b092      	sub	sp, #72	@ 0x48
 8000b70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b72:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000b76:	2200      	movs	r2, #0
 8000b78:	601a      	str	r2, [r3, #0]
 8000b7a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
 8000b86:	609a      	str	r2, [r3, #8]
 8000b88:	60da      	str	r2, [r3, #12]
 8000b8a:	611a      	str	r2, [r3, #16]
 8000b8c:	615a      	str	r2, [r3, #20]
 8000b8e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b90:	1d3b      	adds	r3, r7, #4
 8000b92:	2220      	movs	r2, #32
 8000b94:	2100      	movs	r1, #0
 8000b96:	4618      	mov	r0, r3
 8000b98:	f003 f958 	bl	8003e4c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b9c:	4b33      	ldr	r3, [pc, #204]	@ (8000c6c <MX_TIM1_Init+0x100>)
 8000b9e:	4a34      	ldr	r2, [pc, #208]	@ (8000c70 <MX_TIM1_Init+0x104>)
 8000ba0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8000ba2:	4b32      	ldr	r3, [pc, #200]	@ (8000c6c <MX_TIM1_Init+0x100>)
 8000ba4:	2247      	movs	r2, #71	@ 0x47
 8000ba6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ba8:	4b30      	ldr	r3, [pc, #192]	@ (8000c6c <MX_TIM1_Init+0x100>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000bae:	4b2f      	ldr	r3, [pc, #188]	@ (8000c6c <MX_TIM1_Init+0x100>)
 8000bb0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000bb4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bb6:	4b2d      	ldr	r3, [pc, #180]	@ (8000c6c <MX_TIM1_Init+0x100>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000bbc:	4b2b      	ldr	r3, [pc, #172]	@ (8000c6c <MX_TIM1_Init+0x100>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bc2:	4b2a      	ldr	r3, [pc, #168]	@ (8000c6c <MX_TIM1_Init+0x100>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000bc8:	4828      	ldr	r0, [pc, #160]	@ (8000c6c <MX_TIM1_Init+0x100>)
 8000bca:	f002 fce3 	bl	8003594 <HAL_TIM_PWM_Init>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000bd4:	f000 f8f8 	bl	8000dc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000be0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000be4:	4619      	mov	r1, r3
 8000be6:	4821      	ldr	r0, [pc, #132]	@ (8000c6c <MX_TIM1_Init+0x100>)
 8000be8:	f003 f842 	bl	8003c70 <HAL_TIMEx_MasterConfigSynchronization>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000bf2:	f000 f8e9 	bl	8000dc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bf6:	2360      	movs	r3, #96	@ 0x60
 8000bf8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c02:	2300      	movs	r3, #0
 8000c04:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c06:	2300      	movs	r3, #0
 8000c08:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c16:	2200      	movs	r2, #0
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4814      	ldr	r0, [pc, #80]	@ (8000c6c <MX_TIM1_Init+0x100>)
 8000c1c:	f002 fd0a 	bl	8003634 <HAL_TIM_PWM_ConfigChannel>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8000c26:	f000 f8cf 	bl	8000dc8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c32:	2300      	movs	r3, #0
 8000c34:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c36:	2300      	movs	r3, #0
 8000c38:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c3e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c42:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c44:	2300      	movs	r3, #0
 8000c46:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c48:	1d3b      	adds	r3, r7, #4
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4807      	ldr	r0, [pc, #28]	@ (8000c6c <MX_TIM1_Init+0x100>)
 8000c4e:	f003 f88b 	bl	8003d68 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8000c58:	f000 f8b6 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c5c:	4803      	ldr	r0, [pc, #12]	@ (8000c6c <MX_TIM1_Init+0x100>)
 8000c5e:	f000 f99b 	bl	8000f98 <HAL_TIM_MspPostInit>

}
 8000c62:	bf00      	nop
 8000c64:	3748      	adds	r7, #72	@ 0x48
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	200000f4 	.word	0x200000f4
 8000c70:	40010000 	.word	0x40010000

08000c74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b08c      	sub	sp, #48	@ 0x30
 8000c78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7a:	f107 031c 	add.w	r3, r7, #28
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	605a      	str	r2, [r3, #4]
 8000c84:	609a      	str	r2, [r3, #8]
 8000c86:	60da      	str	r2, [r3, #12]
 8000c88:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	61bb      	str	r3, [r7, #24]
 8000c8e:	4b4a      	ldr	r3, [pc, #296]	@ (8000db8 <MX_GPIO_Init+0x144>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c92:	4a49      	ldr	r2, [pc, #292]	@ (8000db8 <MX_GPIO_Init+0x144>)
 8000c94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c9a:	4b47      	ldr	r3, [pc, #284]	@ (8000db8 <MX_GPIO_Init+0x144>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ca2:	61bb      	str	r3, [r7, #24]
 8000ca4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	617b      	str	r3, [r7, #20]
 8000caa:	4b43      	ldr	r3, [pc, #268]	@ (8000db8 <MX_GPIO_Init+0x144>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cae:	4a42      	ldr	r2, [pc, #264]	@ (8000db8 <MX_GPIO_Init+0x144>)
 8000cb0:	f043 0310 	orr.w	r3, r3, #16
 8000cb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cb6:	4b40      	ldr	r3, [pc, #256]	@ (8000db8 <MX_GPIO_Init+0x144>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cba:	f003 0310 	and.w	r3, r3, #16
 8000cbe:	617b      	str	r3, [r7, #20]
 8000cc0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	613b      	str	r3, [r7, #16]
 8000cc6:	4b3c      	ldr	r3, [pc, #240]	@ (8000db8 <MX_GPIO_Init+0x144>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cca:	4a3b      	ldr	r2, [pc, #236]	@ (8000db8 <MX_GPIO_Init+0x144>)
 8000ccc:	f043 0308 	orr.w	r3, r3, #8
 8000cd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cd2:	4b39      	ldr	r3, [pc, #228]	@ (8000db8 <MX_GPIO_Init+0x144>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd6:	f003 0308 	and.w	r3, r3, #8
 8000cda:	613b      	str	r3, [r7, #16]
 8000cdc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	60fb      	str	r3, [r7, #12]
 8000ce2:	4b35      	ldr	r3, [pc, #212]	@ (8000db8 <MX_GPIO_Init+0x144>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce6:	4a34      	ldr	r2, [pc, #208]	@ (8000db8 <MX_GPIO_Init+0x144>)
 8000ce8:	f043 0304 	orr.w	r3, r3, #4
 8000cec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cee:	4b32      	ldr	r3, [pc, #200]	@ (8000db8 <MX_GPIO_Init+0x144>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf2:	f003 0304 	and.w	r3, r3, #4
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	60bb      	str	r3, [r7, #8]
 8000cfe:	4b2e      	ldr	r3, [pc, #184]	@ (8000db8 <MX_GPIO_Init+0x144>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d02:	4a2d      	ldr	r2, [pc, #180]	@ (8000db8 <MX_GPIO_Init+0x144>)
 8000d04:	f043 0301 	orr.w	r3, r3, #1
 8000d08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d0a:	4b2b      	ldr	r3, [pc, #172]	@ (8000db8 <MX_GPIO_Init+0x144>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0e:	f003 0301 	and.w	r3, r3, #1
 8000d12:	60bb      	str	r3, [r7, #8]
 8000d14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	607b      	str	r3, [r7, #4]
 8000d1a:	4b27      	ldr	r3, [pc, #156]	@ (8000db8 <MX_GPIO_Init+0x144>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1e:	4a26      	ldr	r2, [pc, #152]	@ (8000db8 <MX_GPIO_Init+0x144>)
 8000d20:	f043 0302 	orr.w	r3, r3, #2
 8000d24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d26:	4b24      	ldr	r3, [pc, #144]	@ (8000db8 <MX_GPIO_Init+0x144>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2a:	f003 0302 	and.w	r3, r3, #2
 8000d2e:	607b      	str	r3, [r7, #4]
 8000d30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000d32:	2200      	movs	r2, #0
 8000d34:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000d38:	4820      	ldr	r0, [pc, #128]	@ (8000dbc <MX_GPIO_Init+0x148>)
 8000d3a:	f001 faef 	bl	800231c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	f44f 7170 	mov.w	r1, #960	@ 0x3c0
 8000d44:	481e      	ldr	r0, [pc, #120]	@ (8000dc0 <MX_GPIO_Init+0x14c>)
 8000d46:	f001 fae9 	bl	800231c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8000d50:	481c      	ldr	r0, [pc, #112]	@ (8000dc4 <MX_GPIO_Init+0x150>)
 8000d52:	f001 fae3 	bl	800231c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000d56:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000d5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d64:	2300      	movs	r3, #0
 8000d66:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d68:	f107 031c 	add.w	r3, r7, #28
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4813      	ldr	r0, [pc, #76]	@ (8000dbc <MX_GPIO_Init+0x148>)
 8000d70:	f001 f938 	bl	8001fe4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000d74:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8000d78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d82:	2300      	movs	r3, #0
 8000d84:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d86:	f107 031c 	add.w	r3, r7, #28
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	480c      	ldr	r0, [pc, #48]	@ (8000dc0 <MX_GPIO_Init+0x14c>)
 8000d8e:	f001 f929 	bl	8001fe4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d92:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000d96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da0:	2300      	movs	r3, #0
 8000da2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da4:	f107 031c 	add.w	r3, r7, #28
 8000da8:	4619      	mov	r1, r3
 8000daa:	4806      	ldr	r0, [pc, #24]	@ (8000dc4 <MX_GPIO_Init+0x150>)
 8000dac:	f001 f91a 	bl	8001fe4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000db0:	bf00      	nop
 8000db2:	3730      	adds	r7, #48	@ 0x30
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	40023800 	.word	0x40023800
 8000dbc:	40020c00 	.word	0x40020c00
 8000dc0:	40020800 	.word	0x40020800
 8000dc4:	40020000 	.word	0x40020000

08000dc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dcc:	b672      	cpsid	i
}
 8000dce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dd0:	bf00      	nop
 8000dd2:	e7fd      	b.n	8000dd0 <Error_Handler+0x8>

08000dd4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	607b      	str	r3, [r7, #4]
 8000dde:	4b10      	ldr	r3, [pc, #64]	@ (8000e20 <HAL_MspInit+0x4c>)
 8000de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000de2:	4a0f      	ldr	r2, [pc, #60]	@ (8000e20 <HAL_MspInit+0x4c>)
 8000de4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000de8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dea:	4b0d      	ldr	r3, [pc, #52]	@ (8000e20 <HAL_MspInit+0x4c>)
 8000dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000df2:	607b      	str	r3, [r7, #4]
 8000df4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	603b      	str	r3, [r7, #0]
 8000dfa:	4b09      	ldr	r3, [pc, #36]	@ (8000e20 <HAL_MspInit+0x4c>)
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dfe:	4a08      	ldr	r2, [pc, #32]	@ (8000e20 <HAL_MspInit+0x4c>)
 8000e00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e04:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e06:	4b06      	ldr	r3, [pc, #24]	@ (8000e20 <HAL_MspInit+0x4c>)
 8000e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e0e:	603b      	str	r3, [r7, #0]
 8000e10:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e12:	2007      	movs	r0, #7
 8000e14:	f001 f8a4 	bl	8001f60 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e18:	bf00      	nop
 8000e1a:	3708      	adds	r7, #8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	40023800 	.word	0x40023800

08000e24 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b08a      	sub	sp, #40	@ 0x28
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e2c:	f107 0314 	add.w	r3, r7, #20
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	605a      	str	r2, [r3, #4]
 8000e36:	609a      	str	r2, [r3, #8]
 8000e38:	60da      	str	r2, [r3, #12]
 8000e3a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a1d      	ldr	r2, [pc, #116]	@ (8000eb8 <HAL_CAN_MspInit+0x94>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d134      	bne.n	8000eb0 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	613b      	str	r3, [r7, #16]
 8000e4a:	4b1c      	ldr	r3, [pc, #112]	@ (8000ebc <HAL_CAN_MspInit+0x98>)
 8000e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e4e:	4a1b      	ldr	r2, [pc, #108]	@ (8000ebc <HAL_CAN_MspInit+0x98>)
 8000e50:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000e54:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e56:	4b19      	ldr	r3, [pc, #100]	@ (8000ebc <HAL_CAN_MspInit+0x98>)
 8000e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e5e:	613b      	str	r3, [r7, #16]
 8000e60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	60fb      	str	r3, [r7, #12]
 8000e66:	4b15      	ldr	r3, [pc, #84]	@ (8000ebc <HAL_CAN_MspInit+0x98>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6a:	4a14      	ldr	r2, [pc, #80]	@ (8000ebc <HAL_CAN_MspInit+0x98>)
 8000e6c:	f043 0302 	orr.w	r3, r3, #2
 8000e70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e72:	4b12      	ldr	r3, [pc, #72]	@ (8000ebc <HAL_CAN_MspInit+0x98>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e76:	f003 0302 	and.w	r3, r3, #2
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e7e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e84:	2302      	movs	r3, #2
 8000e86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e8c:	2303      	movs	r3, #3
 8000e8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000e90:	2309      	movs	r3, #9
 8000e92:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e94:	f107 0314 	add.w	r3, r7, #20
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4809      	ldr	r0, [pc, #36]	@ (8000ec0 <HAL_CAN_MspInit+0x9c>)
 8000e9c:	f001 f8a2 	bl	8001fe4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	2014      	movs	r0, #20
 8000ea6:	f001 f866 	bl	8001f76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000eaa:	2014      	movs	r0, #20
 8000eac:	f001 f87f 	bl	8001fae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000eb0:	bf00      	nop
 8000eb2:	3728      	adds	r7, #40	@ 0x28
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	40006400 	.word	0x40006400
 8000ebc:	40023800 	.word	0x40023800
 8000ec0:	40020400 	.word	0x40020400

08000ec4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b08a      	sub	sp, #40	@ 0x28
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ecc:	f107 0314 	add.w	r3, r7, #20
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	60da      	str	r2, [r3, #12]
 8000eda:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a19      	ldr	r2, [pc, #100]	@ (8000f48 <HAL_I2C_MspInit+0x84>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d12b      	bne.n	8000f3e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	613b      	str	r3, [r7, #16]
 8000eea:	4b18      	ldr	r3, [pc, #96]	@ (8000f4c <HAL_I2C_MspInit+0x88>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eee:	4a17      	ldr	r2, [pc, #92]	@ (8000f4c <HAL_I2C_MspInit+0x88>)
 8000ef0:	f043 0302 	orr.w	r3, r3, #2
 8000ef4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ef6:	4b15      	ldr	r3, [pc, #84]	@ (8000f4c <HAL_I2C_MspInit+0x88>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efa:	f003 0302 	and.w	r3, r3, #2
 8000efe:	613b      	str	r3, [r7, #16]
 8000f00:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f02:	23c0      	movs	r3, #192	@ 0xc0
 8000f04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f06:	2312      	movs	r3, #18
 8000f08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f0e:	2303      	movs	r3, #3
 8000f10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f12:	2304      	movs	r3, #4
 8000f14:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f16:	f107 0314 	add.w	r3, r7, #20
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	480c      	ldr	r0, [pc, #48]	@ (8000f50 <HAL_I2C_MspInit+0x8c>)
 8000f1e:	f001 f861 	bl	8001fe4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	60fb      	str	r3, [r7, #12]
 8000f26:	4b09      	ldr	r3, [pc, #36]	@ (8000f4c <HAL_I2C_MspInit+0x88>)
 8000f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f2a:	4a08      	ldr	r2, [pc, #32]	@ (8000f4c <HAL_I2C_MspInit+0x88>)
 8000f2c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f30:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f32:	4b06      	ldr	r3, [pc, #24]	@ (8000f4c <HAL_I2C_MspInit+0x88>)
 8000f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f36:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000f3e:	bf00      	nop
 8000f40:	3728      	adds	r7, #40	@ 0x28
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	40005400 	.word	0x40005400
 8000f4c:	40023800 	.word	0x40023800
 8000f50:	40020400 	.word	0x40020400

08000f54 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b085      	sub	sp, #20
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a0b      	ldr	r2, [pc, #44]	@ (8000f90 <HAL_TIM_PWM_MspInit+0x3c>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d10d      	bne.n	8000f82 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	60fb      	str	r3, [r7, #12]
 8000f6a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f94 <HAL_TIM_PWM_MspInit+0x40>)
 8000f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f6e:	4a09      	ldr	r2, [pc, #36]	@ (8000f94 <HAL_TIM_PWM_MspInit+0x40>)
 8000f70:	f043 0301 	orr.w	r3, r3, #1
 8000f74:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f76:	4b07      	ldr	r3, [pc, #28]	@ (8000f94 <HAL_TIM_PWM_MspInit+0x40>)
 8000f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f7a:	f003 0301 	and.w	r3, r3, #1
 8000f7e:	60fb      	str	r3, [r7, #12]
 8000f80:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000f82:	bf00      	nop
 8000f84:	3714      	adds	r7, #20
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	40010000 	.word	0x40010000
 8000f94:	40023800 	.word	0x40023800

08000f98 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b088      	sub	sp, #32
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa0:	f107 030c 	add.w	r3, r7, #12
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]
 8000fae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a12      	ldr	r2, [pc, #72]	@ (8001000 <HAL_TIM_MspPostInit+0x68>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d11e      	bne.n	8000ff8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60bb      	str	r3, [r7, #8]
 8000fbe:	4b11      	ldr	r3, [pc, #68]	@ (8001004 <HAL_TIM_MspPostInit+0x6c>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc2:	4a10      	ldr	r2, [pc, #64]	@ (8001004 <HAL_TIM_MspPostInit+0x6c>)
 8000fc4:	f043 0310 	orr.w	r3, r3, #16
 8000fc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fca:	4b0e      	ldr	r3, [pc, #56]	@ (8001004 <HAL_TIM_MspPostInit+0x6c>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fce:	f003 0310 	and.w	r3, r3, #16
 8000fd2:	60bb      	str	r3, [r7, #8]
 8000fd4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000fd6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000fda:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fec:	f107 030c 	add.w	r3, r7, #12
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	4805      	ldr	r0, [pc, #20]	@ (8001008 <HAL_TIM_MspPostInit+0x70>)
 8000ff4:	f000 fff6 	bl	8001fe4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000ff8:	bf00      	nop
 8000ffa:	3720      	adds	r7, #32
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	40010000 	.word	0x40010000
 8001004:	40023800 	.word	0x40023800
 8001008:	40021000 	.word	0x40021000

0800100c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001010:	bf00      	nop
 8001012:	e7fd      	b.n	8001010 <NMI_Handler+0x4>

08001014 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001018:	bf00      	nop
 800101a:	e7fd      	b.n	8001018 <HardFault_Handler+0x4>

0800101c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001020:	bf00      	nop
 8001022:	e7fd      	b.n	8001020 <MemManage_Handler+0x4>

08001024 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001028:	bf00      	nop
 800102a:	e7fd      	b.n	8001028 <BusFault_Handler+0x4>

0800102c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001030:	bf00      	nop
 8001032:	e7fd      	b.n	8001030 <UsageFault_Handler+0x4>

08001034 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001038:	bf00      	nop
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr

08001042 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001042:	b480      	push	{r7}
 8001044:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001046:	bf00      	nop
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001054:	bf00      	nop
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr

0800105e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001062:	f000 f8d1 	bl	8001208 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}
	...

0800106c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001070:	4802      	ldr	r0, [pc, #8]	@ (800107c <CAN1_RX0_IRQHandler+0x10>)
 8001072:	f000 fc75 	bl	8001960 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	20000078 	.word	0x20000078

08001080 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b086      	sub	sp, #24
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001088:	4a14      	ldr	r2, [pc, #80]	@ (80010dc <_sbrk+0x5c>)
 800108a:	4b15      	ldr	r3, [pc, #84]	@ (80010e0 <_sbrk+0x60>)
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001094:	4b13      	ldr	r3, [pc, #76]	@ (80010e4 <_sbrk+0x64>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d102      	bne.n	80010a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800109c:	4b11      	ldr	r3, [pc, #68]	@ (80010e4 <_sbrk+0x64>)
 800109e:	4a12      	ldr	r2, [pc, #72]	@ (80010e8 <_sbrk+0x68>)
 80010a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010a2:	4b10      	ldr	r3, [pc, #64]	@ (80010e4 <_sbrk+0x64>)
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4413      	add	r3, r2
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	d207      	bcs.n	80010c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010b0:	f002 fed4 	bl	8003e5c <__errno>
 80010b4:	4603      	mov	r3, r0
 80010b6:	220c      	movs	r2, #12
 80010b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010be:	e009      	b.n	80010d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010c0:	4b08      	ldr	r3, [pc, #32]	@ (80010e4 <_sbrk+0x64>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010c6:	4b07      	ldr	r3, [pc, #28]	@ (80010e4 <_sbrk+0x64>)
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4413      	add	r3, r2
 80010ce:	4a05      	ldr	r2, [pc, #20]	@ (80010e4 <_sbrk+0x64>)
 80010d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010d2:	68fb      	ldr	r3, [r7, #12]
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3718      	adds	r7, #24
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	20020000 	.word	0x20020000
 80010e0:	00000400 	.word	0x00000400
 80010e4:	20000174 	.word	0x20000174
 80010e8:	200002c8 	.word	0x200002c8

080010ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010f0:	4b06      	ldr	r3, [pc, #24]	@ (800110c <SystemInit+0x20>)
 80010f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010f6:	4a05      	ldr	r2, [pc, #20]	@ (800110c <SystemInit+0x20>)
 80010f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001100:	bf00      	nop
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	e000ed00 	.word	0xe000ed00

08001110 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001110:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001148 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001114:	f7ff ffea 	bl	80010ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001118:	480c      	ldr	r0, [pc, #48]	@ (800114c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800111a:	490d      	ldr	r1, [pc, #52]	@ (8001150 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800111c:	4a0d      	ldr	r2, [pc, #52]	@ (8001154 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800111e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001120:	e002      	b.n	8001128 <LoopCopyDataInit>

08001122 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001122:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001124:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001126:	3304      	adds	r3, #4

08001128 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001128:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800112a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800112c:	d3f9      	bcc.n	8001122 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800112e:	4a0a      	ldr	r2, [pc, #40]	@ (8001158 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001130:	4c0a      	ldr	r4, [pc, #40]	@ (800115c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001132:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001134:	e001      	b.n	800113a <LoopFillZerobss>

08001136 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001136:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001138:	3204      	adds	r2, #4

0800113a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800113a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800113c:	d3fb      	bcc.n	8001136 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800113e:	f002 fe93 	bl	8003e68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001142:	f7ff faf3 	bl	800072c <main>
  bx  lr    
 8001146:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001148:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800114c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001150:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001154:	080047e0 	.word	0x080047e0
  ldr r2, =_sbss
 8001158:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800115c:	200002c4 	.word	0x200002c4

08001160 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001160:	e7fe      	b.n	8001160 <ADC_IRQHandler>
	...

08001164 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001168:	4b0e      	ldr	r3, [pc, #56]	@ (80011a4 <HAL_Init+0x40>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a0d      	ldr	r2, [pc, #52]	@ (80011a4 <HAL_Init+0x40>)
 800116e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001172:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001174:	4b0b      	ldr	r3, [pc, #44]	@ (80011a4 <HAL_Init+0x40>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a0a      	ldr	r2, [pc, #40]	@ (80011a4 <HAL_Init+0x40>)
 800117a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800117e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001180:	4b08      	ldr	r3, [pc, #32]	@ (80011a4 <HAL_Init+0x40>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a07      	ldr	r2, [pc, #28]	@ (80011a4 <HAL_Init+0x40>)
 8001186:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800118a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800118c:	2003      	movs	r0, #3
 800118e:	f000 fee7 	bl	8001f60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001192:	2000      	movs	r0, #0
 8001194:	f000 f808 	bl	80011a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001198:	f7ff fe1c 	bl	8000dd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800119c:	2300      	movs	r3, #0
}
 800119e:	4618      	mov	r0, r3
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	40023c00 	.word	0x40023c00

080011a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011b0:	4b12      	ldr	r3, [pc, #72]	@ (80011fc <HAL_InitTick+0x54>)
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	4b12      	ldr	r3, [pc, #72]	@ (8001200 <HAL_InitTick+0x58>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	4619      	mov	r1, r3
 80011ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011be:	fbb3 f3f1 	udiv	r3, r3, r1
 80011c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011c6:	4618      	mov	r0, r3
 80011c8:	f000 feff 	bl	8001fca <HAL_SYSTICK_Config>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	e00e      	b.n	80011f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2b0f      	cmp	r3, #15
 80011da:	d80a      	bhi.n	80011f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011dc:	2200      	movs	r2, #0
 80011de:	6879      	ldr	r1, [r7, #4]
 80011e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80011e4:	f000 fec7 	bl	8001f76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011e8:	4a06      	ldr	r2, [pc, #24]	@ (8001204 <HAL_InitTick+0x5c>)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011ee:	2300      	movs	r3, #0
 80011f0:	e000      	b.n	80011f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	20000000 	.word	0x20000000
 8001200:	20000008 	.word	0x20000008
 8001204:	20000004 	.word	0x20000004

08001208 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800120c:	4b06      	ldr	r3, [pc, #24]	@ (8001228 <HAL_IncTick+0x20>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	461a      	mov	r2, r3
 8001212:	4b06      	ldr	r3, [pc, #24]	@ (800122c <HAL_IncTick+0x24>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4413      	add	r3, r2
 8001218:	4a04      	ldr	r2, [pc, #16]	@ (800122c <HAL_IncTick+0x24>)
 800121a:	6013      	str	r3, [r2, #0]
}
 800121c:	bf00      	nop
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	20000008 	.word	0x20000008
 800122c:	20000178 	.word	0x20000178

08001230 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  return uwTick;
 8001234:	4b03      	ldr	r3, [pc, #12]	@ (8001244 <HAL_GetTick+0x14>)
 8001236:	681b      	ldr	r3, [r3, #0]
}
 8001238:	4618      	mov	r0, r3
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	20000178 	.word	0x20000178

08001248 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001250:	f7ff ffee 	bl	8001230 <HAL_GetTick>
 8001254:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001260:	d005      	beq.n	800126e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001262:	4b0a      	ldr	r3, [pc, #40]	@ (800128c <HAL_Delay+0x44>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	461a      	mov	r2, r3
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	4413      	add	r3, r2
 800126c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800126e:	bf00      	nop
 8001270:	f7ff ffde 	bl	8001230 <HAL_GetTick>
 8001274:	4602      	mov	r2, r0
 8001276:	68bb      	ldr	r3, [r7, #8]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	68fa      	ldr	r2, [r7, #12]
 800127c:	429a      	cmp	r2, r3
 800127e:	d8f7      	bhi.n	8001270 <HAL_Delay+0x28>
  {
  }
}
 8001280:	bf00      	nop
 8001282:	bf00      	nop
 8001284:	3710      	adds	r7, #16
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	20000008 	.word	0x20000008

08001290 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d101      	bne.n	80012a2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e0ed      	b.n	800147e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d102      	bne.n	80012b4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f7ff fdb8 	bl	8000e24 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f042 0201 	orr.w	r2, r2, #1
 80012c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012c4:	f7ff ffb4 	bl	8001230 <HAL_GetTick>
 80012c8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80012ca:	e012      	b.n	80012f2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80012cc:	f7ff ffb0 	bl	8001230 <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	2b0a      	cmp	r3, #10
 80012d8:	d90b      	bls.n	80012f2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012de:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2205      	movs	r2, #5
 80012ea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e0c5      	b.n	800147e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f003 0301 	and.w	r3, r3, #1
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d0e5      	beq.n	80012cc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f022 0202 	bic.w	r2, r2, #2
 800130e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001310:	f7ff ff8e 	bl	8001230 <HAL_GetTick>
 8001314:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001316:	e012      	b.n	800133e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001318:	f7ff ff8a 	bl	8001230 <HAL_GetTick>
 800131c:	4602      	mov	r2, r0
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	2b0a      	cmp	r3, #10
 8001324:	d90b      	bls.n	800133e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800132a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2205      	movs	r2, #5
 8001336:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e09f      	b.n	800147e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f003 0302 	and.w	r3, r3, #2
 8001348:	2b00      	cmp	r3, #0
 800134a:	d1e5      	bne.n	8001318 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	7e1b      	ldrb	r3, [r3, #24]
 8001350:	2b01      	cmp	r3, #1
 8001352:	d108      	bne.n	8001366 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	e007      	b.n	8001376 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001374:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	7e5b      	ldrb	r3, [r3, #25]
 800137a:	2b01      	cmp	r3, #1
 800137c:	d108      	bne.n	8001390 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800138c:	601a      	str	r2, [r3, #0]
 800138e:	e007      	b.n	80013a0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800139e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	7e9b      	ldrb	r3, [r3, #26]
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d108      	bne.n	80013ba <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f042 0220 	orr.w	r2, r2, #32
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	e007      	b.n	80013ca <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f022 0220 	bic.w	r2, r2, #32
 80013c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	7edb      	ldrb	r3, [r3, #27]
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d108      	bne.n	80013e4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f022 0210 	bic.w	r2, r2, #16
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	e007      	b.n	80013f4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f042 0210 	orr.w	r2, r2, #16
 80013f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	7f1b      	ldrb	r3, [r3, #28]
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d108      	bne.n	800140e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f042 0208 	orr.w	r2, r2, #8
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	e007      	b.n	800141e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f022 0208 	bic.w	r2, r2, #8
 800141c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	7f5b      	ldrb	r3, [r3, #29]
 8001422:	2b01      	cmp	r3, #1
 8001424:	d108      	bne.n	8001438 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f042 0204 	orr.w	r2, r2, #4
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	e007      	b.n	8001448 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f022 0204 	bic.w	r2, r2, #4
 8001446:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	689a      	ldr	r2, [r3, #8]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	431a      	orrs	r2, r3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	691b      	ldr	r3, [r3, #16]
 8001456:	431a      	orrs	r2, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	695b      	ldr	r3, [r3, #20]
 800145c:	ea42 0103 	orr.w	r1, r2, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	1e5a      	subs	r2, r3, #1
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	430a      	orrs	r2, r1
 800146c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2200      	movs	r2, #0
 8001472:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2201      	movs	r2, #1
 8001478:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800147c:	2300      	movs	r3, #0
}
 800147e:	4618      	mov	r0, r3
 8001480:	3710      	adds	r7, #16
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
	...

08001488 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001488:	b480      	push	{r7}
 800148a:	b087      	sub	sp, #28
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800149e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80014a0:	7cfb      	ldrb	r3, [r7, #19]
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d003      	beq.n	80014ae <HAL_CAN_ConfigFilter+0x26>
 80014a6:	7cfb      	ldrb	r3, [r7, #19]
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	f040 80be 	bne.w	800162a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80014ae:	4b65      	ldr	r3, [pc, #404]	@ (8001644 <HAL_CAN_ConfigFilter+0x1bc>)
 80014b0:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80014b8:	f043 0201 	orr.w	r2, r3, #1
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80014c8:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014dc:	021b      	lsls	r3, r3, #8
 80014de:	431a      	orrs	r2, r3
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	695b      	ldr	r3, [r3, #20]
 80014ea:	f003 031f 	and.w	r3, r3, #31
 80014ee:	2201      	movs	r2, #1
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	43db      	mvns	r3, r3
 8001500:	401a      	ands	r2, r3
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	69db      	ldr	r3, [r3, #28]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d123      	bne.n	8001558 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	43db      	mvns	r3, r3
 800151a:	401a      	ands	r2, r3
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	68db      	ldr	r3, [r3, #12]
 8001526:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800152e:	683a      	ldr	r2, [r7, #0]
 8001530:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001532:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	3248      	adds	r2, #72	@ 0x48
 8001538:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800154c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800154e:	6979      	ldr	r1, [r7, #20]
 8001550:	3348      	adds	r3, #72	@ 0x48
 8001552:	00db      	lsls	r3, r3, #3
 8001554:	440b      	add	r3, r1
 8001556:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	69db      	ldr	r3, [r3, #28]
 800155c:	2b01      	cmp	r3, #1
 800155e:	d122      	bne.n	80015a6 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	431a      	orrs	r2, r3
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800157c:	683a      	ldr	r2, [r7, #0]
 800157e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001580:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	3248      	adds	r2, #72	@ 0x48
 8001586:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800159a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800159c:	6979      	ldr	r1, [r7, #20]
 800159e:	3348      	adds	r3, #72	@ 0x48
 80015a0:	00db      	lsls	r3, r3, #3
 80015a2:	440b      	add	r3, r1
 80015a4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	699b      	ldr	r3, [r3, #24]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d109      	bne.n	80015c2 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	43db      	mvns	r3, r3
 80015b8:	401a      	ands	r2, r3
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80015c0:	e007      	b.n	80015d2 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	431a      	orrs	r2, r3
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	691b      	ldr	r3, [r3, #16]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d109      	bne.n	80015ee <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	43db      	mvns	r3, r3
 80015e4:	401a      	ands	r2, r3
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80015ec:	e007      	b.n	80015fe <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	431a      	orrs	r2, r3
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	6a1b      	ldr	r3, [r3, #32]
 8001602:	2b01      	cmp	r3, #1
 8001604:	d107      	bne.n	8001616 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	431a      	orrs	r2, r3
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800161c:	f023 0201 	bic.w	r2, r3, #1
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001626:	2300      	movs	r3, #0
 8001628:	e006      	b.n	8001638 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800162e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
  }
}
 8001638:	4618      	mov	r0, r3
 800163a:	371c      	adds	r7, #28
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr
 8001644:	40006400 	.word	0x40006400

08001648 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001656:	b2db      	uxtb	r3, r3
 8001658:	2b01      	cmp	r3, #1
 800165a:	d12e      	bne.n	80016ba <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2202      	movs	r2, #2
 8001660:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f022 0201 	bic.w	r2, r2, #1
 8001672:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001674:	f7ff fddc 	bl	8001230 <HAL_GetTick>
 8001678:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800167a:	e012      	b.n	80016a2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800167c:	f7ff fdd8 	bl	8001230 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b0a      	cmp	r3, #10
 8001688:	d90b      	bls.n	80016a2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800168e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2205      	movs	r2, #5
 800169a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e012      	b.n	80016c8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f003 0301 	and.w	r3, r3, #1
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d1e5      	bne.n	800167c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2200      	movs	r2, #0
 80016b4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80016b6:	2300      	movs	r3, #0
 80016b8:	e006      	b.n	80016c8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016be:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
  }
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3710      	adds	r7, #16
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80016d0:	b480      	push	{r7}
 80016d2:	b087      	sub	sp, #28
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	607a      	str	r2, [r7, #4]
 80016dc:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016e4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80016e6:	7dfb      	ldrb	r3, [r7, #23]
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d003      	beq.n	80016f4 <HAL_CAN_GetRxMessage+0x24>
 80016ec:	7dfb      	ldrb	r3, [r7, #23]
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	f040 8103 	bne.w	80018fa <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d10e      	bne.n	8001718 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	f003 0303 	and.w	r3, r3, #3
 8001704:	2b00      	cmp	r3, #0
 8001706:	d116      	bne.n	8001736 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800170c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	e0f7      	b.n	8001908 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	691b      	ldr	r3, [r3, #16]
 800171e:	f003 0303 	and.w	r3, r3, #3
 8001722:	2b00      	cmp	r3, #0
 8001724:	d107      	bne.n	8001736 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800172a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e0e8      	b.n	8001908 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	331b      	adds	r3, #27
 800173e:	011b      	lsls	r3, r3, #4
 8001740:	4413      	add	r3, r2
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 0204 	and.w	r2, r3, #4
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d10c      	bne.n	800176e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	331b      	adds	r3, #27
 800175c:	011b      	lsls	r3, r3, #4
 800175e:	4413      	add	r3, r2
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	0d5b      	lsrs	r3, r3, #21
 8001764:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	e00b      	b.n	8001786 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	331b      	adds	r3, #27
 8001776:	011b      	lsls	r3, r3, #4
 8001778:	4413      	add	r3, r2
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	08db      	lsrs	r3, r3, #3
 800177e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	331b      	adds	r3, #27
 800178e:	011b      	lsls	r3, r3, #4
 8001790:	4413      	add	r3, r2
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0202 	and.w	r2, r3, #2
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	331b      	adds	r3, #27
 80017a4:	011b      	lsls	r3, r3, #4
 80017a6:	4413      	add	r3, r2
 80017a8:	3304      	adds	r3, #4
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0308 	and.w	r3, r3, #8
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d003      	beq.n	80017bc <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2208      	movs	r2, #8
 80017b8:	611a      	str	r2, [r3, #16]
 80017ba:	e00b      	b.n	80017d4 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	331b      	adds	r3, #27
 80017c4:	011b      	lsls	r3, r3, #4
 80017c6:	4413      	add	r3, r2
 80017c8:	3304      	adds	r3, #4
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 020f 	and.w	r2, r3, #15
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	331b      	adds	r3, #27
 80017dc:	011b      	lsls	r3, r3, #4
 80017de:	4413      	add	r3, r2
 80017e0:	3304      	adds	r3, #4
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	0a1b      	lsrs	r3, r3, #8
 80017e6:	b2da      	uxtb	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	331b      	adds	r3, #27
 80017f4:	011b      	lsls	r3, r3, #4
 80017f6:	4413      	add	r3, r2
 80017f8:	3304      	adds	r3, #4
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	0c1b      	lsrs	r3, r3, #16
 80017fe:	b29a      	uxth	r2, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	011b      	lsls	r3, r3, #4
 800180c:	4413      	add	r3, r2
 800180e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	b2da      	uxtb	r2, r3
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	011b      	lsls	r3, r3, #4
 8001822:	4413      	add	r3, r2
 8001824:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	0a1a      	lsrs	r2, r3, #8
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	3301      	adds	r3, #1
 8001830:	b2d2      	uxtb	r2, r2
 8001832:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	011b      	lsls	r3, r3, #4
 800183c:	4413      	add	r3, r2
 800183e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	0c1a      	lsrs	r2, r3, #16
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	3302      	adds	r3, #2
 800184a:	b2d2      	uxtb	r2, r2
 800184c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	011b      	lsls	r3, r3, #4
 8001856:	4413      	add	r3, r2
 8001858:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	0e1a      	lsrs	r2, r3, #24
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	3303      	adds	r3, #3
 8001864:	b2d2      	uxtb	r2, r2
 8001866:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	011b      	lsls	r3, r3, #4
 8001870:	4413      	add	r3, r2
 8001872:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	3304      	adds	r3, #4
 800187c:	b2d2      	uxtb	r2, r2
 800187e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	011b      	lsls	r3, r3, #4
 8001888:	4413      	add	r3, r2
 800188a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	0a1a      	lsrs	r2, r3, #8
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	3305      	adds	r3, #5
 8001896:	b2d2      	uxtb	r2, r2
 8001898:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	011b      	lsls	r3, r3, #4
 80018a2:	4413      	add	r3, r2
 80018a4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	0c1a      	lsrs	r2, r3, #16
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	3306      	adds	r3, #6
 80018b0:	b2d2      	uxtb	r2, r2
 80018b2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	011b      	lsls	r3, r3, #4
 80018bc:	4413      	add	r3, r2
 80018be:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	0e1a      	lsrs	r2, r3, #24
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	3307      	adds	r3, #7
 80018ca:	b2d2      	uxtb	r2, r2
 80018cc:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d108      	bne.n	80018e6 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	68da      	ldr	r2, [r3, #12]
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f042 0220 	orr.w	r2, r2, #32
 80018e2:	60da      	str	r2, [r3, #12]
 80018e4:	e007      	b.n	80018f6 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	691a      	ldr	r2, [r3, #16]
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f042 0220 	orr.w	r2, r2, #32
 80018f4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80018f6:	2300      	movs	r3, #0
 80018f8:	e006      	b.n	8001908 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018fe:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
  }
}
 8001908:	4618      	mov	r0, r3
 800190a:	371c      	adds	r7, #28
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001914:	b480      	push	{r7}
 8001916:	b085      	sub	sp, #20
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001924:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001926:	7bfb      	ldrb	r3, [r7, #15]
 8001928:	2b01      	cmp	r3, #1
 800192a:	d002      	beq.n	8001932 <HAL_CAN_ActivateNotification+0x1e>
 800192c:	7bfb      	ldrb	r3, [r7, #15]
 800192e:	2b02      	cmp	r3, #2
 8001930:	d109      	bne.n	8001946 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	6959      	ldr	r1, [r3, #20]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	683a      	ldr	r2, [r7, #0]
 800193e:	430a      	orrs	r2, r1
 8001940:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001942:	2300      	movs	r3, #0
 8001944:	e006      	b.n	8001954 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800194a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
  }
}
 8001954:	4618      	mov	r0, r3
 8001956:	3714      	adds	r7, #20
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b08a      	sub	sp, #40	@ 0x28
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001968:	2300      	movs	r3, #0
 800196a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	695b      	ldr	r3, [r3, #20]
 8001972:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	68db      	ldr	r3, [r3, #12]
 800198a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	691b      	ldr	r3, [r3, #16]
 8001992:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	699b      	ldr	r3, [r3, #24]
 800199a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800199c:	6a3b      	ldr	r3, [r7, #32]
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d07c      	beq.n	8001aa0 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	f003 0301 	and.w	r3, r3, #1
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d023      	beq.n	80019f8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2201      	movs	r2, #1
 80019b6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80019b8:	69bb      	ldr	r3, [r7, #24]
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d003      	beq.n	80019ca <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f000 f983 	bl	8001cce <HAL_CAN_TxMailbox0CompleteCallback>
 80019c8:	e016      	b.n	80019f8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	f003 0304 	and.w	r3, r3, #4
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d004      	beq.n	80019de <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80019d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80019da:	627b      	str	r3, [r7, #36]	@ 0x24
 80019dc:	e00c      	b.n	80019f8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80019de:	69bb      	ldr	r3, [r7, #24]
 80019e0:	f003 0308 	and.w	r3, r3, #8
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d004      	beq.n	80019f2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80019e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ea:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80019ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80019f0:	e002      	b.n	80019f8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f000 f989 	bl	8001d0a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d024      	beq.n	8001a4c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a0a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d003      	beq.n	8001a1e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f000 f963 	bl	8001ce2 <HAL_CAN_TxMailbox1CompleteCallback>
 8001a1c:	e016      	b.n	8001a4c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d004      	beq.n	8001a32 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a2a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001a2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a30:	e00c      	b.n	8001a4c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d004      	beq.n	8001a46 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a3e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a42:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a44:	e002      	b.n	8001a4c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f000 f969 	bl	8001d1e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d024      	beq.n	8001aa0 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001a5e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001a60:	69bb      	ldr	r3, [r7, #24]
 8001a62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d003      	beq.n	8001a72 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f000 f943 	bl	8001cf6 <HAL_CAN_TxMailbox2CompleteCallback>
 8001a70:	e016      	b.n	8001aa0 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001a72:	69bb      	ldr	r3, [r7, #24]
 8001a74:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d004      	beq.n	8001a86 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a82:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a84:	e00c      	b.n	8001aa0 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d004      	beq.n	8001a9a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a96:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a98:	e002      	b.n	8001aa0 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f000 f949 	bl	8001d32 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001aa0:	6a3b      	ldr	r3, [r7, #32]
 8001aa2:	f003 0308 	and.w	r3, r3, #8
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d00c      	beq.n	8001ac4 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	f003 0310 	and.w	r3, r3, #16
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d007      	beq.n	8001ac4 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ab6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001aba:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2210      	movs	r2, #16
 8001ac2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001ac4:	6a3b      	ldr	r3, [r7, #32]
 8001ac6:	f003 0304 	and.w	r3, r3, #4
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d00b      	beq.n	8001ae6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	f003 0308 	and.w	r3, r3, #8
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d006      	beq.n	8001ae6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2208      	movs	r2, #8
 8001ade:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f000 f930 	bl	8001d46 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001ae6:	6a3b      	ldr	r3, [r7, #32]
 8001ae8:	f003 0302 	and.w	r3, r3, #2
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d009      	beq.n	8001b04 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	68db      	ldr	r3, [r3, #12]
 8001af6:	f003 0303 	and.w	r3, r3, #3
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d002      	beq.n	8001b04 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f7fe fdf8 	bl	80006f4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001b04:	6a3b      	ldr	r3, [r7, #32]
 8001b06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d00c      	beq.n	8001b28 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	f003 0310 	and.w	r3, r3, #16
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d007      	beq.n	8001b28 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b1a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b1e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2210      	movs	r2, #16
 8001b26:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001b28:	6a3b      	ldr	r3, [r7, #32]
 8001b2a:	f003 0320 	and.w	r3, r3, #32
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d00b      	beq.n	8001b4a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	f003 0308 	and.w	r3, r3, #8
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d006      	beq.n	8001b4a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2208      	movs	r2, #8
 8001b42:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f000 f912 	bl	8001d6e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001b4a:	6a3b      	ldr	r3, [r7, #32]
 8001b4c:	f003 0310 	and.w	r3, r3, #16
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d009      	beq.n	8001b68 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	691b      	ldr	r3, [r3, #16]
 8001b5a:	f003 0303 	and.w	r3, r3, #3
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d002      	beq.n	8001b68 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f000 f8f9 	bl	8001d5a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001b68:	6a3b      	ldr	r3, [r7, #32]
 8001b6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d00b      	beq.n	8001b8a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	f003 0310 	and.w	r3, r3, #16
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d006      	beq.n	8001b8a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2210      	movs	r2, #16
 8001b82:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f000 f8fc 	bl	8001d82 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001b8a:	6a3b      	ldr	r3, [r7, #32]
 8001b8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d00b      	beq.n	8001bac <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	f003 0308 	and.w	r3, r3, #8
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d006      	beq.n	8001bac <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	2208      	movs	r2, #8
 8001ba4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f000 f8f5 	bl	8001d96 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001bac:	6a3b      	ldr	r3, [r7, #32]
 8001bae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d07b      	beq.n	8001cae <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	f003 0304 	and.w	r3, r3, #4
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d072      	beq.n	8001ca6 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001bc0:	6a3b      	ldr	r3, [r7, #32]
 8001bc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d008      	beq.n	8001bdc <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d003      	beq.n	8001bdc <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bd6:	f043 0301 	orr.w	r3, r3, #1
 8001bda:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001bdc:	6a3b      	ldr	r3, [r7, #32]
 8001bde:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d008      	beq.n	8001bf8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d003      	beq.n	8001bf8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bf2:	f043 0302 	orr.w	r3, r3, #2
 8001bf6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001bf8:	6a3b      	ldr	r3, [r7, #32]
 8001bfa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d008      	beq.n	8001c14 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d003      	beq.n	8001c14 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c0e:	f043 0304 	orr.w	r3, r3, #4
 8001c12:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001c14:	6a3b      	ldr	r3, [r7, #32]
 8001c16:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d043      	beq.n	8001ca6 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d03e      	beq.n	8001ca6 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001c2e:	2b60      	cmp	r3, #96	@ 0x60
 8001c30:	d02b      	beq.n	8001c8a <HAL_CAN_IRQHandler+0x32a>
 8001c32:	2b60      	cmp	r3, #96	@ 0x60
 8001c34:	d82e      	bhi.n	8001c94 <HAL_CAN_IRQHandler+0x334>
 8001c36:	2b50      	cmp	r3, #80	@ 0x50
 8001c38:	d022      	beq.n	8001c80 <HAL_CAN_IRQHandler+0x320>
 8001c3a:	2b50      	cmp	r3, #80	@ 0x50
 8001c3c:	d82a      	bhi.n	8001c94 <HAL_CAN_IRQHandler+0x334>
 8001c3e:	2b40      	cmp	r3, #64	@ 0x40
 8001c40:	d019      	beq.n	8001c76 <HAL_CAN_IRQHandler+0x316>
 8001c42:	2b40      	cmp	r3, #64	@ 0x40
 8001c44:	d826      	bhi.n	8001c94 <HAL_CAN_IRQHandler+0x334>
 8001c46:	2b30      	cmp	r3, #48	@ 0x30
 8001c48:	d010      	beq.n	8001c6c <HAL_CAN_IRQHandler+0x30c>
 8001c4a:	2b30      	cmp	r3, #48	@ 0x30
 8001c4c:	d822      	bhi.n	8001c94 <HAL_CAN_IRQHandler+0x334>
 8001c4e:	2b10      	cmp	r3, #16
 8001c50:	d002      	beq.n	8001c58 <HAL_CAN_IRQHandler+0x2f8>
 8001c52:	2b20      	cmp	r3, #32
 8001c54:	d005      	beq.n	8001c62 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001c56:	e01d      	b.n	8001c94 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c5a:	f043 0308 	orr.w	r3, r3, #8
 8001c5e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001c60:	e019      	b.n	8001c96 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c64:	f043 0310 	orr.w	r3, r3, #16
 8001c68:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001c6a:	e014      	b.n	8001c96 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c6e:	f043 0320 	orr.w	r3, r3, #32
 8001c72:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001c74:	e00f      	b.n	8001c96 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001c7c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001c7e:	e00a      	b.n	8001c96 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c86:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001c88:	e005      	b.n	8001c96 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c90:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001c92:	e000      	b.n	8001c96 <HAL_CAN_IRQHandler+0x336>
            break;
 8001c94:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	699a      	ldr	r2, [r3, #24]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001ca4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2204      	movs	r2, #4
 8001cac:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d008      	beq.n	8001cc6 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cba:	431a      	orrs	r2, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f000 f872 	bl	8001daa <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001cc6:	bf00      	nop
 8001cc8:	3728      	adds	r7, #40	@ 0x28
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	b083      	sub	sp, #12
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001cd6:	bf00      	nop
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr

08001ce2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	b083      	sub	sp, #12
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001cea:	bf00      	nop
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr

08001cf6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	b083      	sub	sp, #12
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001cfe:	bf00      	nop
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr

08001d0a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	b083      	sub	sp, #12
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001d12:	bf00      	nop
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr

08001d1e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	b083      	sub	sp, #12
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001d26:	bf00      	nop
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr

08001d32 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d32:	b480      	push	{r7}
 8001d34:	b083      	sub	sp, #12
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001d3a:	bf00      	nop
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr

08001d46 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001d46:	b480      	push	{r7}
 8001d48:	b083      	sub	sp, #12
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001d4e:	bf00      	nop
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr

08001d5a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	b083      	sub	sp, #12
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001d62:	bf00      	nop
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	b083      	sub	sp, #12
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001d76:	bf00      	nop
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr

08001d82 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001d82:	b480      	push	{r7}
 8001d84:	b083      	sub	sp, #12
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001d8a:	bf00      	nop
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr

08001d96 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001d96:	b480      	push	{r7}
 8001d98:	b083      	sub	sp, #12
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001d9e:	bf00      	nop
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr

08001daa <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001daa:	b480      	push	{r7}
 8001dac:	b083      	sub	sp, #12
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001db2:	bf00      	nop
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
	...

08001dc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b085      	sub	sp, #20
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f003 0307 	and.w	r3, r3, #7
 8001dce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dd0:	4b0c      	ldr	r3, [pc, #48]	@ (8001e04 <__NVIC_SetPriorityGrouping+0x44>)
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dd6:	68ba      	ldr	r2, [r7, #8]
 8001dd8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ddc:	4013      	ands	r3, r2
 8001dde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001de8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001dec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001df0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001df2:	4a04      	ldr	r2, [pc, #16]	@ (8001e04 <__NVIC_SetPriorityGrouping+0x44>)
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	60d3      	str	r3, [r2, #12]
}
 8001df8:	bf00      	nop
 8001dfa:	3714      	adds	r7, #20
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr
 8001e04:	e000ed00 	.word	0xe000ed00

08001e08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e0c:	4b04      	ldr	r3, [pc, #16]	@ (8001e20 <__NVIC_GetPriorityGrouping+0x18>)
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	0a1b      	lsrs	r3, r3, #8
 8001e12:	f003 0307 	and.w	r3, r3, #7
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr
 8001e20:	e000ed00 	.word	0xe000ed00

08001e24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	db0b      	blt.n	8001e4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e36:	79fb      	ldrb	r3, [r7, #7]
 8001e38:	f003 021f 	and.w	r2, r3, #31
 8001e3c:	4907      	ldr	r1, [pc, #28]	@ (8001e5c <__NVIC_EnableIRQ+0x38>)
 8001e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e42:	095b      	lsrs	r3, r3, #5
 8001e44:	2001      	movs	r0, #1
 8001e46:	fa00 f202 	lsl.w	r2, r0, r2
 8001e4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e4e:	bf00      	nop
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	e000e100 	.word	0xe000e100

08001e60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	4603      	mov	r3, r0
 8001e68:	6039      	str	r1, [r7, #0]
 8001e6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	db0a      	blt.n	8001e8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	b2da      	uxtb	r2, r3
 8001e78:	490c      	ldr	r1, [pc, #48]	@ (8001eac <__NVIC_SetPriority+0x4c>)
 8001e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7e:	0112      	lsls	r2, r2, #4
 8001e80:	b2d2      	uxtb	r2, r2
 8001e82:	440b      	add	r3, r1
 8001e84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e88:	e00a      	b.n	8001ea0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	b2da      	uxtb	r2, r3
 8001e8e:	4908      	ldr	r1, [pc, #32]	@ (8001eb0 <__NVIC_SetPriority+0x50>)
 8001e90:	79fb      	ldrb	r3, [r7, #7]
 8001e92:	f003 030f 	and.w	r3, r3, #15
 8001e96:	3b04      	subs	r3, #4
 8001e98:	0112      	lsls	r2, r2, #4
 8001e9a:	b2d2      	uxtb	r2, r2
 8001e9c:	440b      	add	r3, r1
 8001e9e:	761a      	strb	r2, [r3, #24]
}
 8001ea0:	bf00      	nop
 8001ea2:	370c      	adds	r7, #12
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr
 8001eac:	e000e100 	.word	0xe000e100
 8001eb0:	e000ed00 	.word	0xe000ed00

08001eb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b089      	sub	sp, #36	@ 0x24
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	60b9      	str	r1, [r7, #8]
 8001ebe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	f003 0307 	and.w	r3, r3, #7
 8001ec6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	f1c3 0307 	rsb	r3, r3, #7
 8001ece:	2b04      	cmp	r3, #4
 8001ed0:	bf28      	it	cs
 8001ed2:	2304      	movcs	r3, #4
 8001ed4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	3304      	adds	r3, #4
 8001eda:	2b06      	cmp	r3, #6
 8001edc:	d902      	bls.n	8001ee4 <NVIC_EncodePriority+0x30>
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	3b03      	subs	r3, #3
 8001ee2:	e000      	b.n	8001ee6 <NVIC_EncodePriority+0x32>
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ee8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef2:	43da      	mvns	r2, r3
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	401a      	ands	r2, r3
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001efc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	fa01 f303 	lsl.w	r3, r1, r3
 8001f06:	43d9      	mvns	r1, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f0c:	4313      	orrs	r3, r2
         );
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3724      	adds	r7, #36	@ 0x24
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
	...

08001f1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	3b01      	subs	r3, #1
 8001f28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f2c:	d301      	bcc.n	8001f32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e00f      	b.n	8001f52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f32:	4a0a      	ldr	r2, [pc, #40]	@ (8001f5c <SysTick_Config+0x40>)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	3b01      	subs	r3, #1
 8001f38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f3a:	210f      	movs	r1, #15
 8001f3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001f40:	f7ff ff8e 	bl	8001e60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f44:	4b05      	ldr	r3, [pc, #20]	@ (8001f5c <SysTick_Config+0x40>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f4a:	4b04      	ldr	r3, [pc, #16]	@ (8001f5c <SysTick_Config+0x40>)
 8001f4c:	2207      	movs	r2, #7
 8001f4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	e000e010 	.word	0xe000e010

08001f60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f7ff ff29 	bl	8001dc0 <__NVIC_SetPriorityGrouping>
}
 8001f6e:	bf00      	nop
 8001f70:	3708      	adds	r7, #8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}

08001f76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f76:	b580      	push	{r7, lr}
 8001f78:	b086      	sub	sp, #24
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	60b9      	str	r1, [r7, #8]
 8001f80:	607a      	str	r2, [r7, #4]
 8001f82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f84:	2300      	movs	r3, #0
 8001f86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f88:	f7ff ff3e 	bl	8001e08 <__NVIC_GetPriorityGrouping>
 8001f8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	68b9      	ldr	r1, [r7, #8]
 8001f92:	6978      	ldr	r0, [r7, #20]
 8001f94:	f7ff ff8e 	bl	8001eb4 <NVIC_EncodePriority>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f9e:	4611      	mov	r1, r2
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7ff ff5d 	bl	8001e60 <__NVIC_SetPriority>
}
 8001fa6:	bf00      	nop
 8001fa8:	3718      	adds	r7, #24
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}

08001fae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b082      	sub	sp, #8
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7ff ff31 	bl	8001e24 <__NVIC_EnableIRQ>
}
 8001fc2:	bf00      	nop
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b082      	sub	sp, #8
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f7ff ffa2 	bl	8001f1c <SysTick_Config>
 8001fd8:	4603      	mov	r3, r0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
	...

08001fe4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b089      	sub	sp, #36	@ 0x24
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	61fb      	str	r3, [r7, #28]
 8001ffe:	e16b      	b.n	80022d8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002000:	2201      	movs	r2, #1
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	fa02 f303 	lsl.w	r3, r2, r3
 8002008:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	697a      	ldr	r2, [r7, #20]
 8002010:	4013      	ands	r3, r2
 8002012:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002014:	693a      	ldr	r2, [r7, #16]
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	429a      	cmp	r2, r3
 800201a:	f040 815a 	bne.w	80022d2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f003 0303 	and.w	r3, r3, #3
 8002026:	2b01      	cmp	r3, #1
 8002028:	d005      	beq.n	8002036 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002032:	2b02      	cmp	r3, #2
 8002034:	d130      	bne.n	8002098 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	2203      	movs	r2, #3
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	43db      	mvns	r3, r3
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	4013      	ands	r3, r2
 800204c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	68da      	ldr	r2, [r3, #12]
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	4313      	orrs	r3, r2
 800205e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800206c:	2201      	movs	r2, #1
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	43db      	mvns	r3, r3
 8002076:	69ba      	ldr	r2, [r7, #24]
 8002078:	4013      	ands	r3, r2
 800207a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	091b      	lsrs	r3, r3, #4
 8002082:	f003 0201 	and.w	r2, r3, #1
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	fa02 f303 	lsl.w	r3, r2, r3
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	4313      	orrs	r3, r2
 8002090:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f003 0303 	and.w	r3, r3, #3
 80020a0:	2b03      	cmp	r3, #3
 80020a2:	d017      	beq.n	80020d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	005b      	lsls	r3, r3, #1
 80020ae:	2203      	movs	r2, #3
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	43db      	mvns	r3, r3
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	4013      	ands	r3, r2
 80020ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	689a      	ldr	r2, [r3, #8]
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f003 0303 	and.w	r3, r3, #3
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d123      	bne.n	8002128 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	08da      	lsrs	r2, r3, #3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	3208      	adds	r2, #8
 80020e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	f003 0307 	and.w	r3, r3, #7
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	220f      	movs	r2, #15
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	43db      	mvns	r3, r3
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	4013      	ands	r3, r2
 8002102:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	691a      	ldr	r2, [r3, #16]
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	f003 0307 	and.w	r3, r3, #7
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	4313      	orrs	r3, r2
 8002118:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	08da      	lsrs	r2, r3, #3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	3208      	adds	r2, #8
 8002122:	69b9      	ldr	r1, [r7, #24]
 8002124:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	2203      	movs	r2, #3
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	43db      	mvns	r3, r3
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	4013      	ands	r3, r2
 800213e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f003 0203 	and.w	r2, r3, #3
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	005b      	lsls	r3, r3, #1
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	4313      	orrs	r3, r2
 8002154:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002164:	2b00      	cmp	r3, #0
 8002166:	f000 80b4 	beq.w	80022d2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800216a:	2300      	movs	r3, #0
 800216c:	60fb      	str	r3, [r7, #12]
 800216e:	4b60      	ldr	r3, [pc, #384]	@ (80022f0 <HAL_GPIO_Init+0x30c>)
 8002170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002172:	4a5f      	ldr	r2, [pc, #380]	@ (80022f0 <HAL_GPIO_Init+0x30c>)
 8002174:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002178:	6453      	str	r3, [r2, #68]	@ 0x44
 800217a:	4b5d      	ldr	r3, [pc, #372]	@ (80022f0 <HAL_GPIO_Init+0x30c>)
 800217c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800217e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002182:	60fb      	str	r3, [r7, #12]
 8002184:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002186:	4a5b      	ldr	r2, [pc, #364]	@ (80022f4 <HAL_GPIO_Init+0x310>)
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	089b      	lsrs	r3, r3, #2
 800218c:	3302      	adds	r3, #2
 800218e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002192:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	f003 0303 	and.w	r3, r3, #3
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	220f      	movs	r2, #15
 800219e:	fa02 f303 	lsl.w	r3, r2, r3
 80021a2:	43db      	mvns	r3, r3
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	4013      	ands	r3, r2
 80021a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a52      	ldr	r2, [pc, #328]	@ (80022f8 <HAL_GPIO_Init+0x314>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d02b      	beq.n	800220a <HAL_GPIO_Init+0x226>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a51      	ldr	r2, [pc, #324]	@ (80022fc <HAL_GPIO_Init+0x318>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d025      	beq.n	8002206 <HAL_GPIO_Init+0x222>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a50      	ldr	r2, [pc, #320]	@ (8002300 <HAL_GPIO_Init+0x31c>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d01f      	beq.n	8002202 <HAL_GPIO_Init+0x21e>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a4f      	ldr	r2, [pc, #316]	@ (8002304 <HAL_GPIO_Init+0x320>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d019      	beq.n	80021fe <HAL_GPIO_Init+0x21a>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a4e      	ldr	r2, [pc, #312]	@ (8002308 <HAL_GPIO_Init+0x324>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d013      	beq.n	80021fa <HAL_GPIO_Init+0x216>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a4d      	ldr	r2, [pc, #308]	@ (800230c <HAL_GPIO_Init+0x328>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d00d      	beq.n	80021f6 <HAL_GPIO_Init+0x212>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a4c      	ldr	r2, [pc, #304]	@ (8002310 <HAL_GPIO_Init+0x32c>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d007      	beq.n	80021f2 <HAL_GPIO_Init+0x20e>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a4b      	ldr	r2, [pc, #300]	@ (8002314 <HAL_GPIO_Init+0x330>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d101      	bne.n	80021ee <HAL_GPIO_Init+0x20a>
 80021ea:	2307      	movs	r3, #7
 80021ec:	e00e      	b.n	800220c <HAL_GPIO_Init+0x228>
 80021ee:	2308      	movs	r3, #8
 80021f0:	e00c      	b.n	800220c <HAL_GPIO_Init+0x228>
 80021f2:	2306      	movs	r3, #6
 80021f4:	e00a      	b.n	800220c <HAL_GPIO_Init+0x228>
 80021f6:	2305      	movs	r3, #5
 80021f8:	e008      	b.n	800220c <HAL_GPIO_Init+0x228>
 80021fa:	2304      	movs	r3, #4
 80021fc:	e006      	b.n	800220c <HAL_GPIO_Init+0x228>
 80021fe:	2303      	movs	r3, #3
 8002200:	e004      	b.n	800220c <HAL_GPIO_Init+0x228>
 8002202:	2302      	movs	r3, #2
 8002204:	e002      	b.n	800220c <HAL_GPIO_Init+0x228>
 8002206:	2301      	movs	r3, #1
 8002208:	e000      	b.n	800220c <HAL_GPIO_Init+0x228>
 800220a:	2300      	movs	r3, #0
 800220c:	69fa      	ldr	r2, [r7, #28]
 800220e:	f002 0203 	and.w	r2, r2, #3
 8002212:	0092      	lsls	r2, r2, #2
 8002214:	4093      	lsls	r3, r2
 8002216:	69ba      	ldr	r2, [r7, #24]
 8002218:	4313      	orrs	r3, r2
 800221a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800221c:	4935      	ldr	r1, [pc, #212]	@ (80022f4 <HAL_GPIO_Init+0x310>)
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	089b      	lsrs	r3, r3, #2
 8002222:	3302      	adds	r3, #2
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800222a:	4b3b      	ldr	r3, [pc, #236]	@ (8002318 <HAL_GPIO_Init+0x334>)
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	43db      	mvns	r3, r3
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	4013      	ands	r3, r2
 8002238:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d003      	beq.n	800224e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	4313      	orrs	r3, r2
 800224c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800224e:	4a32      	ldr	r2, [pc, #200]	@ (8002318 <HAL_GPIO_Init+0x334>)
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002254:	4b30      	ldr	r3, [pc, #192]	@ (8002318 <HAL_GPIO_Init+0x334>)
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	43db      	mvns	r3, r3
 800225e:	69ba      	ldr	r2, [r7, #24]
 8002260:	4013      	ands	r3, r2
 8002262:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d003      	beq.n	8002278 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	4313      	orrs	r3, r2
 8002276:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002278:	4a27      	ldr	r2, [pc, #156]	@ (8002318 <HAL_GPIO_Init+0x334>)
 800227a:	69bb      	ldr	r3, [r7, #24]
 800227c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800227e:	4b26      	ldr	r3, [pc, #152]	@ (8002318 <HAL_GPIO_Init+0x334>)
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	43db      	mvns	r3, r3
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	4013      	ands	r3, r2
 800228c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d003      	beq.n	80022a2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800229a:	69ba      	ldr	r2, [r7, #24]
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	4313      	orrs	r3, r2
 80022a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022a2:	4a1d      	ldr	r2, [pc, #116]	@ (8002318 <HAL_GPIO_Init+0x334>)
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022a8:	4b1b      	ldr	r3, [pc, #108]	@ (8002318 <HAL_GPIO_Init+0x334>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	43db      	mvns	r3, r3
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	4013      	ands	r3, r2
 80022b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d003      	beq.n	80022cc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022cc:	4a12      	ldr	r2, [pc, #72]	@ (8002318 <HAL_GPIO_Init+0x334>)
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	3301      	adds	r3, #1
 80022d6:	61fb      	str	r3, [r7, #28]
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	2b0f      	cmp	r3, #15
 80022dc:	f67f ae90 	bls.w	8002000 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022e0:	bf00      	nop
 80022e2:	bf00      	nop
 80022e4:	3724      	adds	r7, #36	@ 0x24
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	40023800 	.word	0x40023800
 80022f4:	40013800 	.word	0x40013800
 80022f8:	40020000 	.word	0x40020000
 80022fc:	40020400 	.word	0x40020400
 8002300:	40020800 	.word	0x40020800
 8002304:	40020c00 	.word	0x40020c00
 8002308:	40021000 	.word	0x40021000
 800230c:	40021400 	.word	0x40021400
 8002310:	40021800 	.word	0x40021800
 8002314:	40021c00 	.word	0x40021c00
 8002318:	40013c00 	.word	0x40013c00

0800231c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	460b      	mov	r3, r1
 8002326:	807b      	strh	r3, [r7, #2]
 8002328:	4613      	mov	r3, r2
 800232a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800232c:	787b      	ldrb	r3, [r7, #1]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d003      	beq.n	800233a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002332:	887a      	ldrh	r2, [r7, #2]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002338:	e003      	b.n	8002342 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800233a:	887b      	ldrh	r3, [r7, #2]
 800233c:	041a      	lsls	r2, r3, #16
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	619a      	str	r2, [r3, #24]
}
 8002342:	bf00      	nop
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
	...

08002350 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d101      	bne.n	8002362 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e12b      	b.n	80025ba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002368:	b2db      	uxtb	r3, r3
 800236a:	2b00      	cmp	r3, #0
 800236c:	d106      	bne.n	800237c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f7fe fda4 	bl	8000ec4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2224      	movs	r2, #36	@ 0x24
 8002380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f022 0201 	bic.w	r2, r2, #1
 8002392:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80023a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80023b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80023b4:	f001 f8da 	bl	800356c <HAL_RCC_GetPCLK1Freq>
 80023b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	4a81      	ldr	r2, [pc, #516]	@ (80025c4 <HAL_I2C_Init+0x274>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d807      	bhi.n	80023d4 <HAL_I2C_Init+0x84>
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	4a80      	ldr	r2, [pc, #512]	@ (80025c8 <HAL_I2C_Init+0x278>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	bf94      	ite	ls
 80023cc:	2301      	movls	r3, #1
 80023ce:	2300      	movhi	r3, #0
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	e006      	b.n	80023e2 <HAL_I2C_Init+0x92>
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	4a7d      	ldr	r2, [pc, #500]	@ (80025cc <HAL_I2C_Init+0x27c>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	bf94      	ite	ls
 80023dc:	2301      	movls	r3, #1
 80023de:	2300      	movhi	r3, #0
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d001      	beq.n	80023ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e0e7      	b.n	80025ba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	4a78      	ldr	r2, [pc, #480]	@ (80025d0 <HAL_I2C_Init+0x280>)
 80023ee:	fba2 2303 	umull	r2, r3, r2, r3
 80023f2:	0c9b      	lsrs	r3, r3, #18
 80023f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	68ba      	ldr	r2, [r7, #8]
 8002406:	430a      	orrs	r2, r1
 8002408:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	6a1b      	ldr	r3, [r3, #32]
 8002410:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	4a6a      	ldr	r2, [pc, #424]	@ (80025c4 <HAL_I2C_Init+0x274>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d802      	bhi.n	8002424 <HAL_I2C_Init+0xd4>
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	3301      	adds	r3, #1
 8002422:	e009      	b.n	8002438 <HAL_I2C_Init+0xe8>
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800242a:	fb02 f303 	mul.w	r3, r2, r3
 800242e:	4a69      	ldr	r2, [pc, #420]	@ (80025d4 <HAL_I2C_Init+0x284>)
 8002430:	fba2 2303 	umull	r2, r3, r2, r3
 8002434:	099b      	lsrs	r3, r3, #6
 8002436:	3301      	adds	r3, #1
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	6812      	ldr	r2, [r2, #0]
 800243c:	430b      	orrs	r3, r1
 800243e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	69db      	ldr	r3, [r3, #28]
 8002446:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800244a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	495c      	ldr	r1, [pc, #368]	@ (80025c4 <HAL_I2C_Init+0x274>)
 8002454:	428b      	cmp	r3, r1
 8002456:	d819      	bhi.n	800248c <HAL_I2C_Init+0x13c>
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	1e59      	subs	r1, r3, #1
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	fbb1 f3f3 	udiv	r3, r1, r3
 8002466:	1c59      	adds	r1, r3, #1
 8002468:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800246c:	400b      	ands	r3, r1
 800246e:	2b00      	cmp	r3, #0
 8002470:	d00a      	beq.n	8002488 <HAL_I2C_Init+0x138>
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	1e59      	subs	r1, r3, #1
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	005b      	lsls	r3, r3, #1
 800247c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002480:	3301      	adds	r3, #1
 8002482:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002486:	e051      	b.n	800252c <HAL_I2C_Init+0x1dc>
 8002488:	2304      	movs	r3, #4
 800248a:	e04f      	b.n	800252c <HAL_I2C_Init+0x1dc>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d111      	bne.n	80024b8 <HAL_I2C_Init+0x168>
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	1e58      	subs	r0, r3, #1
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6859      	ldr	r1, [r3, #4]
 800249c:	460b      	mov	r3, r1
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	440b      	add	r3, r1
 80024a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80024a6:	3301      	adds	r3, #1
 80024a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	bf0c      	ite	eq
 80024b0:	2301      	moveq	r3, #1
 80024b2:	2300      	movne	r3, #0
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	e012      	b.n	80024de <HAL_I2C_Init+0x18e>
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	1e58      	subs	r0, r3, #1
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6859      	ldr	r1, [r3, #4]
 80024c0:	460b      	mov	r3, r1
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	440b      	add	r3, r1
 80024c6:	0099      	lsls	r1, r3, #2
 80024c8:	440b      	add	r3, r1
 80024ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80024ce:	3301      	adds	r3, #1
 80024d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	bf0c      	ite	eq
 80024d8:	2301      	moveq	r3, #1
 80024da:	2300      	movne	r3, #0
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <HAL_I2C_Init+0x196>
 80024e2:	2301      	movs	r3, #1
 80024e4:	e022      	b.n	800252c <HAL_I2C_Init+0x1dc>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d10e      	bne.n	800250c <HAL_I2C_Init+0x1bc>
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	1e58      	subs	r0, r3, #1
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6859      	ldr	r1, [r3, #4]
 80024f6:	460b      	mov	r3, r1
 80024f8:	005b      	lsls	r3, r3, #1
 80024fa:	440b      	add	r3, r1
 80024fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002500:	3301      	adds	r3, #1
 8002502:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002506:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800250a:	e00f      	b.n	800252c <HAL_I2C_Init+0x1dc>
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	1e58      	subs	r0, r3, #1
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6859      	ldr	r1, [r3, #4]
 8002514:	460b      	mov	r3, r1
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	440b      	add	r3, r1
 800251a:	0099      	lsls	r1, r3, #2
 800251c:	440b      	add	r3, r1
 800251e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002522:	3301      	adds	r3, #1
 8002524:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002528:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800252c:	6879      	ldr	r1, [r7, #4]
 800252e:	6809      	ldr	r1, [r1, #0]
 8002530:	4313      	orrs	r3, r2
 8002532:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	69da      	ldr	r2, [r3, #28]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6a1b      	ldr	r3, [r3, #32]
 8002546:	431a      	orrs	r2, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	430a      	orrs	r2, r1
 800254e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800255a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	6911      	ldr	r1, [r2, #16]
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	68d2      	ldr	r2, [r2, #12]
 8002566:	4311      	orrs	r1, r2
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	6812      	ldr	r2, [r2, #0]
 800256c:	430b      	orrs	r3, r1
 800256e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	695a      	ldr	r2, [r3, #20]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	699b      	ldr	r3, [r3, #24]
 8002582:	431a      	orrs	r2, r3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	430a      	orrs	r2, r1
 800258a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f042 0201 	orr.w	r2, r2, #1
 800259a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2200      	movs	r2, #0
 80025a0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2220      	movs	r2, #32
 80025a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3710      	adds	r7, #16
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	000186a0 	.word	0x000186a0
 80025c8:	001e847f 	.word	0x001e847f
 80025cc:	003d08ff 	.word	0x003d08ff
 80025d0:	431bde83 	.word	0x431bde83
 80025d4:	10624dd3 	.word	0x10624dd3

080025d8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b088      	sub	sp, #32
 80025dc:	af02      	add	r7, sp, #8
 80025de:	60f8      	str	r0, [r7, #12]
 80025e0:	607a      	str	r2, [r7, #4]
 80025e2:	461a      	mov	r2, r3
 80025e4:	460b      	mov	r3, r1
 80025e6:	817b      	strh	r3, [r7, #10]
 80025e8:	4613      	mov	r3, r2
 80025ea:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80025ec:	f7fe fe20 	bl	8001230 <HAL_GetTick>
 80025f0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b20      	cmp	r3, #32
 80025fc:	f040 80e0 	bne.w	80027c0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	9300      	str	r3, [sp, #0]
 8002604:	2319      	movs	r3, #25
 8002606:	2201      	movs	r2, #1
 8002608:	4970      	ldr	r1, [pc, #448]	@ (80027cc <HAL_I2C_Master_Transmit+0x1f4>)
 800260a:	68f8      	ldr	r0, [r7, #12]
 800260c:	f000 f964 	bl	80028d8 <I2C_WaitOnFlagUntilTimeout>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d001      	beq.n	800261a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002616:	2302      	movs	r3, #2
 8002618:	e0d3      	b.n	80027c2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002620:	2b01      	cmp	r3, #1
 8002622:	d101      	bne.n	8002628 <HAL_I2C_Master_Transmit+0x50>
 8002624:	2302      	movs	r3, #2
 8002626:	e0cc      	b.n	80027c2 <HAL_I2C_Master_Transmit+0x1ea>
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	2b01      	cmp	r3, #1
 800263c:	d007      	beq.n	800264e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f042 0201 	orr.w	r2, r2, #1
 800264c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800265c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2221      	movs	r2, #33	@ 0x21
 8002662:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2210      	movs	r2, #16
 800266a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2200      	movs	r2, #0
 8002672:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	893a      	ldrh	r2, [r7, #8]
 800267e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002684:	b29a      	uxth	r2, r3
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	4a50      	ldr	r2, [pc, #320]	@ (80027d0 <HAL_I2C_Master_Transmit+0x1f8>)
 800268e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002690:	8979      	ldrh	r1, [r7, #10]
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	6a3a      	ldr	r2, [r7, #32]
 8002696:	68f8      	ldr	r0, [r7, #12]
 8002698:	f000 f89c 	bl	80027d4 <I2C_MasterRequestWrite>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e08d      	b.n	80027c2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026a6:	2300      	movs	r3, #0
 80026a8:	613b      	str	r3, [r7, #16]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	695b      	ldr	r3, [r3, #20]
 80026b0:	613b      	str	r3, [r7, #16]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	699b      	ldr	r3, [r3, #24]
 80026b8:	613b      	str	r3, [r7, #16]
 80026ba:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80026bc:	e066      	b.n	800278c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026be:	697a      	ldr	r2, [r7, #20]
 80026c0:	6a39      	ldr	r1, [r7, #32]
 80026c2:	68f8      	ldr	r0, [r7, #12]
 80026c4:	f000 fa22 	bl	8002b0c <I2C_WaitOnTXEFlagUntilTimeout>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d00d      	beq.n	80026ea <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d2:	2b04      	cmp	r3, #4
 80026d4:	d107      	bne.n	80026e6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026e4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e06b      	b.n	80027c2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ee:	781a      	ldrb	r2, [r3, #0]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026fa:	1c5a      	adds	r2, r3, #1
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002704:	b29b      	uxth	r3, r3
 8002706:	3b01      	subs	r3, #1
 8002708:	b29a      	uxth	r2, r3
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002712:	3b01      	subs	r3, #1
 8002714:	b29a      	uxth	r2, r3
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	695b      	ldr	r3, [r3, #20]
 8002720:	f003 0304 	and.w	r3, r3, #4
 8002724:	2b04      	cmp	r3, #4
 8002726:	d11b      	bne.n	8002760 <HAL_I2C_Master_Transmit+0x188>
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800272c:	2b00      	cmp	r3, #0
 800272e:	d017      	beq.n	8002760 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002734:	781a      	ldrb	r2, [r3, #0]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002740:	1c5a      	adds	r2, r3, #1
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800274a:	b29b      	uxth	r3, r3
 800274c:	3b01      	subs	r3, #1
 800274e:	b29a      	uxth	r2, r3
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002758:	3b01      	subs	r3, #1
 800275a:	b29a      	uxth	r2, r3
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002760:	697a      	ldr	r2, [r7, #20]
 8002762:	6a39      	ldr	r1, [r7, #32]
 8002764:	68f8      	ldr	r0, [r7, #12]
 8002766:	f000 fa19 	bl	8002b9c <I2C_WaitOnBTFFlagUntilTimeout>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d00d      	beq.n	800278c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002774:	2b04      	cmp	r3, #4
 8002776:	d107      	bne.n	8002788 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002786:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e01a      	b.n	80027c2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002790:	2b00      	cmp	r3, #0
 8002792:	d194      	bne.n	80026be <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2220      	movs	r2, #32
 80027a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2200      	movs	r2, #0
 80027b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80027bc:	2300      	movs	r3, #0
 80027be:	e000      	b.n	80027c2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80027c0:	2302      	movs	r3, #2
  }
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3718      	adds	r7, #24
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	00100002 	.word	0x00100002
 80027d0:	ffff0000 	.word	0xffff0000

080027d4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b088      	sub	sp, #32
 80027d8:	af02      	add	r7, sp, #8
 80027da:	60f8      	str	r0, [r7, #12]
 80027dc:	607a      	str	r2, [r7, #4]
 80027de:	603b      	str	r3, [r7, #0]
 80027e0:	460b      	mov	r3, r1
 80027e2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027e8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	2b08      	cmp	r3, #8
 80027ee:	d006      	beq.n	80027fe <I2C_MasterRequestWrite+0x2a>
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d003      	beq.n	80027fe <I2C_MasterRequestWrite+0x2a>
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80027fc:	d108      	bne.n	8002810 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800280c:	601a      	str	r2, [r3, #0]
 800280e:	e00b      	b.n	8002828 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002814:	2b12      	cmp	r3, #18
 8002816:	d107      	bne.n	8002828 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002826:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	9300      	str	r3, [sp, #0]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002834:	68f8      	ldr	r0, [r7, #12]
 8002836:	f000 f84f 	bl	80028d8 <I2C_WaitOnFlagUntilTimeout>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d00d      	beq.n	800285c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800284a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800284e:	d103      	bne.n	8002858 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002856:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	e035      	b.n	80028c8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	691b      	ldr	r3, [r3, #16]
 8002860:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002864:	d108      	bne.n	8002878 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002866:	897b      	ldrh	r3, [r7, #10]
 8002868:	b2db      	uxtb	r3, r3
 800286a:	461a      	mov	r2, r3
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002874:	611a      	str	r2, [r3, #16]
 8002876:	e01b      	b.n	80028b0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002878:	897b      	ldrh	r3, [r7, #10]
 800287a:	11db      	asrs	r3, r3, #7
 800287c:	b2db      	uxtb	r3, r3
 800287e:	f003 0306 	and.w	r3, r3, #6
 8002882:	b2db      	uxtb	r3, r3
 8002884:	f063 030f 	orn	r3, r3, #15
 8002888:	b2da      	uxtb	r2, r3
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	490e      	ldr	r1, [pc, #56]	@ (80028d0 <I2C_MasterRequestWrite+0xfc>)
 8002896:	68f8      	ldr	r0, [r7, #12]
 8002898:	f000 f898 	bl	80029cc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e010      	b.n	80028c8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80028a6:	897b      	ldrh	r3, [r7, #10]
 80028a8:	b2da      	uxtb	r2, r3
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	4907      	ldr	r1, [pc, #28]	@ (80028d4 <I2C_MasterRequestWrite+0x100>)
 80028b6:	68f8      	ldr	r0, [r7, #12]
 80028b8:	f000 f888 	bl	80029cc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e000      	b.n	80028c8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80028c6:	2300      	movs	r3, #0
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3718      	adds	r7, #24
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	00010008 	.word	0x00010008
 80028d4:	00010002 	.word	0x00010002

080028d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	60b9      	str	r1, [r7, #8]
 80028e2:	603b      	str	r3, [r7, #0]
 80028e4:	4613      	mov	r3, r2
 80028e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028e8:	e048      	b.n	800297c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80028f0:	d044      	beq.n	800297c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028f2:	f7fe fc9d 	bl	8001230 <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	683a      	ldr	r2, [r7, #0]
 80028fe:	429a      	cmp	r2, r3
 8002900:	d302      	bcc.n	8002908 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d139      	bne.n	800297c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	0c1b      	lsrs	r3, r3, #16
 800290c:	b2db      	uxtb	r3, r3
 800290e:	2b01      	cmp	r3, #1
 8002910:	d10d      	bne.n	800292e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	695b      	ldr	r3, [r3, #20]
 8002918:	43da      	mvns	r2, r3
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	4013      	ands	r3, r2
 800291e:	b29b      	uxth	r3, r3
 8002920:	2b00      	cmp	r3, #0
 8002922:	bf0c      	ite	eq
 8002924:	2301      	moveq	r3, #1
 8002926:	2300      	movne	r3, #0
 8002928:	b2db      	uxtb	r3, r3
 800292a:	461a      	mov	r2, r3
 800292c:	e00c      	b.n	8002948 <I2C_WaitOnFlagUntilTimeout+0x70>
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	699b      	ldr	r3, [r3, #24]
 8002934:	43da      	mvns	r2, r3
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	4013      	ands	r3, r2
 800293a:	b29b      	uxth	r3, r3
 800293c:	2b00      	cmp	r3, #0
 800293e:	bf0c      	ite	eq
 8002940:	2301      	moveq	r3, #1
 8002942:	2300      	movne	r3, #0
 8002944:	b2db      	uxtb	r3, r3
 8002946:	461a      	mov	r2, r3
 8002948:	79fb      	ldrb	r3, [r7, #7]
 800294a:	429a      	cmp	r2, r3
 800294c:	d116      	bne.n	800297c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2200      	movs	r2, #0
 8002952:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2220      	movs	r2, #32
 8002958:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2200      	movs	r2, #0
 8002960:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002968:	f043 0220 	orr.w	r2, r3, #32
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2200      	movs	r2, #0
 8002974:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e023      	b.n	80029c4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	0c1b      	lsrs	r3, r3, #16
 8002980:	b2db      	uxtb	r3, r3
 8002982:	2b01      	cmp	r3, #1
 8002984:	d10d      	bne.n	80029a2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	695b      	ldr	r3, [r3, #20]
 800298c:	43da      	mvns	r2, r3
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	4013      	ands	r3, r2
 8002992:	b29b      	uxth	r3, r3
 8002994:	2b00      	cmp	r3, #0
 8002996:	bf0c      	ite	eq
 8002998:	2301      	moveq	r3, #1
 800299a:	2300      	movne	r3, #0
 800299c:	b2db      	uxtb	r3, r3
 800299e:	461a      	mov	r2, r3
 80029a0:	e00c      	b.n	80029bc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	699b      	ldr	r3, [r3, #24]
 80029a8:	43da      	mvns	r2, r3
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	4013      	ands	r3, r2
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	bf0c      	ite	eq
 80029b4:	2301      	moveq	r3, #1
 80029b6:	2300      	movne	r3, #0
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	461a      	mov	r2, r3
 80029bc:	79fb      	ldrb	r3, [r7, #7]
 80029be:	429a      	cmp	r2, r3
 80029c0:	d093      	beq.n	80028ea <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80029c2:	2300      	movs	r3, #0
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3710      	adds	r7, #16
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}

080029cc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	607a      	str	r2, [r7, #4]
 80029d8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80029da:	e071      	b.n	8002ac0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	695b      	ldr	r3, [r3, #20]
 80029e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029ea:	d123      	bne.n	8002a34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029fa:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002a04:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2220      	movs	r2, #32
 8002a10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a20:	f043 0204 	orr.w	r2, r3, #4
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e067      	b.n	8002b04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002a3a:	d041      	beq.n	8002ac0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a3c:	f7fe fbf8 	bl	8001230 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d302      	bcc.n	8002a52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d136      	bne.n	8002ac0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	0c1b      	lsrs	r3, r3, #16
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d10c      	bne.n	8002a76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	695b      	ldr	r3, [r3, #20]
 8002a62:	43da      	mvns	r2, r3
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	4013      	ands	r3, r2
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	bf14      	ite	ne
 8002a6e:	2301      	movne	r3, #1
 8002a70:	2300      	moveq	r3, #0
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	e00b      	b.n	8002a8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	699b      	ldr	r3, [r3, #24]
 8002a7c:	43da      	mvns	r2, r3
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	4013      	ands	r3, r2
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	bf14      	ite	ne
 8002a88:	2301      	movne	r3, #1
 8002a8a:	2300      	moveq	r3, #0
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d016      	beq.n	8002ac0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2200      	movs	r2, #0
 8002a96:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2220      	movs	r2, #32
 8002a9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aac:	f043 0220 	orr.w	r2, r3, #32
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e021      	b.n	8002b04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	0c1b      	lsrs	r3, r3, #16
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d10c      	bne.n	8002ae4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	695b      	ldr	r3, [r3, #20]
 8002ad0:	43da      	mvns	r2, r3
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	bf14      	ite	ne
 8002adc:	2301      	movne	r3, #1
 8002ade:	2300      	moveq	r3, #0
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	e00b      	b.n	8002afc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	699b      	ldr	r3, [r3, #24]
 8002aea:	43da      	mvns	r2, r3
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	4013      	ands	r3, r2
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	bf14      	ite	ne
 8002af6:	2301      	movne	r3, #1
 8002af8:	2300      	moveq	r3, #0
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	f47f af6d 	bne.w	80029dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002b02:	2300      	movs	r3, #0
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3710      	adds	r7, #16
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b18:	e034      	b.n	8002b84 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b1a:	68f8      	ldr	r0, [r7, #12]
 8002b1c:	f000 f886 	bl	8002c2c <I2C_IsAcknowledgeFailed>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d001      	beq.n	8002b2a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e034      	b.n	8002b94 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002b30:	d028      	beq.n	8002b84 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b32:	f7fe fb7d 	bl	8001230 <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	68ba      	ldr	r2, [r7, #8]
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d302      	bcc.n	8002b48 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d11d      	bne.n	8002b84 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	695b      	ldr	r3, [r3, #20]
 8002b4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b52:	2b80      	cmp	r3, #128	@ 0x80
 8002b54:	d016      	beq.n	8002b84 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2220      	movs	r2, #32
 8002b60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b70:	f043 0220 	orr.w	r2, r3, #32
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e007      	b.n	8002b94 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	695b      	ldr	r3, [r3, #20]
 8002b8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b8e:	2b80      	cmp	r3, #128	@ 0x80
 8002b90:	d1c3      	bne.n	8002b1a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002b92:	2300      	movs	r3, #0
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3710      	adds	r7, #16
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ba8:	e034      	b.n	8002c14 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002baa:	68f8      	ldr	r0, [r7, #12]
 8002bac:	f000 f83e 	bl	8002c2c <I2C_IsAcknowledgeFailed>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d001      	beq.n	8002bba <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e034      	b.n	8002c24 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002bc0:	d028      	beq.n	8002c14 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bc2:	f7fe fb35 	bl	8001230 <HAL_GetTick>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	68ba      	ldr	r2, [r7, #8]
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d302      	bcc.n	8002bd8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d11d      	bne.n	8002c14 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	695b      	ldr	r3, [r3, #20]
 8002bde:	f003 0304 	and.w	r3, r3, #4
 8002be2:	2b04      	cmp	r3, #4
 8002be4:	d016      	beq.n	8002c14 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2200      	movs	r2, #0
 8002bea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2220      	movs	r2, #32
 8002bf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c00:	f043 0220 	orr.w	r2, r3, #32
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e007      	b.n	8002c24 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	695b      	ldr	r3, [r3, #20]
 8002c1a:	f003 0304 	and.w	r3, r3, #4
 8002c1e:	2b04      	cmp	r3, #4
 8002c20:	d1c3      	bne.n	8002baa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002c22:	2300      	movs	r3, #0
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3710      	adds	r7, #16
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	695b      	ldr	r3, [r3, #20]
 8002c3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c42:	d11b      	bne.n	8002c7c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002c4c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2220      	movs	r2, #32
 8002c58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c68:	f043 0204 	orr.w	r2, r3, #4
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e000      	b.n	8002c7e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	370c      	adds	r7, #12
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
	...

08002c8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b086      	sub	sp, #24
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d101      	bne.n	8002c9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e267      	b.n	800316e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0301 	and.w	r3, r3, #1
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d075      	beq.n	8002d96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002caa:	4b88      	ldr	r3, [pc, #544]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f003 030c 	and.w	r3, r3, #12
 8002cb2:	2b04      	cmp	r3, #4
 8002cb4:	d00c      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cb6:	4b85      	ldr	r3, [pc, #532]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cbe:	2b08      	cmp	r3, #8
 8002cc0:	d112      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cc2:	4b82      	ldr	r3, [pc, #520]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002cce:	d10b      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cd0:	4b7e      	ldr	r3, [pc, #504]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d05b      	beq.n	8002d94 <HAL_RCC_OscConfig+0x108>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d157      	bne.n	8002d94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e242      	b.n	800316e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cf0:	d106      	bne.n	8002d00 <HAL_RCC_OscConfig+0x74>
 8002cf2:	4b76      	ldr	r3, [pc, #472]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a75      	ldr	r2, [pc, #468]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002cf8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cfc:	6013      	str	r3, [r2, #0]
 8002cfe:	e01d      	b.n	8002d3c <HAL_RCC_OscConfig+0xb0>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d08:	d10c      	bne.n	8002d24 <HAL_RCC_OscConfig+0x98>
 8002d0a:	4b70      	ldr	r3, [pc, #448]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a6f      	ldr	r2, [pc, #444]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002d10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d14:	6013      	str	r3, [r2, #0]
 8002d16:	4b6d      	ldr	r3, [pc, #436]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a6c      	ldr	r2, [pc, #432]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002d1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d20:	6013      	str	r3, [r2, #0]
 8002d22:	e00b      	b.n	8002d3c <HAL_RCC_OscConfig+0xb0>
 8002d24:	4b69      	ldr	r3, [pc, #420]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a68      	ldr	r2, [pc, #416]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002d2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d2e:	6013      	str	r3, [r2, #0]
 8002d30:	4b66      	ldr	r3, [pc, #408]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a65      	ldr	r2, [pc, #404]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002d36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d013      	beq.n	8002d6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d44:	f7fe fa74 	bl	8001230 <HAL_GetTick>
 8002d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d4a:	e008      	b.n	8002d5e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d4c:	f7fe fa70 	bl	8001230 <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b64      	cmp	r3, #100	@ 0x64
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e207      	b.n	800316e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d5e:	4b5b      	ldr	r3, [pc, #364]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d0f0      	beq.n	8002d4c <HAL_RCC_OscConfig+0xc0>
 8002d6a:	e014      	b.n	8002d96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d6c:	f7fe fa60 	bl	8001230 <HAL_GetTick>
 8002d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d72:	e008      	b.n	8002d86 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d74:	f7fe fa5c 	bl	8001230 <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	2b64      	cmp	r3, #100	@ 0x64
 8002d80:	d901      	bls.n	8002d86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e1f3      	b.n	800316e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d86:	4b51      	ldr	r3, [pc, #324]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d1f0      	bne.n	8002d74 <HAL_RCC_OscConfig+0xe8>
 8002d92:	e000      	b.n	8002d96 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0302 	and.w	r3, r3, #2
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d063      	beq.n	8002e6a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002da2:	4b4a      	ldr	r3, [pc, #296]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f003 030c 	and.w	r3, r3, #12
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d00b      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dae:	4b47      	ldr	r3, [pc, #284]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002db6:	2b08      	cmp	r3, #8
 8002db8:	d11c      	bne.n	8002df4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dba:	4b44      	ldr	r3, [pc, #272]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d116      	bne.n	8002df4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dc6:	4b41      	ldr	r3, [pc, #260]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d005      	beq.n	8002dde <HAL_RCC_OscConfig+0x152>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d001      	beq.n	8002dde <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e1c7      	b.n	800316e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dde:	4b3b      	ldr	r3, [pc, #236]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	691b      	ldr	r3, [r3, #16]
 8002dea:	00db      	lsls	r3, r3, #3
 8002dec:	4937      	ldr	r1, [pc, #220]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002df2:	e03a      	b.n	8002e6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d020      	beq.n	8002e3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dfc:	4b34      	ldr	r3, [pc, #208]	@ (8002ed0 <HAL_RCC_OscConfig+0x244>)
 8002dfe:	2201      	movs	r2, #1
 8002e00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e02:	f7fe fa15 	bl	8001230 <HAL_GetTick>
 8002e06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e08:	e008      	b.n	8002e1c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e0a:	f7fe fa11 	bl	8001230 <HAL_GetTick>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d901      	bls.n	8002e1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	e1a8      	b.n	800316e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e1c:	4b2b      	ldr	r3, [pc, #172]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0302 	and.w	r3, r3, #2
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d0f0      	beq.n	8002e0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e28:	4b28      	ldr	r3, [pc, #160]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	691b      	ldr	r3, [r3, #16]
 8002e34:	00db      	lsls	r3, r3, #3
 8002e36:	4925      	ldr	r1, [pc, #148]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	600b      	str	r3, [r1, #0]
 8002e3c:	e015      	b.n	8002e6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e3e:	4b24      	ldr	r3, [pc, #144]	@ (8002ed0 <HAL_RCC_OscConfig+0x244>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e44:	f7fe f9f4 	bl	8001230 <HAL_GetTick>
 8002e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e4a:	e008      	b.n	8002e5e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e4c:	f7fe f9f0 	bl	8001230 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e187      	b.n	800316e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e5e:	4b1b      	ldr	r3, [pc, #108]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d1f0      	bne.n	8002e4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0308 	and.w	r3, r3, #8
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d036      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	695b      	ldr	r3, [r3, #20]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d016      	beq.n	8002eac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e7e:	4b15      	ldr	r3, [pc, #84]	@ (8002ed4 <HAL_RCC_OscConfig+0x248>)
 8002e80:	2201      	movs	r2, #1
 8002e82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e84:	f7fe f9d4 	bl	8001230 <HAL_GetTick>
 8002e88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e8a:	e008      	b.n	8002e9e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e8c:	f7fe f9d0 	bl	8001230 <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d901      	bls.n	8002e9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e167      	b.n	800316e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e9e:	4b0b      	ldr	r3, [pc, #44]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002ea0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ea2:	f003 0302 	and.w	r3, r3, #2
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d0f0      	beq.n	8002e8c <HAL_RCC_OscConfig+0x200>
 8002eaa:	e01b      	b.n	8002ee4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002eac:	4b09      	ldr	r3, [pc, #36]	@ (8002ed4 <HAL_RCC_OscConfig+0x248>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eb2:	f7fe f9bd 	bl	8001230 <HAL_GetTick>
 8002eb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eb8:	e00e      	b.n	8002ed8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002eba:	f7fe f9b9 	bl	8001230 <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d907      	bls.n	8002ed8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	e150      	b.n	800316e <HAL_RCC_OscConfig+0x4e2>
 8002ecc:	40023800 	.word	0x40023800
 8002ed0:	42470000 	.word	0x42470000
 8002ed4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ed8:	4b88      	ldr	r3, [pc, #544]	@ (80030fc <HAL_RCC_OscConfig+0x470>)
 8002eda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002edc:	f003 0302 	and.w	r3, r3, #2
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d1ea      	bne.n	8002eba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0304 	and.w	r3, r3, #4
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	f000 8097 	beq.w	8003020 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ef6:	4b81      	ldr	r3, [pc, #516]	@ (80030fc <HAL_RCC_OscConfig+0x470>)
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002efa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d10f      	bne.n	8002f22 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f02:	2300      	movs	r3, #0
 8002f04:	60bb      	str	r3, [r7, #8]
 8002f06:	4b7d      	ldr	r3, [pc, #500]	@ (80030fc <HAL_RCC_OscConfig+0x470>)
 8002f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f0a:	4a7c      	ldr	r2, [pc, #496]	@ (80030fc <HAL_RCC_OscConfig+0x470>)
 8002f0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f10:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f12:	4b7a      	ldr	r3, [pc, #488]	@ (80030fc <HAL_RCC_OscConfig+0x470>)
 8002f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f1a:	60bb      	str	r3, [r7, #8]
 8002f1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f22:	4b77      	ldr	r3, [pc, #476]	@ (8003100 <HAL_RCC_OscConfig+0x474>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d118      	bne.n	8002f60 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f2e:	4b74      	ldr	r3, [pc, #464]	@ (8003100 <HAL_RCC_OscConfig+0x474>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a73      	ldr	r2, [pc, #460]	@ (8003100 <HAL_RCC_OscConfig+0x474>)
 8002f34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f3a:	f7fe f979 	bl	8001230 <HAL_GetTick>
 8002f3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f40:	e008      	b.n	8002f54 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f42:	f7fe f975 	bl	8001230 <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d901      	bls.n	8002f54 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e10c      	b.n	800316e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f54:	4b6a      	ldr	r3, [pc, #424]	@ (8003100 <HAL_RCC_OscConfig+0x474>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d0f0      	beq.n	8002f42 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d106      	bne.n	8002f76 <HAL_RCC_OscConfig+0x2ea>
 8002f68:	4b64      	ldr	r3, [pc, #400]	@ (80030fc <HAL_RCC_OscConfig+0x470>)
 8002f6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f6c:	4a63      	ldr	r2, [pc, #396]	@ (80030fc <HAL_RCC_OscConfig+0x470>)
 8002f6e:	f043 0301 	orr.w	r3, r3, #1
 8002f72:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f74:	e01c      	b.n	8002fb0 <HAL_RCC_OscConfig+0x324>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	2b05      	cmp	r3, #5
 8002f7c:	d10c      	bne.n	8002f98 <HAL_RCC_OscConfig+0x30c>
 8002f7e:	4b5f      	ldr	r3, [pc, #380]	@ (80030fc <HAL_RCC_OscConfig+0x470>)
 8002f80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f82:	4a5e      	ldr	r2, [pc, #376]	@ (80030fc <HAL_RCC_OscConfig+0x470>)
 8002f84:	f043 0304 	orr.w	r3, r3, #4
 8002f88:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f8a:	4b5c      	ldr	r3, [pc, #368]	@ (80030fc <HAL_RCC_OscConfig+0x470>)
 8002f8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f8e:	4a5b      	ldr	r2, [pc, #364]	@ (80030fc <HAL_RCC_OscConfig+0x470>)
 8002f90:	f043 0301 	orr.w	r3, r3, #1
 8002f94:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f96:	e00b      	b.n	8002fb0 <HAL_RCC_OscConfig+0x324>
 8002f98:	4b58      	ldr	r3, [pc, #352]	@ (80030fc <HAL_RCC_OscConfig+0x470>)
 8002f9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f9c:	4a57      	ldr	r2, [pc, #348]	@ (80030fc <HAL_RCC_OscConfig+0x470>)
 8002f9e:	f023 0301 	bic.w	r3, r3, #1
 8002fa2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fa4:	4b55      	ldr	r3, [pc, #340]	@ (80030fc <HAL_RCC_OscConfig+0x470>)
 8002fa6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fa8:	4a54      	ldr	r2, [pc, #336]	@ (80030fc <HAL_RCC_OscConfig+0x470>)
 8002faa:	f023 0304 	bic.w	r3, r3, #4
 8002fae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d015      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fb8:	f7fe f93a 	bl	8001230 <HAL_GetTick>
 8002fbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fbe:	e00a      	b.n	8002fd6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fc0:	f7fe f936 	bl	8001230 <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d901      	bls.n	8002fd6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e0cb      	b.n	800316e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fd6:	4b49      	ldr	r3, [pc, #292]	@ (80030fc <HAL_RCC_OscConfig+0x470>)
 8002fd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fda:	f003 0302 	and.w	r3, r3, #2
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d0ee      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x334>
 8002fe2:	e014      	b.n	800300e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fe4:	f7fe f924 	bl	8001230 <HAL_GetTick>
 8002fe8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fea:	e00a      	b.n	8003002 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fec:	f7fe f920 	bl	8001230 <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e0b5      	b.n	800316e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003002:	4b3e      	ldr	r3, [pc, #248]	@ (80030fc <HAL_RCC_OscConfig+0x470>)
 8003004:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	2b00      	cmp	r3, #0
 800300c:	d1ee      	bne.n	8002fec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800300e:	7dfb      	ldrb	r3, [r7, #23]
 8003010:	2b01      	cmp	r3, #1
 8003012:	d105      	bne.n	8003020 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003014:	4b39      	ldr	r3, [pc, #228]	@ (80030fc <HAL_RCC_OscConfig+0x470>)
 8003016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003018:	4a38      	ldr	r2, [pc, #224]	@ (80030fc <HAL_RCC_OscConfig+0x470>)
 800301a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800301e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	699b      	ldr	r3, [r3, #24]
 8003024:	2b00      	cmp	r3, #0
 8003026:	f000 80a1 	beq.w	800316c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800302a:	4b34      	ldr	r3, [pc, #208]	@ (80030fc <HAL_RCC_OscConfig+0x470>)
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f003 030c 	and.w	r3, r3, #12
 8003032:	2b08      	cmp	r3, #8
 8003034:	d05c      	beq.n	80030f0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	699b      	ldr	r3, [r3, #24]
 800303a:	2b02      	cmp	r3, #2
 800303c:	d141      	bne.n	80030c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800303e:	4b31      	ldr	r3, [pc, #196]	@ (8003104 <HAL_RCC_OscConfig+0x478>)
 8003040:	2200      	movs	r2, #0
 8003042:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003044:	f7fe f8f4 	bl	8001230 <HAL_GetTick>
 8003048:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800304a:	e008      	b.n	800305e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800304c:	f7fe f8f0 	bl	8001230 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b02      	cmp	r3, #2
 8003058:	d901      	bls.n	800305e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e087      	b.n	800316e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800305e:	4b27      	ldr	r3, [pc, #156]	@ (80030fc <HAL_RCC_OscConfig+0x470>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d1f0      	bne.n	800304c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	69da      	ldr	r2, [r3, #28]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a1b      	ldr	r3, [r3, #32]
 8003072:	431a      	orrs	r2, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003078:	019b      	lsls	r3, r3, #6
 800307a:	431a      	orrs	r2, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003080:	085b      	lsrs	r3, r3, #1
 8003082:	3b01      	subs	r3, #1
 8003084:	041b      	lsls	r3, r3, #16
 8003086:	431a      	orrs	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800308c:	061b      	lsls	r3, r3, #24
 800308e:	491b      	ldr	r1, [pc, #108]	@ (80030fc <HAL_RCC_OscConfig+0x470>)
 8003090:	4313      	orrs	r3, r2
 8003092:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003094:	4b1b      	ldr	r3, [pc, #108]	@ (8003104 <HAL_RCC_OscConfig+0x478>)
 8003096:	2201      	movs	r2, #1
 8003098:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800309a:	f7fe f8c9 	bl	8001230 <HAL_GetTick>
 800309e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030a0:	e008      	b.n	80030b4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030a2:	f7fe f8c5 	bl	8001230 <HAL_GetTick>
 80030a6:	4602      	mov	r2, r0
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d901      	bls.n	80030b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	e05c      	b.n	800316e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030b4:	4b11      	ldr	r3, [pc, #68]	@ (80030fc <HAL_RCC_OscConfig+0x470>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d0f0      	beq.n	80030a2 <HAL_RCC_OscConfig+0x416>
 80030c0:	e054      	b.n	800316c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030c2:	4b10      	ldr	r3, [pc, #64]	@ (8003104 <HAL_RCC_OscConfig+0x478>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c8:	f7fe f8b2 	bl	8001230 <HAL_GetTick>
 80030cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ce:	e008      	b.n	80030e2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030d0:	f7fe f8ae 	bl	8001230 <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d901      	bls.n	80030e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e045      	b.n	800316e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030e2:	4b06      	ldr	r3, [pc, #24]	@ (80030fc <HAL_RCC_OscConfig+0x470>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d1f0      	bne.n	80030d0 <HAL_RCC_OscConfig+0x444>
 80030ee:	e03d      	b.n	800316c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	699b      	ldr	r3, [r3, #24]
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d107      	bne.n	8003108 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e038      	b.n	800316e <HAL_RCC_OscConfig+0x4e2>
 80030fc:	40023800 	.word	0x40023800
 8003100:	40007000 	.word	0x40007000
 8003104:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003108:	4b1b      	ldr	r3, [pc, #108]	@ (8003178 <HAL_RCC_OscConfig+0x4ec>)
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	699b      	ldr	r3, [r3, #24]
 8003112:	2b01      	cmp	r3, #1
 8003114:	d028      	beq.n	8003168 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003120:	429a      	cmp	r2, r3
 8003122:	d121      	bne.n	8003168 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800312e:	429a      	cmp	r2, r3
 8003130:	d11a      	bne.n	8003168 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003132:	68fa      	ldr	r2, [r7, #12]
 8003134:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003138:	4013      	ands	r3, r2
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800313e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003140:	4293      	cmp	r3, r2
 8003142:	d111      	bne.n	8003168 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800314e:	085b      	lsrs	r3, r3, #1
 8003150:	3b01      	subs	r3, #1
 8003152:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003154:	429a      	cmp	r2, r3
 8003156:	d107      	bne.n	8003168 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003162:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003164:	429a      	cmp	r2, r3
 8003166:	d001      	beq.n	800316c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e000      	b.n	800316e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	3718      	adds	r7, #24
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	40023800 	.word	0x40023800

0800317c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d101      	bne.n	8003190 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e0cc      	b.n	800332a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003190:	4b68      	ldr	r3, [pc, #416]	@ (8003334 <HAL_RCC_ClockConfig+0x1b8>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0307 	and.w	r3, r3, #7
 8003198:	683a      	ldr	r2, [r7, #0]
 800319a:	429a      	cmp	r2, r3
 800319c:	d90c      	bls.n	80031b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800319e:	4b65      	ldr	r3, [pc, #404]	@ (8003334 <HAL_RCC_ClockConfig+0x1b8>)
 80031a0:	683a      	ldr	r2, [r7, #0]
 80031a2:	b2d2      	uxtb	r2, r2
 80031a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031a6:	4b63      	ldr	r3, [pc, #396]	@ (8003334 <HAL_RCC_ClockConfig+0x1b8>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0307 	and.w	r3, r3, #7
 80031ae:	683a      	ldr	r2, [r7, #0]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d001      	beq.n	80031b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e0b8      	b.n	800332a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0302 	and.w	r3, r3, #2
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d020      	beq.n	8003206 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0304 	and.w	r3, r3, #4
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d005      	beq.n	80031dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031d0:	4b59      	ldr	r3, [pc, #356]	@ (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	4a58      	ldr	r2, [pc, #352]	@ (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 80031d6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80031da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0308 	and.w	r3, r3, #8
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d005      	beq.n	80031f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031e8:	4b53      	ldr	r3, [pc, #332]	@ (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	4a52      	ldr	r2, [pc, #328]	@ (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 80031ee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80031f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031f4:	4b50      	ldr	r3, [pc, #320]	@ (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	494d      	ldr	r1, [pc, #308]	@ (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 8003202:	4313      	orrs	r3, r2
 8003204:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0301 	and.w	r3, r3, #1
 800320e:	2b00      	cmp	r3, #0
 8003210:	d044      	beq.n	800329c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	2b01      	cmp	r3, #1
 8003218:	d107      	bne.n	800322a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800321a:	4b47      	ldr	r3, [pc, #284]	@ (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d119      	bne.n	800325a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e07f      	b.n	800332a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	2b02      	cmp	r3, #2
 8003230:	d003      	beq.n	800323a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003236:	2b03      	cmp	r3, #3
 8003238:	d107      	bne.n	800324a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800323a:	4b3f      	ldr	r3, [pc, #252]	@ (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d109      	bne.n	800325a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e06f      	b.n	800332a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800324a:	4b3b      	ldr	r3, [pc, #236]	@ (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0302 	and.w	r3, r3, #2
 8003252:	2b00      	cmp	r3, #0
 8003254:	d101      	bne.n	800325a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e067      	b.n	800332a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800325a:	4b37      	ldr	r3, [pc, #220]	@ (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f023 0203 	bic.w	r2, r3, #3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	4934      	ldr	r1, [pc, #208]	@ (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 8003268:	4313      	orrs	r3, r2
 800326a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800326c:	f7fd ffe0 	bl	8001230 <HAL_GetTick>
 8003270:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003272:	e00a      	b.n	800328a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003274:	f7fd ffdc 	bl	8001230 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003282:	4293      	cmp	r3, r2
 8003284:	d901      	bls.n	800328a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e04f      	b.n	800332a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800328a:	4b2b      	ldr	r3, [pc, #172]	@ (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	f003 020c 	and.w	r2, r3, #12
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	429a      	cmp	r2, r3
 800329a:	d1eb      	bne.n	8003274 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800329c:	4b25      	ldr	r3, [pc, #148]	@ (8003334 <HAL_RCC_ClockConfig+0x1b8>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0307 	and.w	r3, r3, #7
 80032a4:	683a      	ldr	r2, [r7, #0]
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d20c      	bcs.n	80032c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032aa:	4b22      	ldr	r3, [pc, #136]	@ (8003334 <HAL_RCC_ClockConfig+0x1b8>)
 80032ac:	683a      	ldr	r2, [r7, #0]
 80032ae:	b2d2      	uxtb	r2, r2
 80032b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032b2:	4b20      	ldr	r3, [pc, #128]	@ (8003334 <HAL_RCC_ClockConfig+0x1b8>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0307 	and.w	r3, r3, #7
 80032ba:	683a      	ldr	r2, [r7, #0]
 80032bc:	429a      	cmp	r2, r3
 80032be:	d001      	beq.n	80032c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e032      	b.n	800332a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0304 	and.w	r3, r3, #4
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d008      	beq.n	80032e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032d0:	4b19      	ldr	r3, [pc, #100]	@ (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	4916      	ldr	r1, [pc, #88]	@ (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 80032de:	4313      	orrs	r3, r2
 80032e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0308 	and.w	r3, r3, #8
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d009      	beq.n	8003302 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032ee:	4b12      	ldr	r3, [pc, #72]	@ (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	00db      	lsls	r3, r3, #3
 80032fc:	490e      	ldr	r1, [pc, #56]	@ (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003302:	f000 f821 	bl	8003348 <HAL_RCC_GetSysClockFreq>
 8003306:	4602      	mov	r2, r0
 8003308:	4b0b      	ldr	r3, [pc, #44]	@ (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	091b      	lsrs	r3, r3, #4
 800330e:	f003 030f 	and.w	r3, r3, #15
 8003312:	490a      	ldr	r1, [pc, #40]	@ (800333c <HAL_RCC_ClockConfig+0x1c0>)
 8003314:	5ccb      	ldrb	r3, [r1, r3]
 8003316:	fa22 f303 	lsr.w	r3, r2, r3
 800331a:	4a09      	ldr	r2, [pc, #36]	@ (8003340 <HAL_RCC_ClockConfig+0x1c4>)
 800331c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800331e:	4b09      	ldr	r3, [pc, #36]	@ (8003344 <HAL_RCC_ClockConfig+0x1c8>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4618      	mov	r0, r3
 8003324:	f7fd ff40 	bl	80011a8 <HAL_InitTick>

  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3710      	adds	r7, #16
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	40023c00 	.word	0x40023c00
 8003338:	40023800 	.word	0x40023800
 800333c:	08004784 	.word	0x08004784
 8003340:	20000000 	.word	0x20000000
 8003344:	20000004 	.word	0x20000004

08003348 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003348:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800334c:	b094      	sub	sp, #80	@ 0x50
 800334e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003350:	2300      	movs	r3, #0
 8003352:	647b      	str	r3, [r7, #68]	@ 0x44
 8003354:	2300      	movs	r3, #0
 8003356:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003358:	2300      	movs	r3, #0
 800335a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800335c:	2300      	movs	r3, #0
 800335e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003360:	4b79      	ldr	r3, [pc, #484]	@ (8003548 <HAL_RCC_GetSysClockFreq+0x200>)
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f003 030c 	and.w	r3, r3, #12
 8003368:	2b08      	cmp	r3, #8
 800336a:	d00d      	beq.n	8003388 <HAL_RCC_GetSysClockFreq+0x40>
 800336c:	2b08      	cmp	r3, #8
 800336e:	f200 80e1 	bhi.w	8003534 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003372:	2b00      	cmp	r3, #0
 8003374:	d002      	beq.n	800337c <HAL_RCC_GetSysClockFreq+0x34>
 8003376:	2b04      	cmp	r3, #4
 8003378:	d003      	beq.n	8003382 <HAL_RCC_GetSysClockFreq+0x3a>
 800337a:	e0db      	b.n	8003534 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800337c:	4b73      	ldr	r3, [pc, #460]	@ (800354c <HAL_RCC_GetSysClockFreq+0x204>)
 800337e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003380:	e0db      	b.n	800353a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003382:	4b73      	ldr	r3, [pc, #460]	@ (8003550 <HAL_RCC_GetSysClockFreq+0x208>)
 8003384:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003386:	e0d8      	b.n	800353a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003388:	4b6f      	ldr	r3, [pc, #444]	@ (8003548 <HAL_RCC_GetSysClockFreq+0x200>)
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003390:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003392:	4b6d      	ldr	r3, [pc, #436]	@ (8003548 <HAL_RCC_GetSysClockFreq+0x200>)
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d063      	beq.n	8003466 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800339e:	4b6a      	ldr	r3, [pc, #424]	@ (8003548 <HAL_RCC_GetSysClockFreq+0x200>)
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	099b      	lsrs	r3, r3, #6
 80033a4:	2200      	movs	r2, #0
 80033a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80033a8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80033aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80033b2:	2300      	movs	r3, #0
 80033b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80033b6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80033ba:	4622      	mov	r2, r4
 80033bc:	462b      	mov	r3, r5
 80033be:	f04f 0000 	mov.w	r0, #0
 80033c2:	f04f 0100 	mov.w	r1, #0
 80033c6:	0159      	lsls	r1, r3, #5
 80033c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033cc:	0150      	lsls	r0, r2, #5
 80033ce:	4602      	mov	r2, r0
 80033d0:	460b      	mov	r3, r1
 80033d2:	4621      	mov	r1, r4
 80033d4:	1a51      	subs	r1, r2, r1
 80033d6:	6139      	str	r1, [r7, #16]
 80033d8:	4629      	mov	r1, r5
 80033da:	eb63 0301 	sbc.w	r3, r3, r1
 80033de:	617b      	str	r3, [r7, #20]
 80033e0:	f04f 0200 	mov.w	r2, #0
 80033e4:	f04f 0300 	mov.w	r3, #0
 80033e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80033ec:	4659      	mov	r1, fp
 80033ee:	018b      	lsls	r3, r1, #6
 80033f0:	4651      	mov	r1, sl
 80033f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80033f6:	4651      	mov	r1, sl
 80033f8:	018a      	lsls	r2, r1, #6
 80033fa:	4651      	mov	r1, sl
 80033fc:	ebb2 0801 	subs.w	r8, r2, r1
 8003400:	4659      	mov	r1, fp
 8003402:	eb63 0901 	sbc.w	r9, r3, r1
 8003406:	f04f 0200 	mov.w	r2, #0
 800340a:	f04f 0300 	mov.w	r3, #0
 800340e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003412:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003416:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800341a:	4690      	mov	r8, r2
 800341c:	4699      	mov	r9, r3
 800341e:	4623      	mov	r3, r4
 8003420:	eb18 0303 	adds.w	r3, r8, r3
 8003424:	60bb      	str	r3, [r7, #8]
 8003426:	462b      	mov	r3, r5
 8003428:	eb49 0303 	adc.w	r3, r9, r3
 800342c:	60fb      	str	r3, [r7, #12]
 800342e:	f04f 0200 	mov.w	r2, #0
 8003432:	f04f 0300 	mov.w	r3, #0
 8003436:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800343a:	4629      	mov	r1, r5
 800343c:	024b      	lsls	r3, r1, #9
 800343e:	4621      	mov	r1, r4
 8003440:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003444:	4621      	mov	r1, r4
 8003446:	024a      	lsls	r2, r1, #9
 8003448:	4610      	mov	r0, r2
 800344a:	4619      	mov	r1, r3
 800344c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800344e:	2200      	movs	r2, #0
 8003450:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003452:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003454:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003458:	f7fc ff0a 	bl	8000270 <__aeabi_uldivmod>
 800345c:	4602      	mov	r2, r0
 800345e:	460b      	mov	r3, r1
 8003460:	4613      	mov	r3, r2
 8003462:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003464:	e058      	b.n	8003518 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003466:	4b38      	ldr	r3, [pc, #224]	@ (8003548 <HAL_RCC_GetSysClockFreq+0x200>)
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	099b      	lsrs	r3, r3, #6
 800346c:	2200      	movs	r2, #0
 800346e:	4618      	mov	r0, r3
 8003470:	4611      	mov	r1, r2
 8003472:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003476:	623b      	str	r3, [r7, #32]
 8003478:	2300      	movs	r3, #0
 800347a:	627b      	str	r3, [r7, #36]	@ 0x24
 800347c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003480:	4642      	mov	r2, r8
 8003482:	464b      	mov	r3, r9
 8003484:	f04f 0000 	mov.w	r0, #0
 8003488:	f04f 0100 	mov.w	r1, #0
 800348c:	0159      	lsls	r1, r3, #5
 800348e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003492:	0150      	lsls	r0, r2, #5
 8003494:	4602      	mov	r2, r0
 8003496:	460b      	mov	r3, r1
 8003498:	4641      	mov	r1, r8
 800349a:	ebb2 0a01 	subs.w	sl, r2, r1
 800349e:	4649      	mov	r1, r9
 80034a0:	eb63 0b01 	sbc.w	fp, r3, r1
 80034a4:	f04f 0200 	mov.w	r2, #0
 80034a8:	f04f 0300 	mov.w	r3, #0
 80034ac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80034b0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80034b4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80034b8:	ebb2 040a 	subs.w	r4, r2, sl
 80034bc:	eb63 050b 	sbc.w	r5, r3, fp
 80034c0:	f04f 0200 	mov.w	r2, #0
 80034c4:	f04f 0300 	mov.w	r3, #0
 80034c8:	00eb      	lsls	r3, r5, #3
 80034ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034ce:	00e2      	lsls	r2, r4, #3
 80034d0:	4614      	mov	r4, r2
 80034d2:	461d      	mov	r5, r3
 80034d4:	4643      	mov	r3, r8
 80034d6:	18e3      	adds	r3, r4, r3
 80034d8:	603b      	str	r3, [r7, #0]
 80034da:	464b      	mov	r3, r9
 80034dc:	eb45 0303 	adc.w	r3, r5, r3
 80034e0:	607b      	str	r3, [r7, #4]
 80034e2:	f04f 0200 	mov.w	r2, #0
 80034e6:	f04f 0300 	mov.w	r3, #0
 80034ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80034ee:	4629      	mov	r1, r5
 80034f0:	028b      	lsls	r3, r1, #10
 80034f2:	4621      	mov	r1, r4
 80034f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80034f8:	4621      	mov	r1, r4
 80034fa:	028a      	lsls	r2, r1, #10
 80034fc:	4610      	mov	r0, r2
 80034fe:	4619      	mov	r1, r3
 8003500:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003502:	2200      	movs	r2, #0
 8003504:	61bb      	str	r3, [r7, #24]
 8003506:	61fa      	str	r2, [r7, #28]
 8003508:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800350c:	f7fc feb0 	bl	8000270 <__aeabi_uldivmod>
 8003510:	4602      	mov	r2, r0
 8003512:	460b      	mov	r3, r1
 8003514:	4613      	mov	r3, r2
 8003516:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003518:	4b0b      	ldr	r3, [pc, #44]	@ (8003548 <HAL_RCC_GetSysClockFreq+0x200>)
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	0c1b      	lsrs	r3, r3, #16
 800351e:	f003 0303 	and.w	r3, r3, #3
 8003522:	3301      	adds	r3, #1
 8003524:	005b      	lsls	r3, r3, #1
 8003526:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003528:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800352a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800352c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003530:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003532:	e002      	b.n	800353a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003534:	4b05      	ldr	r3, [pc, #20]	@ (800354c <HAL_RCC_GetSysClockFreq+0x204>)
 8003536:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003538:	bf00      	nop
    }
  }
  return sysclockfreq;
 800353a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800353c:	4618      	mov	r0, r3
 800353e:	3750      	adds	r7, #80	@ 0x50
 8003540:	46bd      	mov	sp, r7
 8003542:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003546:	bf00      	nop
 8003548:	40023800 	.word	0x40023800
 800354c:	00f42400 	.word	0x00f42400
 8003550:	007a1200 	.word	0x007a1200

08003554 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003554:	b480      	push	{r7}
 8003556:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003558:	4b03      	ldr	r3, [pc, #12]	@ (8003568 <HAL_RCC_GetHCLKFreq+0x14>)
 800355a:	681b      	ldr	r3, [r3, #0]
}
 800355c:	4618      	mov	r0, r3
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop
 8003568:	20000000 	.word	0x20000000

0800356c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003570:	f7ff fff0 	bl	8003554 <HAL_RCC_GetHCLKFreq>
 8003574:	4602      	mov	r2, r0
 8003576:	4b05      	ldr	r3, [pc, #20]	@ (800358c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	0a9b      	lsrs	r3, r3, #10
 800357c:	f003 0307 	and.w	r3, r3, #7
 8003580:	4903      	ldr	r1, [pc, #12]	@ (8003590 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003582:	5ccb      	ldrb	r3, [r1, r3]
 8003584:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003588:	4618      	mov	r0, r3
 800358a:	bd80      	pop	{r7, pc}
 800358c:	40023800 	.word	0x40023800
 8003590:	08004794 	.word	0x08004794

08003594 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d101      	bne.n	80035a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e041      	b.n	800362a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d106      	bne.n	80035c0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f7fd fcca 	bl	8000f54 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2202      	movs	r2, #2
 80035c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	3304      	adds	r3, #4
 80035d0:	4619      	mov	r1, r3
 80035d2:	4610      	mov	r0, r2
 80035d4:	f000 f8f0 	bl	80037b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3708      	adds	r7, #8
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
	...

08003634 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b086      	sub	sp, #24
 8003638:	af00      	add	r7, sp, #0
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	60b9      	str	r1, [r7, #8]
 800363e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003640:	2300      	movs	r3, #0
 8003642:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800364a:	2b01      	cmp	r3, #1
 800364c:	d101      	bne.n	8003652 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800364e:	2302      	movs	r3, #2
 8003650:	e0ae      	b.n	80037b0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2201      	movs	r2, #1
 8003656:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2b0c      	cmp	r3, #12
 800365e:	f200 809f 	bhi.w	80037a0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003662:	a201      	add	r2, pc, #4	@ (adr r2, 8003668 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003668:	0800369d 	.word	0x0800369d
 800366c:	080037a1 	.word	0x080037a1
 8003670:	080037a1 	.word	0x080037a1
 8003674:	080037a1 	.word	0x080037a1
 8003678:	080036dd 	.word	0x080036dd
 800367c:	080037a1 	.word	0x080037a1
 8003680:	080037a1 	.word	0x080037a1
 8003684:	080037a1 	.word	0x080037a1
 8003688:	0800371f 	.word	0x0800371f
 800368c:	080037a1 	.word	0x080037a1
 8003690:	080037a1 	.word	0x080037a1
 8003694:	080037a1 	.word	0x080037a1
 8003698:	0800375f 	.word	0x0800375f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	68b9      	ldr	r1, [r7, #8]
 80036a2:	4618      	mov	r0, r3
 80036a4:	f000 f934 	bl	8003910 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	699a      	ldr	r2, [r3, #24]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f042 0208 	orr.w	r2, r2, #8
 80036b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	699a      	ldr	r2, [r3, #24]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f022 0204 	bic.w	r2, r2, #4
 80036c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	6999      	ldr	r1, [r3, #24]
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	691a      	ldr	r2, [r3, #16]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	430a      	orrs	r2, r1
 80036d8:	619a      	str	r2, [r3, #24]
      break;
 80036da:	e064      	b.n	80037a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	68b9      	ldr	r1, [r7, #8]
 80036e2:	4618      	mov	r0, r3
 80036e4:	f000 f984 	bl	80039f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	699a      	ldr	r2, [r3, #24]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80036f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	699a      	ldr	r2, [r3, #24]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003706:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	6999      	ldr	r1, [r3, #24]
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	021a      	lsls	r2, r3, #8
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	430a      	orrs	r2, r1
 800371a:	619a      	str	r2, [r3, #24]
      break;
 800371c:	e043      	b.n	80037a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	68b9      	ldr	r1, [r7, #8]
 8003724:	4618      	mov	r0, r3
 8003726:	f000 f9d9 	bl	8003adc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	69da      	ldr	r2, [r3, #28]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f042 0208 	orr.w	r2, r2, #8
 8003738:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	69da      	ldr	r2, [r3, #28]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f022 0204 	bic.w	r2, r2, #4
 8003748:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	69d9      	ldr	r1, [r3, #28]
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	691a      	ldr	r2, [r3, #16]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	430a      	orrs	r2, r1
 800375a:	61da      	str	r2, [r3, #28]
      break;
 800375c:	e023      	b.n	80037a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	68b9      	ldr	r1, [r7, #8]
 8003764:	4618      	mov	r0, r3
 8003766:	f000 fa2d 	bl	8003bc4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	69da      	ldr	r2, [r3, #28]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003778:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	69da      	ldr	r2, [r3, #28]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003788:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	69d9      	ldr	r1, [r3, #28]
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	691b      	ldr	r3, [r3, #16]
 8003794:	021a      	lsls	r2, r3, #8
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	430a      	orrs	r2, r1
 800379c:	61da      	str	r2, [r3, #28]
      break;
 800379e:	e002      	b.n	80037a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	75fb      	strb	r3, [r7, #23]
      break;
 80037a4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80037ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3718      	adds	r7, #24
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}

080037b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b085      	sub	sp, #20
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	4a46      	ldr	r2, [pc, #280]	@ (80038e4 <TIM_Base_SetConfig+0x12c>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d013      	beq.n	80037f8 <TIM_Base_SetConfig+0x40>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037d6:	d00f      	beq.n	80037f8 <TIM_Base_SetConfig+0x40>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	4a43      	ldr	r2, [pc, #268]	@ (80038e8 <TIM_Base_SetConfig+0x130>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d00b      	beq.n	80037f8 <TIM_Base_SetConfig+0x40>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	4a42      	ldr	r2, [pc, #264]	@ (80038ec <TIM_Base_SetConfig+0x134>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d007      	beq.n	80037f8 <TIM_Base_SetConfig+0x40>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4a41      	ldr	r2, [pc, #260]	@ (80038f0 <TIM_Base_SetConfig+0x138>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d003      	beq.n	80037f8 <TIM_Base_SetConfig+0x40>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	4a40      	ldr	r2, [pc, #256]	@ (80038f4 <TIM_Base_SetConfig+0x13c>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d108      	bne.n	800380a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	68fa      	ldr	r2, [r7, #12]
 8003806:	4313      	orrs	r3, r2
 8003808:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4a35      	ldr	r2, [pc, #212]	@ (80038e4 <TIM_Base_SetConfig+0x12c>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d02b      	beq.n	800386a <TIM_Base_SetConfig+0xb2>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003818:	d027      	beq.n	800386a <TIM_Base_SetConfig+0xb2>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a32      	ldr	r2, [pc, #200]	@ (80038e8 <TIM_Base_SetConfig+0x130>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d023      	beq.n	800386a <TIM_Base_SetConfig+0xb2>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a31      	ldr	r2, [pc, #196]	@ (80038ec <TIM_Base_SetConfig+0x134>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d01f      	beq.n	800386a <TIM_Base_SetConfig+0xb2>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a30      	ldr	r2, [pc, #192]	@ (80038f0 <TIM_Base_SetConfig+0x138>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d01b      	beq.n	800386a <TIM_Base_SetConfig+0xb2>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a2f      	ldr	r2, [pc, #188]	@ (80038f4 <TIM_Base_SetConfig+0x13c>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d017      	beq.n	800386a <TIM_Base_SetConfig+0xb2>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a2e      	ldr	r2, [pc, #184]	@ (80038f8 <TIM_Base_SetConfig+0x140>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d013      	beq.n	800386a <TIM_Base_SetConfig+0xb2>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a2d      	ldr	r2, [pc, #180]	@ (80038fc <TIM_Base_SetConfig+0x144>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d00f      	beq.n	800386a <TIM_Base_SetConfig+0xb2>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a2c      	ldr	r2, [pc, #176]	@ (8003900 <TIM_Base_SetConfig+0x148>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d00b      	beq.n	800386a <TIM_Base_SetConfig+0xb2>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a2b      	ldr	r2, [pc, #172]	@ (8003904 <TIM_Base_SetConfig+0x14c>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d007      	beq.n	800386a <TIM_Base_SetConfig+0xb2>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a2a      	ldr	r2, [pc, #168]	@ (8003908 <TIM_Base_SetConfig+0x150>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d003      	beq.n	800386a <TIM_Base_SetConfig+0xb2>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a29      	ldr	r2, [pc, #164]	@ (800390c <TIM_Base_SetConfig+0x154>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d108      	bne.n	800387c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003870:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	68fa      	ldr	r2, [r7, #12]
 8003878:	4313      	orrs	r3, r2
 800387a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	695b      	ldr	r3, [r3, #20]
 8003886:	4313      	orrs	r3, r2
 8003888:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	68fa      	ldr	r2, [r7, #12]
 800388e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	689a      	ldr	r2, [r3, #8]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4a10      	ldr	r2, [pc, #64]	@ (80038e4 <TIM_Base_SetConfig+0x12c>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d003      	beq.n	80038b0 <TIM_Base_SetConfig+0xf8>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4a12      	ldr	r2, [pc, #72]	@ (80038f4 <TIM_Base_SetConfig+0x13c>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d103      	bne.n	80038b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	691a      	ldr	r2, [r3, #16]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	691b      	ldr	r3, [r3, #16]
 80038c2:	f003 0301 	and.w	r3, r3, #1
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d105      	bne.n	80038d6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	691b      	ldr	r3, [r3, #16]
 80038ce:	f023 0201 	bic.w	r2, r3, #1
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	611a      	str	r2, [r3, #16]
  }
}
 80038d6:	bf00      	nop
 80038d8:	3714      	adds	r7, #20
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr
 80038e2:	bf00      	nop
 80038e4:	40010000 	.word	0x40010000
 80038e8:	40000400 	.word	0x40000400
 80038ec:	40000800 	.word	0x40000800
 80038f0:	40000c00 	.word	0x40000c00
 80038f4:	40010400 	.word	0x40010400
 80038f8:	40014000 	.word	0x40014000
 80038fc:	40014400 	.word	0x40014400
 8003900:	40014800 	.word	0x40014800
 8003904:	40001800 	.word	0x40001800
 8003908:	40001c00 	.word	0x40001c00
 800390c:	40002000 	.word	0x40002000

08003910 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003910:	b480      	push	{r7}
 8003912:	b087      	sub	sp, #28
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6a1b      	ldr	r3, [r3, #32]
 800391e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a1b      	ldr	r3, [r3, #32]
 8003924:	f023 0201 	bic.w	r2, r3, #1
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	699b      	ldr	r3, [r3, #24]
 8003936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800393e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f023 0303 	bic.w	r3, r3, #3
 8003946:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68fa      	ldr	r2, [r7, #12]
 800394e:	4313      	orrs	r3, r2
 8003950:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	f023 0302 	bic.w	r3, r3, #2
 8003958:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	697a      	ldr	r2, [r7, #20]
 8003960:	4313      	orrs	r3, r2
 8003962:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	4a20      	ldr	r2, [pc, #128]	@ (80039e8 <TIM_OC1_SetConfig+0xd8>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d003      	beq.n	8003974 <TIM_OC1_SetConfig+0x64>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	4a1f      	ldr	r2, [pc, #124]	@ (80039ec <TIM_OC1_SetConfig+0xdc>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d10c      	bne.n	800398e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	f023 0308 	bic.w	r3, r3, #8
 800397a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	697a      	ldr	r2, [r7, #20]
 8003982:	4313      	orrs	r3, r2
 8003984:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	f023 0304 	bic.w	r3, r3, #4
 800398c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4a15      	ldr	r2, [pc, #84]	@ (80039e8 <TIM_OC1_SetConfig+0xd8>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d003      	beq.n	800399e <TIM_OC1_SetConfig+0x8e>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a14      	ldr	r2, [pc, #80]	@ (80039ec <TIM_OC1_SetConfig+0xdc>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d111      	bne.n	80039c2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80039a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80039ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	695b      	ldr	r3, [r3, #20]
 80039b2:	693a      	ldr	r2, [r7, #16]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	699b      	ldr	r3, [r3, #24]
 80039bc:	693a      	ldr	r2, [r7, #16]
 80039be:	4313      	orrs	r3, r2
 80039c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	693a      	ldr	r2, [r7, #16]
 80039c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	68fa      	ldr	r2, [r7, #12]
 80039cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	685a      	ldr	r2, [r3, #4]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	697a      	ldr	r2, [r7, #20]
 80039da:	621a      	str	r2, [r3, #32]
}
 80039dc:	bf00      	nop
 80039de:	371c      	adds	r7, #28
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr
 80039e8:	40010000 	.word	0x40010000
 80039ec:	40010400 	.word	0x40010400

080039f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b087      	sub	sp, #28
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a1b      	ldr	r3, [r3, #32]
 80039fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6a1b      	ldr	r3, [r3, #32]
 8003a04:	f023 0210 	bic.w	r2, r3, #16
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	699b      	ldr	r3, [r3, #24]
 8003a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	021b      	lsls	r3, r3, #8
 8003a2e:	68fa      	ldr	r2, [r7, #12]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	f023 0320 	bic.w	r3, r3, #32
 8003a3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	011b      	lsls	r3, r3, #4
 8003a42:	697a      	ldr	r2, [r7, #20]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4a22      	ldr	r2, [pc, #136]	@ (8003ad4 <TIM_OC2_SetConfig+0xe4>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d003      	beq.n	8003a58 <TIM_OC2_SetConfig+0x68>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a21      	ldr	r2, [pc, #132]	@ (8003ad8 <TIM_OC2_SetConfig+0xe8>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d10d      	bne.n	8003a74 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	011b      	lsls	r3, r3, #4
 8003a66:	697a      	ldr	r2, [r7, #20]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a72:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	4a17      	ldr	r2, [pc, #92]	@ (8003ad4 <TIM_OC2_SetConfig+0xe4>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d003      	beq.n	8003a84 <TIM_OC2_SetConfig+0x94>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	4a16      	ldr	r2, [pc, #88]	@ (8003ad8 <TIM_OC2_SetConfig+0xe8>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d113      	bne.n	8003aac <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003a8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003a92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	695b      	ldr	r3, [r3, #20]
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	693a      	ldr	r2, [r7, #16]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	699b      	ldr	r3, [r3, #24]
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	693a      	ldr	r2, [r7, #16]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	693a      	ldr	r2, [r7, #16]
 8003ab0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	685a      	ldr	r2, [r3, #4]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	697a      	ldr	r2, [r7, #20]
 8003ac4:	621a      	str	r2, [r3, #32]
}
 8003ac6:	bf00      	nop
 8003ac8:	371c      	adds	r7, #28
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr
 8003ad2:	bf00      	nop
 8003ad4:	40010000 	.word	0x40010000
 8003ad8:	40010400 	.word	0x40010400

08003adc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b087      	sub	sp, #28
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a1b      	ldr	r3, [r3, #32]
 8003aea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6a1b      	ldr	r3, [r3, #32]
 8003af0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	69db      	ldr	r3, [r3, #28]
 8003b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f023 0303 	bic.w	r3, r3, #3
 8003b12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	68fa      	ldr	r2, [r7, #12]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003b24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	021b      	lsls	r3, r3, #8
 8003b2c:	697a      	ldr	r2, [r7, #20]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a21      	ldr	r2, [pc, #132]	@ (8003bbc <TIM_OC3_SetConfig+0xe0>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d003      	beq.n	8003b42 <TIM_OC3_SetConfig+0x66>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a20      	ldr	r2, [pc, #128]	@ (8003bc0 <TIM_OC3_SetConfig+0xe4>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d10d      	bne.n	8003b5e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003b48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	021b      	lsls	r3, r3, #8
 8003b50:	697a      	ldr	r2, [r7, #20]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003b5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a16      	ldr	r2, [pc, #88]	@ (8003bbc <TIM_OC3_SetConfig+0xe0>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d003      	beq.n	8003b6e <TIM_OC3_SetConfig+0x92>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a15      	ldr	r2, [pc, #84]	@ (8003bc0 <TIM_OC3_SetConfig+0xe4>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d113      	bne.n	8003b96 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003b74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003b7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	695b      	ldr	r3, [r3, #20]
 8003b82:	011b      	lsls	r3, r3, #4
 8003b84:	693a      	ldr	r2, [r7, #16]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	699b      	ldr	r3, [r3, #24]
 8003b8e:	011b      	lsls	r3, r3, #4
 8003b90:	693a      	ldr	r2, [r7, #16]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	693a      	ldr	r2, [r7, #16]
 8003b9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	68fa      	ldr	r2, [r7, #12]
 8003ba0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	685a      	ldr	r2, [r3, #4]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	697a      	ldr	r2, [r7, #20]
 8003bae:	621a      	str	r2, [r3, #32]
}
 8003bb0:	bf00      	nop
 8003bb2:	371c      	adds	r7, #28
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr
 8003bbc:	40010000 	.word	0x40010000
 8003bc0:	40010400 	.word	0x40010400

08003bc4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b087      	sub	sp, #28
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6a1b      	ldr	r3, [r3, #32]
 8003bd2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6a1b      	ldr	r3, [r3, #32]
 8003bd8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	69db      	ldr	r3, [r3, #28]
 8003bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003bf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bfa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	021b      	lsls	r3, r3, #8
 8003c02:	68fa      	ldr	r2, [r7, #12]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003c0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	031b      	lsls	r3, r3, #12
 8003c16:	693a      	ldr	r2, [r7, #16]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	4a12      	ldr	r2, [pc, #72]	@ (8003c68 <TIM_OC4_SetConfig+0xa4>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d003      	beq.n	8003c2c <TIM_OC4_SetConfig+0x68>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	4a11      	ldr	r2, [pc, #68]	@ (8003c6c <TIM_OC4_SetConfig+0xa8>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d109      	bne.n	8003c40 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003c32:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	695b      	ldr	r3, [r3, #20]
 8003c38:	019b      	lsls	r3, r3, #6
 8003c3a:	697a      	ldr	r2, [r7, #20]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	697a      	ldr	r2, [r7, #20]
 8003c44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	68fa      	ldr	r2, [r7, #12]
 8003c4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	685a      	ldr	r2, [r3, #4]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	693a      	ldr	r2, [r7, #16]
 8003c58:	621a      	str	r2, [r3, #32]
}
 8003c5a:	bf00      	nop
 8003c5c:	371c      	adds	r7, #28
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
 8003c66:	bf00      	nop
 8003c68:	40010000 	.word	0x40010000
 8003c6c:	40010400 	.word	0x40010400

08003c70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b085      	sub	sp, #20
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d101      	bne.n	8003c88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c84:	2302      	movs	r3, #2
 8003c86:	e05a      	b.n	8003d3e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2202      	movs	r2, #2
 8003c94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	68fa      	ldr	r2, [r7, #12]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a21      	ldr	r2, [pc, #132]	@ (8003d4c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d022      	beq.n	8003d12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cd4:	d01d      	beq.n	8003d12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a1d      	ldr	r2, [pc, #116]	@ (8003d50 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d018      	beq.n	8003d12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a1b      	ldr	r2, [pc, #108]	@ (8003d54 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d013      	beq.n	8003d12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a1a      	ldr	r2, [pc, #104]	@ (8003d58 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d00e      	beq.n	8003d12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a18      	ldr	r2, [pc, #96]	@ (8003d5c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d009      	beq.n	8003d12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a17      	ldr	r2, [pc, #92]	@ (8003d60 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d004      	beq.n	8003d12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a15      	ldr	r2, [pc, #84]	@ (8003d64 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d10c      	bne.n	8003d2c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	68ba      	ldr	r2, [r7, #8]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	68ba      	ldr	r2, [r7, #8]
 8003d2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003d3c:	2300      	movs	r3, #0
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3714      	adds	r7, #20
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr
 8003d4a:	bf00      	nop
 8003d4c:	40010000 	.word	0x40010000
 8003d50:	40000400 	.word	0x40000400
 8003d54:	40000800 	.word	0x40000800
 8003d58:	40000c00 	.word	0x40000c00
 8003d5c:	40010400 	.word	0x40010400
 8003d60:	40014000 	.word	0x40014000
 8003d64:	40001800 	.word	0x40001800

08003d68 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b085      	sub	sp, #20
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003d72:	2300      	movs	r3, #0
 8003d74:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d101      	bne.n	8003d84 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003d80:	2302      	movs	r3, #2
 8003d82:	e03d      	b.n	8003e00 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	691b      	ldr	r3, [r3, #16]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	695b      	ldr	r3, [r3, #20]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	69db      	ldr	r3, [r3, #28]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	68fa      	ldr	r2, [r7, #12]
 8003df4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003dfe:	2300      	movs	r3, #0
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3714      	adds	r7, #20
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr

08003e0c <siprintf>:
 8003e0c:	b40e      	push	{r1, r2, r3}
 8003e0e:	b500      	push	{lr}
 8003e10:	b09c      	sub	sp, #112	@ 0x70
 8003e12:	ab1d      	add	r3, sp, #116	@ 0x74
 8003e14:	9002      	str	r0, [sp, #8]
 8003e16:	9006      	str	r0, [sp, #24]
 8003e18:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003e1c:	4809      	ldr	r0, [pc, #36]	@ (8003e44 <siprintf+0x38>)
 8003e1e:	9107      	str	r1, [sp, #28]
 8003e20:	9104      	str	r1, [sp, #16]
 8003e22:	4909      	ldr	r1, [pc, #36]	@ (8003e48 <siprintf+0x3c>)
 8003e24:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e28:	9105      	str	r1, [sp, #20]
 8003e2a:	6800      	ldr	r0, [r0, #0]
 8003e2c:	9301      	str	r3, [sp, #4]
 8003e2e:	a902      	add	r1, sp, #8
 8003e30:	f000 f994 	bl	800415c <_svfiprintf_r>
 8003e34:	9b02      	ldr	r3, [sp, #8]
 8003e36:	2200      	movs	r2, #0
 8003e38:	701a      	strb	r2, [r3, #0]
 8003e3a:	b01c      	add	sp, #112	@ 0x70
 8003e3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003e40:	b003      	add	sp, #12
 8003e42:	4770      	bx	lr
 8003e44:	2000000c 	.word	0x2000000c
 8003e48:	ffff0208 	.word	0xffff0208

08003e4c <memset>:
 8003e4c:	4402      	add	r2, r0
 8003e4e:	4603      	mov	r3, r0
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d100      	bne.n	8003e56 <memset+0xa>
 8003e54:	4770      	bx	lr
 8003e56:	f803 1b01 	strb.w	r1, [r3], #1
 8003e5a:	e7f9      	b.n	8003e50 <memset+0x4>

08003e5c <__errno>:
 8003e5c:	4b01      	ldr	r3, [pc, #4]	@ (8003e64 <__errno+0x8>)
 8003e5e:	6818      	ldr	r0, [r3, #0]
 8003e60:	4770      	bx	lr
 8003e62:	bf00      	nop
 8003e64:	2000000c 	.word	0x2000000c

08003e68 <__libc_init_array>:
 8003e68:	b570      	push	{r4, r5, r6, lr}
 8003e6a:	4d0d      	ldr	r5, [pc, #52]	@ (8003ea0 <__libc_init_array+0x38>)
 8003e6c:	4c0d      	ldr	r4, [pc, #52]	@ (8003ea4 <__libc_init_array+0x3c>)
 8003e6e:	1b64      	subs	r4, r4, r5
 8003e70:	10a4      	asrs	r4, r4, #2
 8003e72:	2600      	movs	r6, #0
 8003e74:	42a6      	cmp	r6, r4
 8003e76:	d109      	bne.n	8003e8c <__libc_init_array+0x24>
 8003e78:	4d0b      	ldr	r5, [pc, #44]	@ (8003ea8 <__libc_init_array+0x40>)
 8003e7a:	4c0c      	ldr	r4, [pc, #48]	@ (8003eac <__libc_init_array+0x44>)
 8003e7c:	f000 fc66 	bl	800474c <_init>
 8003e80:	1b64      	subs	r4, r4, r5
 8003e82:	10a4      	asrs	r4, r4, #2
 8003e84:	2600      	movs	r6, #0
 8003e86:	42a6      	cmp	r6, r4
 8003e88:	d105      	bne.n	8003e96 <__libc_init_array+0x2e>
 8003e8a:	bd70      	pop	{r4, r5, r6, pc}
 8003e8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e90:	4798      	blx	r3
 8003e92:	3601      	adds	r6, #1
 8003e94:	e7ee      	b.n	8003e74 <__libc_init_array+0xc>
 8003e96:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e9a:	4798      	blx	r3
 8003e9c:	3601      	adds	r6, #1
 8003e9e:	e7f2      	b.n	8003e86 <__libc_init_array+0x1e>
 8003ea0:	080047d8 	.word	0x080047d8
 8003ea4:	080047d8 	.word	0x080047d8
 8003ea8:	080047d8 	.word	0x080047d8
 8003eac:	080047dc 	.word	0x080047dc

08003eb0 <__retarget_lock_acquire_recursive>:
 8003eb0:	4770      	bx	lr

08003eb2 <__retarget_lock_release_recursive>:
 8003eb2:	4770      	bx	lr

08003eb4 <_free_r>:
 8003eb4:	b538      	push	{r3, r4, r5, lr}
 8003eb6:	4605      	mov	r5, r0
 8003eb8:	2900      	cmp	r1, #0
 8003eba:	d041      	beq.n	8003f40 <_free_r+0x8c>
 8003ebc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ec0:	1f0c      	subs	r4, r1, #4
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	bfb8      	it	lt
 8003ec6:	18e4      	addlt	r4, r4, r3
 8003ec8:	f000 f8e0 	bl	800408c <__malloc_lock>
 8003ecc:	4a1d      	ldr	r2, [pc, #116]	@ (8003f44 <_free_r+0x90>)
 8003ece:	6813      	ldr	r3, [r2, #0]
 8003ed0:	b933      	cbnz	r3, 8003ee0 <_free_r+0x2c>
 8003ed2:	6063      	str	r3, [r4, #4]
 8003ed4:	6014      	str	r4, [r2, #0]
 8003ed6:	4628      	mov	r0, r5
 8003ed8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003edc:	f000 b8dc 	b.w	8004098 <__malloc_unlock>
 8003ee0:	42a3      	cmp	r3, r4
 8003ee2:	d908      	bls.n	8003ef6 <_free_r+0x42>
 8003ee4:	6820      	ldr	r0, [r4, #0]
 8003ee6:	1821      	adds	r1, r4, r0
 8003ee8:	428b      	cmp	r3, r1
 8003eea:	bf01      	itttt	eq
 8003eec:	6819      	ldreq	r1, [r3, #0]
 8003eee:	685b      	ldreq	r3, [r3, #4]
 8003ef0:	1809      	addeq	r1, r1, r0
 8003ef2:	6021      	streq	r1, [r4, #0]
 8003ef4:	e7ed      	b.n	8003ed2 <_free_r+0x1e>
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	b10b      	cbz	r3, 8003f00 <_free_r+0x4c>
 8003efc:	42a3      	cmp	r3, r4
 8003efe:	d9fa      	bls.n	8003ef6 <_free_r+0x42>
 8003f00:	6811      	ldr	r1, [r2, #0]
 8003f02:	1850      	adds	r0, r2, r1
 8003f04:	42a0      	cmp	r0, r4
 8003f06:	d10b      	bne.n	8003f20 <_free_r+0x6c>
 8003f08:	6820      	ldr	r0, [r4, #0]
 8003f0a:	4401      	add	r1, r0
 8003f0c:	1850      	adds	r0, r2, r1
 8003f0e:	4283      	cmp	r3, r0
 8003f10:	6011      	str	r1, [r2, #0]
 8003f12:	d1e0      	bne.n	8003ed6 <_free_r+0x22>
 8003f14:	6818      	ldr	r0, [r3, #0]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	6053      	str	r3, [r2, #4]
 8003f1a:	4408      	add	r0, r1
 8003f1c:	6010      	str	r0, [r2, #0]
 8003f1e:	e7da      	b.n	8003ed6 <_free_r+0x22>
 8003f20:	d902      	bls.n	8003f28 <_free_r+0x74>
 8003f22:	230c      	movs	r3, #12
 8003f24:	602b      	str	r3, [r5, #0]
 8003f26:	e7d6      	b.n	8003ed6 <_free_r+0x22>
 8003f28:	6820      	ldr	r0, [r4, #0]
 8003f2a:	1821      	adds	r1, r4, r0
 8003f2c:	428b      	cmp	r3, r1
 8003f2e:	bf04      	itt	eq
 8003f30:	6819      	ldreq	r1, [r3, #0]
 8003f32:	685b      	ldreq	r3, [r3, #4]
 8003f34:	6063      	str	r3, [r4, #4]
 8003f36:	bf04      	itt	eq
 8003f38:	1809      	addeq	r1, r1, r0
 8003f3a:	6021      	streq	r1, [r4, #0]
 8003f3c:	6054      	str	r4, [r2, #4]
 8003f3e:	e7ca      	b.n	8003ed6 <_free_r+0x22>
 8003f40:	bd38      	pop	{r3, r4, r5, pc}
 8003f42:	bf00      	nop
 8003f44:	200002c0 	.word	0x200002c0

08003f48 <sbrk_aligned>:
 8003f48:	b570      	push	{r4, r5, r6, lr}
 8003f4a:	4e0f      	ldr	r6, [pc, #60]	@ (8003f88 <sbrk_aligned+0x40>)
 8003f4c:	460c      	mov	r4, r1
 8003f4e:	6831      	ldr	r1, [r6, #0]
 8003f50:	4605      	mov	r5, r0
 8003f52:	b911      	cbnz	r1, 8003f5a <sbrk_aligned+0x12>
 8003f54:	f000 fba6 	bl	80046a4 <_sbrk_r>
 8003f58:	6030      	str	r0, [r6, #0]
 8003f5a:	4621      	mov	r1, r4
 8003f5c:	4628      	mov	r0, r5
 8003f5e:	f000 fba1 	bl	80046a4 <_sbrk_r>
 8003f62:	1c43      	adds	r3, r0, #1
 8003f64:	d103      	bne.n	8003f6e <sbrk_aligned+0x26>
 8003f66:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8003f6a:	4620      	mov	r0, r4
 8003f6c:	bd70      	pop	{r4, r5, r6, pc}
 8003f6e:	1cc4      	adds	r4, r0, #3
 8003f70:	f024 0403 	bic.w	r4, r4, #3
 8003f74:	42a0      	cmp	r0, r4
 8003f76:	d0f8      	beq.n	8003f6a <sbrk_aligned+0x22>
 8003f78:	1a21      	subs	r1, r4, r0
 8003f7a:	4628      	mov	r0, r5
 8003f7c:	f000 fb92 	bl	80046a4 <_sbrk_r>
 8003f80:	3001      	adds	r0, #1
 8003f82:	d1f2      	bne.n	8003f6a <sbrk_aligned+0x22>
 8003f84:	e7ef      	b.n	8003f66 <sbrk_aligned+0x1e>
 8003f86:	bf00      	nop
 8003f88:	200002bc 	.word	0x200002bc

08003f8c <_malloc_r>:
 8003f8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f90:	1ccd      	adds	r5, r1, #3
 8003f92:	f025 0503 	bic.w	r5, r5, #3
 8003f96:	3508      	adds	r5, #8
 8003f98:	2d0c      	cmp	r5, #12
 8003f9a:	bf38      	it	cc
 8003f9c:	250c      	movcc	r5, #12
 8003f9e:	2d00      	cmp	r5, #0
 8003fa0:	4606      	mov	r6, r0
 8003fa2:	db01      	blt.n	8003fa8 <_malloc_r+0x1c>
 8003fa4:	42a9      	cmp	r1, r5
 8003fa6:	d904      	bls.n	8003fb2 <_malloc_r+0x26>
 8003fa8:	230c      	movs	r3, #12
 8003faa:	6033      	str	r3, [r6, #0]
 8003fac:	2000      	movs	r0, #0
 8003fae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003fb2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004088 <_malloc_r+0xfc>
 8003fb6:	f000 f869 	bl	800408c <__malloc_lock>
 8003fba:	f8d8 3000 	ldr.w	r3, [r8]
 8003fbe:	461c      	mov	r4, r3
 8003fc0:	bb44      	cbnz	r4, 8004014 <_malloc_r+0x88>
 8003fc2:	4629      	mov	r1, r5
 8003fc4:	4630      	mov	r0, r6
 8003fc6:	f7ff ffbf 	bl	8003f48 <sbrk_aligned>
 8003fca:	1c43      	adds	r3, r0, #1
 8003fcc:	4604      	mov	r4, r0
 8003fce:	d158      	bne.n	8004082 <_malloc_r+0xf6>
 8003fd0:	f8d8 4000 	ldr.w	r4, [r8]
 8003fd4:	4627      	mov	r7, r4
 8003fd6:	2f00      	cmp	r7, #0
 8003fd8:	d143      	bne.n	8004062 <_malloc_r+0xd6>
 8003fda:	2c00      	cmp	r4, #0
 8003fdc:	d04b      	beq.n	8004076 <_malloc_r+0xea>
 8003fde:	6823      	ldr	r3, [r4, #0]
 8003fe0:	4639      	mov	r1, r7
 8003fe2:	4630      	mov	r0, r6
 8003fe4:	eb04 0903 	add.w	r9, r4, r3
 8003fe8:	f000 fb5c 	bl	80046a4 <_sbrk_r>
 8003fec:	4581      	cmp	r9, r0
 8003fee:	d142      	bne.n	8004076 <_malloc_r+0xea>
 8003ff0:	6821      	ldr	r1, [r4, #0]
 8003ff2:	1a6d      	subs	r5, r5, r1
 8003ff4:	4629      	mov	r1, r5
 8003ff6:	4630      	mov	r0, r6
 8003ff8:	f7ff ffa6 	bl	8003f48 <sbrk_aligned>
 8003ffc:	3001      	adds	r0, #1
 8003ffe:	d03a      	beq.n	8004076 <_malloc_r+0xea>
 8004000:	6823      	ldr	r3, [r4, #0]
 8004002:	442b      	add	r3, r5
 8004004:	6023      	str	r3, [r4, #0]
 8004006:	f8d8 3000 	ldr.w	r3, [r8]
 800400a:	685a      	ldr	r2, [r3, #4]
 800400c:	bb62      	cbnz	r2, 8004068 <_malloc_r+0xdc>
 800400e:	f8c8 7000 	str.w	r7, [r8]
 8004012:	e00f      	b.n	8004034 <_malloc_r+0xa8>
 8004014:	6822      	ldr	r2, [r4, #0]
 8004016:	1b52      	subs	r2, r2, r5
 8004018:	d420      	bmi.n	800405c <_malloc_r+0xd0>
 800401a:	2a0b      	cmp	r2, #11
 800401c:	d917      	bls.n	800404e <_malloc_r+0xc2>
 800401e:	1961      	adds	r1, r4, r5
 8004020:	42a3      	cmp	r3, r4
 8004022:	6025      	str	r5, [r4, #0]
 8004024:	bf18      	it	ne
 8004026:	6059      	strne	r1, [r3, #4]
 8004028:	6863      	ldr	r3, [r4, #4]
 800402a:	bf08      	it	eq
 800402c:	f8c8 1000 	streq.w	r1, [r8]
 8004030:	5162      	str	r2, [r4, r5]
 8004032:	604b      	str	r3, [r1, #4]
 8004034:	4630      	mov	r0, r6
 8004036:	f000 f82f 	bl	8004098 <__malloc_unlock>
 800403a:	f104 000b 	add.w	r0, r4, #11
 800403e:	1d23      	adds	r3, r4, #4
 8004040:	f020 0007 	bic.w	r0, r0, #7
 8004044:	1ac2      	subs	r2, r0, r3
 8004046:	bf1c      	itt	ne
 8004048:	1a1b      	subne	r3, r3, r0
 800404a:	50a3      	strne	r3, [r4, r2]
 800404c:	e7af      	b.n	8003fae <_malloc_r+0x22>
 800404e:	6862      	ldr	r2, [r4, #4]
 8004050:	42a3      	cmp	r3, r4
 8004052:	bf0c      	ite	eq
 8004054:	f8c8 2000 	streq.w	r2, [r8]
 8004058:	605a      	strne	r2, [r3, #4]
 800405a:	e7eb      	b.n	8004034 <_malloc_r+0xa8>
 800405c:	4623      	mov	r3, r4
 800405e:	6864      	ldr	r4, [r4, #4]
 8004060:	e7ae      	b.n	8003fc0 <_malloc_r+0x34>
 8004062:	463c      	mov	r4, r7
 8004064:	687f      	ldr	r7, [r7, #4]
 8004066:	e7b6      	b.n	8003fd6 <_malloc_r+0x4a>
 8004068:	461a      	mov	r2, r3
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	42a3      	cmp	r3, r4
 800406e:	d1fb      	bne.n	8004068 <_malloc_r+0xdc>
 8004070:	2300      	movs	r3, #0
 8004072:	6053      	str	r3, [r2, #4]
 8004074:	e7de      	b.n	8004034 <_malloc_r+0xa8>
 8004076:	230c      	movs	r3, #12
 8004078:	6033      	str	r3, [r6, #0]
 800407a:	4630      	mov	r0, r6
 800407c:	f000 f80c 	bl	8004098 <__malloc_unlock>
 8004080:	e794      	b.n	8003fac <_malloc_r+0x20>
 8004082:	6005      	str	r5, [r0, #0]
 8004084:	e7d6      	b.n	8004034 <_malloc_r+0xa8>
 8004086:	bf00      	nop
 8004088:	200002c0 	.word	0x200002c0

0800408c <__malloc_lock>:
 800408c:	4801      	ldr	r0, [pc, #4]	@ (8004094 <__malloc_lock+0x8>)
 800408e:	f7ff bf0f 	b.w	8003eb0 <__retarget_lock_acquire_recursive>
 8004092:	bf00      	nop
 8004094:	200002b8 	.word	0x200002b8

08004098 <__malloc_unlock>:
 8004098:	4801      	ldr	r0, [pc, #4]	@ (80040a0 <__malloc_unlock+0x8>)
 800409a:	f7ff bf0a 	b.w	8003eb2 <__retarget_lock_release_recursive>
 800409e:	bf00      	nop
 80040a0:	200002b8 	.word	0x200002b8

080040a4 <__ssputs_r>:
 80040a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040a8:	688e      	ldr	r6, [r1, #8]
 80040aa:	461f      	mov	r7, r3
 80040ac:	42be      	cmp	r6, r7
 80040ae:	680b      	ldr	r3, [r1, #0]
 80040b0:	4682      	mov	sl, r0
 80040b2:	460c      	mov	r4, r1
 80040b4:	4690      	mov	r8, r2
 80040b6:	d82d      	bhi.n	8004114 <__ssputs_r+0x70>
 80040b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80040bc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80040c0:	d026      	beq.n	8004110 <__ssputs_r+0x6c>
 80040c2:	6965      	ldr	r5, [r4, #20]
 80040c4:	6909      	ldr	r1, [r1, #16]
 80040c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80040ca:	eba3 0901 	sub.w	r9, r3, r1
 80040ce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80040d2:	1c7b      	adds	r3, r7, #1
 80040d4:	444b      	add	r3, r9
 80040d6:	106d      	asrs	r5, r5, #1
 80040d8:	429d      	cmp	r5, r3
 80040da:	bf38      	it	cc
 80040dc:	461d      	movcc	r5, r3
 80040de:	0553      	lsls	r3, r2, #21
 80040e0:	d527      	bpl.n	8004132 <__ssputs_r+0x8e>
 80040e2:	4629      	mov	r1, r5
 80040e4:	f7ff ff52 	bl	8003f8c <_malloc_r>
 80040e8:	4606      	mov	r6, r0
 80040ea:	b360      	cbz	r0, 8004146 <__ssputs_r+0xa2>
 80040ec:	6921      	ldr	r1, [r4, #16]
 80040ee:	464a      	mov	r2, r9
 80040f0:	f000 fae8 	bl	80046c4 <memcpy>
 80040f4:	89a3      	ldrh	r3, [r4, #12]
 80040f6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80040fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80040fe:	81a3      	strh	r3, [r4, #12]
 8004100:	6126      	str	r6, [r4, #16]
 8004102:	6165      	str	r5, [r4, #20]
 8004104:	444e      	add	r6, r9
 8004106:	eba5 0509 	sub.w	r5, r5, r9
 800410a:	6026      	str	r6, [r4, #0]
 800410c:	60a5      	str	r5, [r4, #8]
 800410e:	463e      	mov	r6, r7
 8004110:	42be      	cmp	r6, r7
 8004112:	d900      	bls.n	8004116 <__ssputs_r+0x72>
 8004114:	463e      	mov	r6, r7
 8004116:	6820      	ldr	r0, [r4, #0]
 8004118:	4632      	mov	r2, r6
 800411a:	4641      	mov	r1, r8
 800411c:	f000 faa8 	bl	8004670 <memmove>
 8004120:	68a3      	ldr	r3, [r4, #8]
 8004122:	1b9b      	subs	r3, r3, r6
 8004124:	60a3      	str	r3, [r4, #8]
 8004126:	6823      	ldr	r3, [r4, #0]
 8004128:	4433      	add	r3, r6
 800412a:	6023      	str	r3, [r4, #0]
 800412c:	2000      	movs	r0, #0
 800412e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004132:	462a      	mov	r2, r5
 8004134:	f000 fad4 	bl	80046e0 <_realloc_r>
 8004138:	4606      	mov	r6, r0
 800413a:	2800      	cmp	r0, #0
 800413c:	d1e0      	bne.n	8004100 <__ssputs_r+0x5c>
 800413e:	6921      	ldr	r1, [r4, #16]
 8004140:	4650      	mov	r0, sl
 8004142:	f7ff feb7 	bl	8003eb4 <_free_r>
 8004146:	230c      	movs	r3, #12
 8004148:	f8ca 3000 	str.w	r3, [sl]
 800414c:	89a3      	ldrh	r3, [r4, #12]
 800414e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004152:	81a3      	strh	r3, [r4, #12]
 8004154:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004158:	e7e9      	b.n	800412e <__ssputs_r+0x8a>
	...

0800415c <_svfiprintf_r>:
 800415c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004160:	4698      	mov	r8, r3
 8004162:	898b      	ldrh	r3, [r1, #12]
 8004164:	061b      	lsls	r3, r3, #24
 8004166:	b09d      	sub	sp, #116	@ 0x74
 8004168:	4607      	mov	r7, r0
 800416a:	460d      	mov	r5, r1
 800416c:	4614      	mov	r4, r2
 800416e:	d510      	bpl.n	8004192 <_svfiprintf_r+0x36>
 8004170:	690b      	ldr	r3, [r1, #16]
 8004172:	b973      	cbnz	r3, 8004192 <_svfiprintf_r+0x36>
 8004174:	2140      	movs	r1, #64	@ 0x40
 8004176:	f7ff ff09 	bl	8003f8c <_malloc_r>
 800417a:	6028      	str	r0, [r5, #0]
 800417c:	6128      	str	r0, [r5, #16]
 800417e:	b930      	cbnz	r0, 800418e <_svfiprintf_r+0x32>
 8004180:	230c      	movs	r3, #12
 8004182:	603b      	str	r3, [r7, #0]
 8004184:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004188:	b01d      	add	sp, #116	@ 0x74
 800418a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800418e:	2340      	movs	r3, #64	@ 0x40
 8004190:	616b      	str	r3, [r5, #20]
 8004192:	2300      	movs	r3, #0
 8004194:	9309      	str	r3, [sp, #36]	@ 0x24
 8004196:	2320      	movs	r3, #32
 8004198:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800419c:	f8cd 800c 	str.w	r8, [sp, #12]
 80041a0:	2330      	movs	r3, #48	@ 0x30
 80041a2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004340 <_svfiprintf_r+0x1e4>
 80041a6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80041aa:	f04f 0901 	mov.w	r9, #1
 80041ae:	4623      	mov	r3, r4
 80041b0:	469a      	mov	sl, r3
 80041b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80041b6:	b10a      	cbz	r2, 80041bc <_svfiprintf_r+0x60>
 80041b8:	2a25      	cmp	r2, #37	@ 0x25
 80041ba:	d1f9      	bne.n	80041b0 <_svfiprintf_r+0x54>
 80041bc:	ebba 0b04 	subs.w	fp, sl, r4
 80041c0:	d00b      	beq.n	80041da <_svfiprintf_r+0x7e>
 80041c2:	465b      	mov	r3, fp
 80041c4:	4622      	mov	r2, r4
 80041c6:	4629      	mov	r1, r5
 80041c8:	4638      	mov	r0, r7
 80041ca:	f7ff ff6b 	bl	80040a4 <__ssputs_r>
 80041ce:	3001      	adds	r0, #1
 80041d0:	f000 80a7 	beq.w	8004322 <_svfiprintf_r+0x1c6>
 80041d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80041d6:	445a      	add	r2, fp
 80041d8:	9209      	str	r2, [sp, #36]	@ 0x24
 80041da:	f89a 3000 	ldrb.w	r3, [sl]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	f000 809f 	beq.w	8004322 <_svfiprintf_r+0x1c6>
 80041e4:	2300      	movs	r3, #0
 80041e6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80041ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80041ee:	f10a 0a01 	add.w	sl, sl, #1
 80041f2:	9304      	str	r3, [sp, #16]
 80041f4:	9307      	str	r3, [sp, #28]
 80041f6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80041fa:	931a      	str	r3, [sp, #104]	@ 0x68
 80041fc:	4654      	mov	r4, sl
 80041fe:	2205      	movs	r2, #5
 8004200:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004204:	484e      	ldr	r0, [pc, #312]	@ (8004340 <_svfiprintf_r+0x1e4>)
 8004206:	f7fb ffe3 	bl	80001d0 <memchr>
 800420a:	9a04      	ldr	r2, [sp, #16]
 800420c:	b9d8      	cbnz	r0, 8004246 <_svfiprintf_r+0xea>
 800420e:	06d0      	lsls	r0, r2, #27
 8004210:	bf44      	itt	mi
 8004212:	2320      	movmi	r3, #32
 8004214:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004218:	0711      	lsls	r1, r2, #28
 800421a:	bf44      	itt	mi
 800421c:	232b      	movmi	r3, #43	@ 0x2b
 800421e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004222:	f89a 3000 	ldrb.w	r3, [sl]
 8004226:	2b2a      	cmp	r3, #42	@ 0x2a
 8004228:	d015      	beq.n	8004256 <_svfiprintf_r+0xfa>
 800422a:	9a07      	ldr	r2, [sp, #28]
 800422c:	4654      	mov	r4, sl
 800422e:	2000      	movs	r0, #0
 8004230:	f04f 0c0a 	mov.w	ip, #10
 8004234:	4621      	mov	r1, r4
 8004236:	f811 3b01 	ldrb.w	r3, [r1], #1
 800423a:	3b30      	subs	r3, #48	@ 0x30
 800423c:	2b09      	cmp	r3, #9
 800423e:	d94b      	bls.n	80042d8 <_svfiprintf_r+0x17c>
 8004240:	b1b0      	cbz	r0, 8004270 <_svfiprintf_r+0x114>
 8004242:	9207      	str	r2, [sp, #28]
 8004244:	e014      	b.n	8004270 <_svfiprintf_r+0x114>
 8004246:	eba0 0308 	sub.w	r3, r0, r8
 800424a:	fa09 f303 	lsl.w	r3, r9, r3
 800424e:	4313      	orrs	r3, r2
 8004250:	9304      	str	r3, [sp, #16]
 8004252:	46a2      	mov	sl, r4
 8004254:	e7d2      	b.n	80041fc <_svfiprintf_r+0xa0>
 8004256:	9b03      	ldr	r3, [sp, #12]
 8004258:	1d19      	adds	r1, r3, #4
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	9103      	str	r1, [sp, #12]
 800425e:	2b00      	cmp	r3, #0
 8004260:	bfbb      	ittet	lt
 8004262:	425b      	neglt	r3, r3
 8004264:	f042 0202 	orrlt.w	r2, r2, #2
 8004268:	9307      	strge	r3, [sp, #28]
 800426a:	9307      	strlt	r3, [sp, #28]
 800426c:	bfb8      	it	lt
 800426e:	9204      	strlt	r2, [sp, #16]
 8004270:	7823      	ldrb	r3, [r4, #0]
 8004272:	2b2e      	cmp	r3, #46	@ 0x2e
 8004274:	d10a      	bne.n	800428c <_svfiprintf_r+0x130>
 8004276:	7863      	ldrb	r3, [r4, #1]
 8004278:	2b2a      	cmp	r3, #42	@ 0x2a
 800427a:	d132      	bne.n	80042e2 <_svfiprintf_r+0x186>
 800427c:	9b03      	ldr	r3, [sp, #12]
 800427e:	1d1a      	adds	r2, r3, #4
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	9203      	str	r2, [sp, #12]
 8004284:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004288:	3402      	adds	r4, #2
 800428a:	9305      	str	r3, [sp, #20]
 800428c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004350 <_svfiprintf_r+0x1f4>
 8004290:	7821      	ldrb	r1, [r4, #0]
 8004292:	2203      	movs	r2, #3
 8004294:	4650      	mov	r0, sl
 8004296:	f7fb ff9b 	bl	80001d0 <memchr>
 800429a:	b138      	cbz	r0, 80042ac <_svfiprintf_r+0x150>
 800429c:	9b04      	ldr	r3, [sp, #16]
 800429e:	eba0 000a 	sub.w	r0, r0, sl
 80042a2:	2240      	movs	r2, #64	@ 0x40
 80042a4:	4082      	lsls	r2, r0
 80042a6:	4313      	orrs	r3, r2
 80042a8:	3401      	adds	r4, #1
 80042aa:	9304      	str	r3, [sp, #16]
 80042ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042b0:	4824      	ldr	r0, [pc, #144]	@ (8004344 <_svfiprintf_r+0x1e8>)
 80042b2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80042b6:	2206      	movs	r2, #6
 80042b8:	f7fb ff8a 	bl	80001d0 <memchr>
 80042bc:	2800      	cmp	r0, #0
 80042be:	d036      	beq.n	800432e <_svfiprintf_r+0x1d2>
 80042c0:	4b21      	ldr	r3, [pc, #132]	@ (8004348 <_svfiprintf_r+0x1ec>)
 80042c2:	bb1b      	cbnz	r3, 800430c <_svfiprintf_r+0x1b0>
 80042c4:	9b03      	ldr	r3, [sp, #12]
 80042c6:	3307      	adds	r3, #7
 80042c8:	f023 0307 	bic.w	r3, r3, #7
 80042cc:	3308      	adds	r3, #8
 80042ce:	9303      	str	r3, [sp, #12]
 80042d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80042d2:	4433      	add	r3, r6
 80042d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80042d6:	e76a      	b.n	80041ae <_svfiprintf_r+0x52>
 80042d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80042dc:	460c      	mov	r4, r1
 80042de:	2001      	movs	r0, #1
 80042e0:	e7a8      	b.n	8004234 <_svfiprintf_r+0xd8>
 80042e2:	2300      	movs	r3, #0
 80042e4:	3401      	adds	r4, #1
 80042e6:	9305      	str	r3, [sp, #20]
 80042e8:	4619      	mov	r1, r3
 80042ea:	f04f 0c0a 	mov.w	ip, #10
 80042ee:	4620      	mov	r0, r4
 80042f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80042f4:	3a30      	subs	r2, #48	@ 0x30
 80042f6:	2a09      	cmp	r2, #9
 80042f8:	d903      	bls.n	8004302 <_svfiprintf_r+0x1a6>
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d0c6      	beq.n	800428c <_svfiprintf_r+0x130>
 80042fe:	9105      	str	r1, [sp, #20]
 8004300:	e7c4      	b.n	800428c <_svfiprintf_r+0x130>
 8004302:	fb0c 2101 	mla	r1, ip, r1, r2
 8004306:	4604      	mov	r4, r0
 8004308:	2301      	movs	r3, #1
 800430a:	e7f0      	b.n	80042ee <_svfiprintf_r+0x192>
 800430c:	ab03      	add	r3, sp, #12
 800430e:	9300      	str	r3, [sp, #0]
 8004310:	462a      	mov	r2, r5
 8004312:	4b0e      	ldr	r3, [pc, #56]	@ (800434c <_svfiprintf_r+0x1f0>)
 8004314:	a904      	add	r1, sp, #16
 8004316:	4638      	mov	r0, r7
 8004318:	f3af 8000 	nop.w
 800431c:	1c42      	adds	r2, r0, #1
 800431e:	4606      	mov	r6, r0
 8004320:	d1d6      	bne.n	80042d0 <_svfiprintf_r+0x174>
 8004322:	89ab      	ldrh	r3, [r5, #12]
 8004324:	065b      	lsls	r3, r3, #25
 8004326:	f53f af2d 	bmi.w	8004184 <_svfiprintf_r+0x28>
 800432a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800432c:	e72c      	b.n	8004188 <_svfiprintf_r+0x2c>
 800432e:	ab03      	add	r3, sp, #12
 8004330:	9300      	str	r3, [sp, #0]
 8004332:	462a      	mov	r2, r5
 8004334:	4b05      	ldr	r3, [pc, #20]	@ (800434c <_svfiprintf_r+0x1f0>)
 8004336:	a904      	add	r1, sp, #16
 8004338:	4638      	mov	r0, r7
 800433a:	f000 f879 	bl	8004430 <_printf_i>
 800433e:	e7ed      	b.n	800431c <_svfiprintf_r+0x1c0>
 8004340:	0800479c 	.word	0x0800479c
 8004344:	080047a6 	.word	0x080047a6
 8004348:	00000000 	.word	0x00000000
 800434c:	080040a5 	.word	0x080040a5
 8004350:	080047a2 	.word	0x080047a2

08004354 <_printf_common>:
 8004354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004358:	4616      	mov	r6, r2
 800435a:	4698      	mov	r8, r3
 800435c:	688a      	ldr	r2, [r1, #8]
 800435e:	690b      	ldr	r3, [r1, #16]
 8004360:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004364:	4293      	cmp	r3, r2
 8004366:	bfb8      	it	lt
 8004368:	4613      	movlt	r3, r2
 800436a:	6033      	str	r3, [r6, #0]
 800436c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004370:	4607      	mov	r7, r0
 8004372:	460c      	mov	r4, r1
 8004374:	b10a      	cbz	r2, 800437a <_printf_common+0x26>
 8004376:	3301      	adds	r3, #1
 8004378:	6033      	str	r3, [r6, #0]
 800437a:	6823      	ldr	r3, [r4, #0]
 800437c:	0699      	lsls	r1, r3, #26
 800437e:	bf42      	ittt	mi
 8004380:	6833      	ldrmi	r3, [r6, #0]
 8004382:	3302      	addmi	r3, #2
 8004384:	6033      	strmi	r3, [r6, #0]
 8004386:	6825      	ldr	r5, [r4, #0]
 8004388:	f015 0506 	ands.w	r5, r5, #6
 800438c:	d106      	bne.n	800439c <_printf_common+0x48>
 800438e:	f104 0a19 	add.w	sl, r4, #25
 8004392:	68e3      	ldr	r3, [r4, #12]
 8004394:	6832      	ldr	r2, [r6, #0]
 8004396:	1a9b      	subs	r3, r3, r2
 8004398:	42ab      	cmp	r3, r5
 800439a:	dc26      	bgt.n	80043ea <_printf_common+0x96>
 800439c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80043a0:	6822      	ldr	r2, [r4, #0]
 80043a2:	3b00      	subs	r3, #0
 80043a4:	bf18      	it	ne
 80043a6:	2301      	movne	r3, #1
 80043a8:	0692      	lsls	r2, r2, #26
 80043aa:	d42b      	bmi.n	8004404 <_printf_common+0xb0>
 80043ac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80043b0:	4641      	mov	r1, r8
 80043b2:	4638      	mov	r0, r7
 80043b4:	47c8      	blx	r9
 80043b6:	3001      	adds	r0, #1
 80043b8:	d01e      	beq.n	80043f8 <_printf_common+0xa4>
 80043ba:	6823      	ldr	r3, [r4, #0]
 80043bc:	6922      	ldr	r2, [r4, #16]
 80043be:	f003 0306 	and.w	r3, r3, #6
 80043c2:	2b04      	cmp	r3, #4
 80043c4:	bf02      	ittt	eq
 80043c6:	68e5      	ldreq	r5, [r4, #12]
 80043c8:	6833      	ldreq	r3, [r6, #0]
 80043ca:	1aed      	subeq	r5, r5, r3
 80043cc:	68a3      	ldr	r3, [r4, #8]
 80043ce:	bf0c      	ite	eq
 80043d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80043d4:	2500      	movne	r5, #0
 80043d6:	4293      	cmp	r3, r2
 80043d8:	bfc4      	itt	gt
 80043da:	1a9b      	subgt	r3, r3, r2
 80043dc:	18ed      	addgt	r5, r5, r3
 80043de:	2600      	movs	r6, #0
 80043e0:	341a      	adds	r4, #26
 80043e2:	42b5      	cmp	r5, r6
 80043e4:	d11a      	bne.n	800441c <_printf_common+0xc8>
 80043e6:	2000      	movs	r0, #0
 80043e8:	e008      	b.n	80043fc <_printf_common+0xa8>
 80043ea:	2301      	movs	r3, #1
 80043ec:	4652      	mov	r2, sl
 80043ee:	4641      	mov	r1, r8
 80043f0:	4638      	mov	r0, r7
 80043f2:	47c8      	blx	r9
 80043f4:	3001      	adds	r0, #1
 80043f6:	d103      	bne.n	8004400 <_printf_common+0xac>
 80043f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80043fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004400:	3501      	adds	r5, #1
 8004402:	e7c6      	b.n	8004392 <_printf_common+0x3e>
 8004404:	18e1      	adds	r1, r4, r3
 8004406:	1c5a      	adds	r2, r3, #1
 8004408:	2030      	movs	r0, #48	@ 0x30
 800440a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800440e:	4422      	add	r2, r4
 8004410:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004414:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004418:	3302      	adds	r3, #2
 800441a:	e7c7      	b.n	80043ac <_printf_common+0x58>
 800441c:	2301      	movs	r3, #1
 800441e:	4622      	mov	r2, r4
 8004420:	4641      	mov	r1, r8
 8004422:	4638      	mov	r0, r7
 8004424:	47c8      	blx	r9
 8004426:	3001      	adds	r0, #1
 8004428:	d0e6      	beq.n	80043f8 <_printf_common+0xa4>
 800442a:	3601      	adds	r6, #1
 800442c:	e7d9      	b.n	80043e2 <_printf_common+0x8e>
	...

08004430 <_printf_i>:
 8004430:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004434:	7e0f      	ldrb	r7, [r1, #24]
 8004436:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004438:	2f78      	cmp	r7, #120	@ 0x78
 800443a:	4691      	mov	r9, r2
 800443c:	4680      	mov	r8, r0
 800443e:	460c      	mov	r4, r1
 8004440:	469a      	mov	sl, r3
 8004442:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004446:	d807      	bhi.n	8004458 <_printf_i+0x28>
 8004448:	2f62      	cmp	r7, #98	@ 0x62
 800444a:	d80a      	bhi.n	8004462 <_printf_i+0x32>
 800444c:	2f00      	cmp	r7, #0
 800444e:	f000 80d2 	beq.w	80045f6 <_printf_i+0x1c6>
 8004452:	2f58      	cmp	r7, #88	@ 0x58
 8004454:	f000 80b9 	beq.w	80045ca <_printf_i+0x19a>
 8004458:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800445c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004460:	e03a      	b.n	80044d8 <_printf_i+0xa8>
 8004462:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004466:	2b15      	cmp	r3, #21
 8004468:	d8f6      	bhi.n	8004458 <_printf_i+0x28>
 800446a:	a101      	add	r1, pc, #4	@ (adr r1, 8004470 <_printf_i+0x40>)
 800446c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004470:	080044c9 	.word	0x080044c9
 8004474:	080044dd 	.word	0x080044dd
 8004478:	08004459 	.word	0x08004459
 800447c:	08004459 	.word	0x08004459
 8004480:	08004459 	.word	0x08004459
 8004484:	08004459 	.word	0x08004459
 8004488:	080044dd 	.word	0x080044dd
 800448c:	08004459 	.word	0x08004459
 8004490:	08004459 	.word	0x08004459
 8004494:	08004459 	.word	0x08004459
 8004498:	08004459 	.word	0x08004459
 800449c:	080045dd 	.word	0x080045dd
 80044a0:	08004507 	.word	0x08004507
 80044a4:	08004597 	.word	0x08004597
 80044a8:	08004459 	.word	0x08004459
 80044ac:	08004459 	.word	0x08004459
 80044b0:	080045ff 	.word	0x080045ff
 80044b4:	08004459 	.word	0x08004459
 80044b8:	08004507 	.word	0x08004507
 80044bc:	08004459 	.word	0x08004459
 80044c0:	08004459 	.word	0x08004459
 80044c4:	0800459f 	.word	0x0800459f
 80044c8:	6833      	ldr	r3, [r6, #0]
 80044ca:	1d1a      	adds	r2, r3, #4
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	6032      	str	r2, [r6, #0]
 80044d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80044d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80044d8:	2301      	movs	r3, #1
 80044da:	e09d      	b.n	8004618 <_printf_i+0x1e8>
 80044dc:	6833      	ldr	r3, [r6, #0]
 80044de:	6820      	ldr	r0, [r4, #0]
 80044e0:	1d19      	adds	r1, r3, #4
 80044e2:	6031      	str	r1, [r6, #0]
 80044e4:	0606      	lsls	r6, r0, #24
 80044e6:	d501      	bpl.n	80044ec <_printf_i+0xbc>
 80044e8:	681d      	ldr	r5, [r3, #0]
 80044ea:	e003      	b.n	80044f4 <_printf_i+0xc4>
 80044ec:	0645      	lsls	r5, r0, #25
 80044ee:	d5fb      	bpl.n	80044e8 <_printf_i+0xb8>
 80044f0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80044f4:	2d00      	cmp	r5, #0
 80044f6:	da03      	bge.n	8004500 <_printf_i+0xd0>
 80044f8:	232d      	movs	r3, #45	@ 0x2d
 80044fa:	426d      	negs	r5, r5
 80044fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004500:	4859      	ldr	r0, [pc, #356]	@ (8004668 <_printf_i+0x238>)
 8004502:	230a      	movs	r3, #10
 8004504:	e011      	b.n	800452a <_printf_i+0xfa>
 8004506:	6821      	ldr	r1, [r4, #0]
 8004508:	6833      	ldr	r3, [r6, #0]
 800450a:	0608      	lsls	r0, r1, #24
 800450c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004510:	d402      	bmi.n	8004518 <_printf_i+0xe8>
 8004512:	0649      	lsls	r1, r1, #25
 8004514:	bf48      	it	mi
 8004516:	b2ad      	uxthmi	r5, r5
 8004518:	2f6f      	cmp	r7, #111	@ 0x6f
 800451a:	4853      	ldr	r0, [pc, #332]	@ (8004668 <_printf_i+0x238>)
 800451c:	6033      	str	r3, [r6, #0]
 800451e:	bf14      	ite	ne
 8004520:	230a      	movne	r3, #10
 8004522:	2308      	moveq	r3, #8
 8004524:	2100      	movs	r1, #0
 8004526:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800452a:	6866      	ldr	r6, [r4, #4]
 800452c:	60a6      	str	r6, [r4, #8]
 800452e:	2e00      	cmp	r6, #0
 8004530:	bfa2      	ittt	ge
 8004532:	6821      	ldrge	r1, [r4, #0]
 8004534:	f021 0104 	bicge.w	r1, r1, #4
 8004538:	6021      	strge	r1, [r4, #0]
 800453a:	b90d      	cbnz	r5, 8004540 <_printf_i+0x110>
 800453c:	2e00      	cmp	r6, #0
 800453e:	d04b      	beq.n	80045d8 <_printf_i+0x1a8>
 8004540:	4616      	mov	r6, r2
 8004542:	fbb5 f1f3 	udiv	r1, r5, r3
 8004546:	fb03 5711 	mls	r7, r3, r1, r5
 800454a:	5dc7      	ldrb	r7, [r0, r7]
 800454c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004550:	462f      	mov	r7, r5
 8004552:	42bb      	cmp	r3, r7
 8004554:	460d      	mov	r5, r1
 8004556:	d9f4      	bls.n	8004542 <_printf_i+0x112>
 8004558:	2b08      	cmp	r3, #8
 800455a:	d10b      	bne.n	8004574 <_printf_i+0x144>
 800455c:	6823      	ldr	r3, [r4, #0]
 800455e:	07df      	lsls	r7, r3, #31
 8004560:	d508      	bpl.n	8004574 <_printf_i+0x144>
 8004562:	6923      	ldr	r3, [r4, #16]
 8004564:	6861      	ldr	r1, [r4, #4]
 8004566:	4299      	cmp	r1, r3
 8004568:	bfde      	ittt	le
 800456a:	2330      	movle	r3, #48	@ 0x30
 800456c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004570:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8004574:	1b92      	subs	r2, r2, r6
 8004576:	6122      	str	r2, [r4, #16]
 8004578:	f8cd a000 	str.w	sl, [sp]
 800457c:	464b      	mov	r3, r9
 800457e:	aa03      	add	r2, sp, #12
 8004580:	4621      	mov	r1, r4
 8004582:	4640      	mov	r0, r8
 8004584:	f7ff fee6 	bl	8004354 <_printf_common>
 8004588:	3001      	adds	r0, #1
 800458a:	d14a      	bne.n	8004622 <_printf_i+0x1f2>
 800458c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004590:	b004      	add	sp, #16
 8004592:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004596:	6823      	ldr	r3, [r4, #0]
 8004598:	f043 0320 	orr.w	r3, r3, #32
 800459c:	6023      	str	r3, [r4, #0]
 800459e:	4833      	ldr	r0, [pc, #204]	@ (800466c <_printf_i+0x23c>)
 80045a0:	2778      	movs	r7, #120	@ 0x78
 80045a2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80045a6:	6823      	ldr	r3, [r4, #0]
 80045a8:	6831      	ldr	r1, [r6, #0]
 80045aa:	061f      	lsls	r7, r3, #24
 80045ac:	f851 5b04 	ldr.w	r5, [r1], #4
 80045b0:	d402      	bmi.n	80045b8 <_printf_i+0x188>
 80045b2:	065f      	lsls	r7, r3, #25
 80045b4:	bf48      	it	mi
 80045b6:	b2ad      	uxthmi	r5, r5
 80045b8:	6031      	str	r1, [r6, #0]
 80045ba:	07d9      	lsls	r1, r3, #31
 80045bc:	bf44      	itt	mi
 80045be:	f043 0320 	orrmi.w	r3, r3, #32
 80045c2:	6023      	strmi	r3, [r4, #0]
 80045c4:	b11d      	cbz	r5, 80045ce <_printf_i+0x19e>
 80045c6:	2310      	movs	r3, #16
 80045c8:	e7ac      	b.n	8004524 <_printf_i+0xf4>
 80045ca:	4827      	ldr	r0, [pc, #156]	@ (8004668 <_printf_i+0x238>)
 80045cc:	e7e9      	b.n	80045a2 <_printf_i+0x172>
 80045ce:	6823      	ldr	r3, [r4, #0]
 80045d0:	f023 0320 	bic.w	r3, r3, #32
 80045d4:	6023      	str	r3, [r4, #0]
 80045d6:	e7f6      	b.n	80045c6 <_printf_i+0x196>
 80045d8:	4616      	mov	r6, r2
 80045da:	e7bd      	b.n	8004558 <_printf_i+0x128>
 80045dc:	6833      	ldr	r3, [r6, #0]
 80045de:	6825      	ldr	r5, [r4, #0]
 80045e0:	6961      	ldr	r1, [r4, #20]
 80045e2:	1d18      	adds	r0, r3, #4
 80045e4:	6030      	str	r0, [r6, #0]
 80045e6:	062e      	lsls	r6, r5, #24
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	d501      	bpl.n	80045f0 <_printf_i+0x1c0>
 80045ec:	6019      	str	r1, [r3, #0]
 80045ee:	e002      	b.n	80045f6 <_printf_i+0x1c6>
 80045f0:	0668      	lsls	r0, r5, #25
 80045f2:	d5fb      	bpl.n	80045ec <_printf_i+0x1bc>
 80045f4:	8019      	strh	r1, [r3, #0]
 80045f6:	2300      	movs	r3, #0
 80045f8:	6123      	str	r3, [r4, #16]
 80045fa:	4616      	mov	r6, r2
 80045fc:	e7bc      	b.n	8004578 <_printf_i+0x148>
 80045fe:	6833      	ldr	r3, [r6, #0]
 8004600:	1d1a      	adds	r2, r3, #4
 8004602:	6032      	str	r2, [r6, #0]
 8004604:	681e      	ldr	r6, [r3, #0]
 8004606:	6862      	ldr	r2, [r4, #4]
 8004608:	2100      	movs	r1, #0
 800460a:	4630      	mov	r0, r6
 800460c:	f7fb fde0 	bl	80001d0 <memchr>
 8004610:	b108      	cbz	r0, 8004616 <_printf_i+0x1e6>
 8004612:	1b80      	subs	r0, r0, r6
 8004614:	6060      	str	r0, [r4, #4]
 8004616:	6863      	ldr	r3, [r4, #4]
 8004618:	6123      	str	r3, [r4, #16]
 800461a:	2300      	movs	r3, #0
 800461c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004620:	e7aa      	b.n	8004578 <_printf_i+0x148>
 8004622:	6923      	ldr	r3, [r4, #16]
 8004624:	4632      	mov	r2, r6
 8004626:	4649      	mov	r1, r9
 8004628:	4640      	mov	r0, r8
 800462a:	47d0      	blx	sl
 800462c:	3001      	adds	r0, #1
 800462e:	d0ad      	beq.n	800458c <_printf_i+0x15c>
 8004630:	6823      	ldr	r3, [r4, #0]
 8004632:	079b      	lsls	r3, r3, #30
 8004634:	d413      	bmi.n	800465e <_printf_i+0x22e>
 8004636:	68e0      	ldr	r0, [r4, #12]
 8004638:	9b03      	ldr	r3, [sp, #12]
 800463a:	4298      	cmp	r0, r3
 800463c:	bfb8      	it	lt
 800463e:	4618      	movlt	r0, r3
 8004640:	e7a6      	b.n	8004590 <_printf_i+0x160>
 8004642:	2301      	movs	r3, #1
 8004644:	4632      	mov	r2, r6
 8004646:	4649      	mov	r1, r9
 8004648:	4640      	mov	r0, r8
 800464a:	47d0      	blx	sl
 800464c:	3001      	adds	r0, #1
 800464e:	d09d      	beq.n	800458c <_printf_i+0x15c>
 8004650:	3501      	adds	r5, #1
 8004652:	68e3      	ldr	r3, [r4, #12]
 8004654:	9903      	ldr	r1, [sp, #12]
 8004656:	1a5b      	subs	r3, r3, r1
 8004658:	42ab      	cmp	r3, r5
 800465a:	dcf2      	bgt.n	8004642 <_printf_i+0x212>
 800465c:	e7eb      	b.n	8004636 <_printf_i+0x206>
 800465e:	2500      	movs	r5, #0
 8004660:	f104 0619 	add.w	r6, r4, #25
 8004664:	e7f5      	b.n	8004652 <_printf_i+0x222>
 8004666:	bf00      	nop
 8004668:	080047ad 	.word	0x080047ad
 800466c:	080047be 	.word	0x080047be

08004670 <memmove>:
 8004670:	4288      	cmp	r0, r1
 8004672:	b510      	push	{r4, lr}
 8004674:	eb01 0402 	add.w	r4, r1, r2
 8004678:	d902      	bls.n	8004680 <memmove+0x10>
 800467a:	4284      	cmp	r4, r0
 800467c:	4623      	mov	r3, r4
 800467e:	d807      	bhi.n	8004690 <memmove+0x20>
 8004680:	1e43      	subs	r3, r0, #1
 8004682:	42a1      	cmp	r1, r4
 8004684:	d008      	beq.n	8004698 <memmove+0x28>
 8004686:	f811 2b01 	ldrb.w	r2, [r1], #1
 800468a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800468e:	e7f8      	b.n	8004682 <memmove+0x12>
 8004690:	4402      	add	r2, r0
 8004692:	4601      	mov	r1, r0
 8004694:	428a      	cmp	r2, r1
 8004696:	d100      	bne.n	800469a <memmove+0x2a>
 8004698:	bd10      	pop	{r4, pc}
 800469a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800469e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80046a2:	e7f7      	b.n	8004694 <memmove+0x24>

080046a4 <_sbrk_r>:
 80046a4:	b538      	push	{r3, r4, r5, lr}
 80046a6:	4d06      	ldr	r5, [pc, #24]	@ (80046c0 <_sbrk_r+0x1c>)
 80046a8:	2300      	movs	r3, #0
 80046aa:	4604      	mov	r4, r0
 80046ac:	4608      	mov	r0, r1
 80046ae:	602b      	str	r3, [r5, #0]
 80046b0:	f7fc fce6 	bl	8001080 <_sbrk>
 80046b4:	1c43      	adds	r3, r0, #1
 80046b6:	d102      	bne.n	80046be <_sbrk_r+0x1a>
 80046b8:	682b      	ldr	r3, [r5, #0]
 80046ba:	b103      	cbz	r3, 80046be <_sbrk_r+0x1a>
 80046bc:	6023      	str	r3, [r4, #0]
 80046be:	bd38      	pop	{r3, r4, r5, pc}
 80046c0:	200002b4 	.word	0x200002b4

080046c4 <memcpy>:
 80046c4:	440a      	add	r2, r1
 80046c6:	4291      	cmp	r1, r2
 80046c8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80046cc:	d100      	bne.n	80046d0 <memcpy+0xc>
 80046ce:	4770      	bx	lr
 80046d0:	b510      	push	{r4, lr}
 80046d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80046d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80046da:	4291      	cmp	r1, r2
 80046dc:	d1f9      	bne.n	80046d2 <memcpy+0xe>
 80046de:	bd10      	pop	{r4, pc}

080046e0 <_realloc_r>:
 80046e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046e4:	4680      	mov	r8, r0
 80046e6:	4615      	mov	r5, r2
 80046e8:	460c      	mov	r4, r1
 80046ea:	b921      	cbnz	r1, 80046f6 <_realloc_r+0x16>
 80046ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80046f0:	4611      	mov	r1, r2
 80046f2:	f7ff bc4b 	b.w	8003f8c <_malloc_r>
 80046f6:	b92a      	cbnz	r2, 8004704 <_realloc_r+0x24>
 80046f8:	f7ff fbdc 	bl	8003eb4 <_free_r>
 80046fc:	2400      	movs	r4, #0
 80046fe:	4620      	mov	r0, r4
 8004700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004704:	f000 f81a 	bl	800473c <_malloc_usable_size_r>
 8004708:	4285      	cmp	r5, r0
 800470a:	4606      	mov	r6, r0
 800470c:	d802      	bhi.n	8004714 <_realloc_r+0x34>
 800470e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004712:	d8f4      	bhi.n	80046fe <_realloc_r+0x1e>
 8004714:	4629      	mov	r1, r5
 8004716:	4640      	mov	r0, r8
 8004718:	f7ff fc38 	bl	8003f8c <_malloc_r>
 800471c:	4607      	mov	r7, r0
 800471e:	2800      	cmp	r0, #0
 8004720:	d0ec      	beq.n	80046fc <_realloc_r+0x1c>
 8004722:	42b5      	cmp	r5, r6
 8004724:	462a      	mov	r2, r5
 8004726:	4621      	mov	r1, r4
 8004728:	bf28      	it	cs
 800472a:	4632      	movcs	r2, r6
 800472c:	f7ff ffca 	bl	80046c4 <memcpy>
 8004730:	4621      	mov	r1, r4
 8004732:	4640      	mov	r0, r8
 8004734:	f7ff fbbe 	bl	8003eb4 <_free_r>
 8004738:	463c      	mov	r4, r7
 800473a:	e7e0      	b.n	80046fe <_realloc_r+0x1e>

0800473c <_malloc_usable_size_r>:
 800473c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004740:	1f18      	subs	r0, r3, #4
 8004742:	2b00      	cmp	r3, #0
 8004744:	bfbc      	itt	lt
 8004746:	580b      	ldrlt	r3, [r1, r0]
 8004748:	18c0      	addlt	r0, r0, r3
 800474a:	4770      	bx	lr

0800474c <_init>:
 800474c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800474e:	bf00      	nop
 8004750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004752:	bc08      	pop	{r3}
 8004754:	469e      	mov	lr, r3
 8004756:	4770      	bx	lr

08004758 <_fini>:
 8004758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800475a:	bf00      	nop
 800475c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800475e:	bc08      	pop	{r3}
 8004760:	469e      	mov	lr, r3
 8004762:	4770      	bx	lr
