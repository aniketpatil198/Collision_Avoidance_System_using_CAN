
US.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007378  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000388  08007508  08007508  00008508  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007890  08007890  000091d4  2**0
                  CONTENTS
  4 .ARM          00000008  08007890  08007890  00008890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007898  08007898  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007898  08007898  00008898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800789c  0800789c  0000889c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080078a0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000091d4  2**0
                  CONTENTS
 10 .bss          000002b8  200001d4  200001d4  000091d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000048c  2000048c  000091d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000eee9  00000000  00000000  00009204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020e5  00000000  00000000  000180ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f50  00000000  00000000  0001a1d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bf7  00000000  00000000  0001b128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003608  00000000  00000000  0001bd1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000110db  00000000  00000000  0001f327  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dbecc  00000000  00000000  00030402  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010c2ce  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000519c  00000000  00000000  0010c314  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004e  00000000  00000000  001114b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080074f0 	.word	0x080074f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	080074f0 	.word	0x080074f0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bfc:	f000 b96a 	b.w	8000ed4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	460c      	mov	r4, r1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d14e      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c24:	4694      	mov	ip, r2
 8000c26:	458c      	cmp	ip, r1
 8000c28:	4686      	mov	lr, r0
 8000c2a:	fab2 f282 	clz	r2, r2
 8000c2e:	d962      	bls.n	8000cf6 <__udivmoddi4+0xde>
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0320 	rsb	r3, r2, #32
 8000c36:	4091      	lsls	r1, r2
 8000c38:	fa20 f303 	lsr.w	r3, r0, r3
 8000c3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c40:	4319      	orrs	r1, r3
 8000c42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4a:	fa1f f68c 	uxth.w	r6, ip
 8000c4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c56:	fb07 1114 	mls	r1, r7, r4, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb04 f106 	mul.w	r1, r4, r6
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c6e:	f080 8112 	bcs.w	8000e96 <__udivmoddi4+0x27e>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 810f 	bls.w	8000e96 <__udivmoddi4+0x27e>
 8000c78:	3c02      	subs	r4, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a59      	subs	r1, r3, r1
 8000c7e:	fa1f f38e 	uxth.w	r3, lr
 8000c82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c86:	fb07 1110 	mls	r1, r7, r0, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb00 f606 	mul.w	r6, r0, r6
 8000c92:	429e      	cmp	r6, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x94>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000c9e:	f080 80fc 	bcs.w	8000e9a <__udivmoddi4+0x282>
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	f240 80f9 	bls.w	8000e9a <__udivmoddi4+0x282>
 8000ca8:	4463      	add	r3, ip
 8000caa:	3802      	subs	r0, #2
 8000cac:	1b9b      	subs	r3, r3, r6
 8000cae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	b11d      	cbz	r5, 8000cbe <__udivmoddi4+0xa6>
 8000cb6:	40d3      	lsrs	r3, r2
 8000cb8:	2200      	movs	r2, #0
 8000cba:	e9c5 3200 	strd	r3, r2, [r5]
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d905      	bls.n	8000cd2 <__udivmoddi4+0xba>
 8000cc6:	b10d      	cbz	r5, 8000ccc <__udivmoddi4+0xb4>
 8000cc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e7f5      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cd2:	fab3 f183 	clz	r1, r3
 8000cd6:	2900      	cmp	r1, #0
 8000cd8:	d146      	bne.n	8000d68 <__udivmoddi4+0x150>
 8000cda:	42a3      	cmp	r3, r4
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xcc>
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	f0c0 80f0 	bcc.w	8000ec4 <__udivmoddi4+0x2ac>
 8000ce4:	1a86      	subs	r6, r0, r2
 8000ce6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	2d00      	cmp	r5, #0
 8000cee:	d0e6      	beq.n	8000cbe <__udivmoddi4+0xa6>
 8000cf0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cf4:	e7e3      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	f040 8090 	bne.w	8000e1c <__udivmoddi4+0x204>
 8000cfc:	eba1 040c 	sub.w	r4, r1, ip
 8000d00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d04:	fa1f f78c 	uxth.w	r7, ip
 8000d08:	2101      	movs	r1, #1
 8000d0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb08 4416 	mls	r4, r8, r6, r4
 8000d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1a:	fb07 f006 	mul.w	r0, r7, r6
 8000d1e:	4298      	cmp	r0, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x11c>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x11a>
 8000d2c:	4298      	cmp	r0, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000d32:	4626      	mov	r6, r4
 8000d34:	1a1c      	subs	r4, r3, r0
 8000d36:	fa1f f38e 	uxth.w	r3, lr
 8000d3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d46:	fb00 f707 	mul.w	r7, r0, r7
 8000d4a:	429f      	cmp	r7, r3
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0x148>
 8000d4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d52:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x146>
 8000d58:	429f      	cmp	r7, r3
 8000d5a:	f200 80b0 	bhi.w	8000ebe <__udivmoddi4+0x2a6>
 8000d5e:	4620      	mov	r0, r4
 8000d60:	1bdb      	subs	r3, r3, r7
 8000d62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d66:	e7a5      	b.n	8000cb4 <__udivmoddi4+0x9c>
 8000d68:	f1c1 0620 	rsb	r6, r1, #32
 8000d6c:	408b      	lsls	r3, r1
 8000d6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d72:	431f      	orrs	r7, r3
 8000d74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d78:	fa04 f301 	lsl.w	r3, r4, r1
 8000d7c:	ea43 030c 	orr.w	r3, r3, ip
 8000d80:	40f4      	lsrs	r4, r6
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	0c38      	lsrs	r0, r7, #16
 8000d88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d90:	fa1f fc87 	uxth.w	ip, r7
 8000d94:	fb00 441e 	mls	r4, r0, lr, r4
 8000d98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000da0:	45a1      	cmp	r9, r4
 8000da2:	fa02 f201 	lsl.w	r2, r2, r1
 8000da6:	d90a      	bls.n	8000dbe <__udivmoddi4+0x1a6>
 8000da8:	193c      	adds	r4, r7, r4
 8000daa:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000dae:	f080 8084 	bcs.w	8000eba <__udivmoddi4+0x2a2>
 8000db2:	45a1      	cmp	r9, r4
 8000db4:	f240 8081 	bls.w	8000eba <__udivmoddi4+0x2a2>
 8000db8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dbc:	443c      	add	r4, r7
 8000dbe:	eba4 0409 	sub.w	r4, r4, r9
 8000dc2:	fa1f f983 	uxth.w	r9, r3
 8000dc6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dca:	fb00 4413 	mls	r4, r0, r3, r4
 8000dce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd6:	45a4      	cmp	ip, r4
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x1d2>
 8000dda:	193c      	adds	r4, r7, r4
 8000ddc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000de0:	d267      	bcs.n	8000eb2 <__udivmoddi4+0x29a>
 8000de2:	45a4      	cmp	ip, r4
 8000de4:	d965      	bls.n	8000eb2 <__udivmoddi4+0x29a>
 8000de6:	3b02      	subs	r3, #2
 8000de8:	443c      	add	r4, r7
 8000dea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dee:	fba0 9302 	umull	r9, r3, r0, r2
 8000df2:	eba4 040c 	sub.w	r4, r4, ip
 8000df6:	429c      	cmp	r4, r3
 8000df8:	46ce      	mov	lr, r9
 8000dfa:	469c      	mov	ip, r3
 8000dfc:	d351      	bcc.n	8000ea2 <__udivmoddi4+0x28a>
 8000dfe:	d04e      	beq.n	8000e9e <__udivmoddi4+0x286>
 8000e00:	b155      	cbz	r5, 8000e18 <__udivmoddi4+0x200>
 8000e02:	ebb8 030e 	subs.w	r3, r8, lr
 8000e06:	eb64 040c 	sbc.w	r4, r4, ip
 8000e0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0e:	40cb      	lsrs	r3, r1
 8000e10:	431e      	orrs	r6, r3
 8000e12:	40cc      	lsrs	r4, r1
 8000e14:	e9c5 6400 	strd	r6, r4, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	e750      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f103 	lsr.w	r1, r0, r3
 8000e24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e28:	fa24 f303 	lsr.w	r3, r4, r3
 8000e2c:	4094      	lsls	r4, r2
 8000e2e:	430c      	orrs	r4, r1
 8000e30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e38:	fa1f f78c 	uxth.w	r7, ip
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3110 	mls	r1, r8, r0, r3
 8000e44:	0c23      	lsrs	r3, r4, #16
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb00 f107 	mul.w	r1, r0, r7
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x24c>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e5a:	d22c      	bcs.n	8000eb6 <__udivmoddi4+0x29e>
 8000e5c:	4299      	cmp	r1, r3
 8000e5e:	d92a      	bls.n	8000eb6 <__udivmoddi4+0x29e>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4463      	add	r3, ip
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb01 f307 	mul.w	r3, r1, r7
 8000e78:	42a3      	cmp	r3, r4
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x276>
 8000e7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e80:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e84:	d213      	bcs.n	8000eae <__udivmoddi4+0x296>
 8000e86:	42a3      	cmp	r3, r4
 8000e88:	d911      	bls.n	8000eae <__udivmoddi4+0x296>
 8000e8a:	3902      	subs	r1, #2
 8000e8c:	4464      	add	r4, ip
 8000e8e:	1ae4      	subs	r4, r4, r3
 8000e90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e94:	e739      	b.n	8000d0a <__udivmoddi4+0xf2>
 8000e96:	4604      	mov	r4, r0
 8000e98:	e6f0      	b.n	8000c7c <__udivmoddi4+0x64>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e706      	b.n	8000cac <__udivmoddi4+0x94>
 8000e9e:	45c8      	cmp	r8, r9
 8000ea0:	d2ae      	bcs.n	8000e00 <__udivmoddi4+0x1e8>
 8000ea2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ea6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eaa:	3801      	subs	r0, #1
 8000eac:	e7a8      	b.n	8000e00 <__udivmoddi4+0x1e8>
 8000eae:	4631      	mov	r1, r6
 8000eb0:	e7ed      	b.n	8000e8e <__udivmoddi4+0x276>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	e799      	b.n	8000dea <__udivmoddi4+0x1d2>
 8000eb6:	4630      	mov	r0, r6
 8000eb8:	e7d4      	b.n	8000e64 <__udivmoddi4+0x24c>
 8000eba:	46d6      	mov	lr, sl
 8000ebc:	e77f      	b.n	8000dbe <__udivmoddi4+0x1a6>
 8000ebe:	4463      	add	r3, ip
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	e74d      	b.n	8000d60 <__udivmoddi4+0x148>
 8000ec4:	4606      	mov	r6, r0
 8000ec6:	4623      	mov	r3, r4
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e70f      	b.n	8000cec <__udivmoddi4+0xd4>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	4463      	add	r3, ip
 8000ed0:	e730      	b.n	8000d34 <__udivmoddi4+0x11c>
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <delay>:
CAN_TxHeaderTypeDef TxHeader;
uint8_t TxData[5];
uint32_t TxMailBox;
char str[20];
void delay (uint16_t time)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000ee2:	4b09      	ldr	r3, [pc, #36]	@ (8000f08 <delay+0x30>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER (&htim1) < time);
 8000eea:	bf00      	nop
 8000eec:	4b06      	ldr	r3, [pc, #24]	@ (8000f08 <delay+0x30>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000ef2:	88fb      	ldrh	r3, [r7, #6]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d3f9      	bcc.n	8000eec <delay+0x14>
}
 8000ef8:	bf00      	nop
 8000efa:	bf00      	nop
 8000efc:	370c      	adds	r7, #12
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	200002b4 	.word	0x200002b4
 8000f0c:	00000000 	.word	0x00000000

08000f10 <HAL_TIM_IC_CaptureCallback>:
#define TRIG_PORT GPIOE

// Let's write the callback function

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	7f1b      	ldrb	r3, [r3, #28]
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	f040 8083 	bne.w	8001028 <HAL_TIM_IC_CaptureCallback+0x118>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 8000f22:	4b45      	ldr	r3, [pc, #276]	@ (8001038 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d11a      	bne.n	8000f60 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	6878      	ldr	r0, [r7, #4]
 8000f2e:	f003 fb67 	bl	8004600 <HAL_TIM_ReadCapturedValue>
 8000f32:	4603      	mov	r3, r0
 8000f34:	4a41      	ldr	r2, [pc, #260]	@ (800103c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000f36:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8000f38:	4b3f      	ldr	r3, [pc, #252]	@ (8001038 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	6a1a      	ldr	r2, [r3, #32]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f022 020a 	bic.w	r2, r2, #10
 8000f4c:	621a      	str	r2, [r3, #32]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	6a1a      	ldr	r2, [r3, #32]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f042 0202 	orr.w	r2, r2, #2
 8000f5c:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
		}
	}
}
 8000f5e:	e063      	b.n	8001028 <HAL_TIM_IC_CaptureCallback+0x118>
		else if (Is_First_Captured==1)   // if the first is already captured
 8000f60:	4b35      	ldr	r3, [pc, #212]	@ (8001038 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d15f      	bne.n	8001028 <HAL_TIM_IC_CaptureCallback+0x118>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8000f68:	2100      	movs	r1, #0
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f003 fb48 	bl	8004600 <HAL_TIM_ReadCapturedValue>
 8000f70:	4603      	mov	r3, r0
 8000f72:	4a33      	ldr	r2, [pc, #204]	@ (8001040 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000f74:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	625a      	str	r2, [r3, #36]	@ 0x24
			if (IC_Val2 > IC_Val1)
 8000f7e:	4b30      	ldr	r3, [pc, #192]	@ (8001040 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	4b2e      	ldr	r3, [pc, #184]	@ (800103c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	429a      	cmp	r2, r3
 8000f88:	d907      	bls.n	8000f9a <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = IC_Val2-IC_Val1;
 8000f8a:	4b2d      	ldr	r3, [pc, #180]	@ (8001040 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	4b2b      	ldr	r3, [pc, #172]	@ (800103c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	1ad3      	subs	r3, r2, r3
 8000f94:	4a2b      	ldr	r2, [pc, #172]	@ (8001044 <HAL_TIM_IC_CaptureCallback+0x134>)
 8000f96:	6013      	str	r3, [r2, #0]
 8000f98:	e00f      	b.n	8000fba <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (IC_Val1 > IC_Val2)
 8000f9a:	4b28      	ldr	r3, [pc, #160]	@ (800103c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	4b28      	ldr	r3, [pc, #160]	@ (8001040 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	429a      	cmp	r2, r3
 8000fa4:	d909      	bls.n	8000fba <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 8000fa6:	4b26      	ldr	r3, [pc, #152]	@ (8001040 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	4b24      	ldr	r3, [pc, #144]	@ (800103c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	1ad3      	subs	r3, r2, r3
 8000fb0:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8000fb4:	33ff      	adds	r3, #255	@ 0xff
 8000fb6:	4a23      	ldr	r2, [pc, #140]	@ (8001044 <HAL_TIM_IC_CaptureCallback+0x134>)
 8000fb8:	6013      	str	r3, [r2, #0]
			Distance = Difference * .034/2;
 8000fba:	4b22      	ldr	r3, [pc, #136]	@ (8001044 <HAL_TIM_IC_CaptureCallback+0x134>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff faa0 	bl	8000504 <__aeabi_ui2d>
 8000fc4:	a31a      	add	r3, pc, #104	@ (adr r3, 8001030 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fca:	f7ff fb15 	bl	80005f8 <__aeabi_dmul>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	4610      	mov	r0, r2
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	f04f 0200 	mov.w	r2, #0
 8000fda:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000fde:	f7ff fc35 	bl	800084c <__aeabi_ddiv>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	4610      	mov	r0, r2
 8000fe8:	4619      	mov	r1, r3
 8000fea:	f7ff fddd 	bl	8000ba8 <__aeabi_d2uiz>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	b2da      	uxtb	r2, r3
 8000ff2:	4b15      	ldr	r3, [pc, #84]	@ (8001048 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000ff4:	701a      	strb	r2, [r3, #0]
			Is_First_Captured = 0; // set it back to false
 8000ff6:	4b10      	ldr	r3, [pc, #64]	@ (8001038 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	6a1a      	ldr	r2, [r3, #32]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f022 020a 	bic.w	r2, r2, #10
 800100a:	621a      	str	r2, [r3, #32]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	6a12      	ldr	r2, [r2, #32]
 8001016:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 8001018:	4b0c      	ldr	r3, [pc, #48]	@ (800104c <HAL_TIM_IC_CaptureCallback+0x13c>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	68da      	ldr	r2, [r3, #12]
 800101e:	4b0b      	ldr	r3, [pc, #44]	@ (800104c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f022 0202 	bic.w	r2, r2, #2
 8001026:	60da      	str	r2, [r3, #12]
}
 8001028:	bf00      	nop
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	b020c49c 	.word	0xb020c49c
 8001034:	3fa16872 	.word	0x3fa16872
 8001038:	2000032c 	.word	0x2000032c
 800103c:	20000320 	.word	0x20000320
 8001040:	20000324 	.word	0x20000324
 8001044:	20000328 	.word	0x20000328
 8001048:	2000032d 	.word	0x2000032d
 800104c:	200002b4 	.word	0x200002b4

08001050 <HCSR04_Read>:

void HCSR04_Read (void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8001054:	2201      	movs	r2, #1
 8001056:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800105a:	480b      	ldr	r0, [pc, #44]	@ (8001088 <HCSR04_Read+0x38>)
 800105c:	f002 f9d0 	bl	8003400 <HAL_GPIO_WritePin>
	delay(10);  // wait for 10 us
 8001060:	200a      	movs	r0, #10
 8001062:	f7ff ff39 	bl	8000ed8 <delay>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8001066:	2200      	movs	r2, #0
 8001068:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800106c:	4806      	ldr	r0, [pc, #24]	@ (8001088 <HCSR04_Read+0x38>)
 800106e:	f002 f9c7 	bl	8003400 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 8001072:	4b06      	ldr	r3, [pc, #24]	@ (800108c <HCSR04_Read+0x3c>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	68da      	ldr	r2, [r3, #12]
 8001078:	4b04      	ldr	r3, [pc, #16]	@ (800108c <HCSR04_Read+0x3c>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f042 0202 	orr.w	r2, r2, #2
 8001080:	60da      	str	r2, [r3, #12]
}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40021000 	.word	0x40021000
 800108c:	200002b4 	.word	0x200002b4

08001090 <TempRead>:

void TempRead(void){
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8001094:	480e      	ldr	r0, [pc, #56]	@ (80010d0 <TempRead+0x40>)
 8001096:	f000 fe2d 	bl	8001cf4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800109a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800109e:	480c      	ldr	r0, [pc, #48]	@ (80010d0 <TempRead+0x40>)
 80010a0:	f000 fefa 	bl	8001e98 <HAL_ADC_PollForConversion>
	adc = HAL_ADC_GetValue(&hadc1);
 80010a4:	480a      	ldr	r0, [pc, #40]	@ (80010d0 <TempRead+0x40>)
 80010a6:	f000 ff82 	bl	8001fae <HAL_ADC_GetValue>
 80010aa:	4603      	mov	r3, r0
 80010ac:	4a09      	ldr	r2, [pc, #36]	@ (80010d4 <TempRead+0x44>)
 80010ae:	6013      	str	r3, [r2, #0]
	//if(adc != 0)
		Temp = adc / 12;
 80010b0:	4b08      	ldr	r3, [pc, #32]	@ (80010d4 <TempRead+0x44>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a08      	ldr	r2, [pc, #32]	@ (80010d8 <TempRead+0x48>)
 80010b6:	fba2 2303 	umull	r2, r3, r2, r3
 80010ba:	08db      	lsrs	r3, r3, #3
 80010bc:	ee07 3a90 	vmov	s15, r3
 80010c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010c4:	4b05      	ldr	r3, [pc, #20]	@ (80010dc <TempRead+0x4c>)
 80010c6:	edc3 7a00 	vstr	s15, [r3]
}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	200001f0 	.word	0x200001f0
 80010d4:	20000330 	.word	0x20000330
 80010d8:	aaaaaaab 	.word	0xaaaaaaab
 80010dc:	20000334 	.word	0x20000334

080010e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010e6:	f000 fd2b 	bl	8001b40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010ea:	f000 f871 	bl	80011d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010ee:	f000 fa01 	bl	80014f4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80010f2:	f000 f97b 	bl	80013ec <MX_I2C1_Init>
  MX_TIM1_Init();
 80010f6:	f000 f9a7 	bl	8001448 <MX_TIM1_Init>
  MX_ADC1_Init();
 80010fa:	f000 f8d1 	bl	80012a0 <MX_ADC1_Init>
  MX_CAN1_Init();
 80010fe:	f000 f921 	bl	8001344 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan1);
 8001102:	482b      	ldr	r0, [pc, #172]	@ (80011b0 <main+0xd0>)
 8001104:	f001 fb5a 	bl	80027bc <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001108:	2102      	movs	r1, #2
 800110a:	4829      	ldr	r0, [pc, #164]	@ (80011b0 <main+0xd0>)
 800110c:	f001 fc6a 	bl	80029e4 <HAL_CAN_ActivateNotification>
  HAL_Delay(100);
 8001110:	2064      	movs	r0, #100	@ 0x64
 8001112:	f000 fd87 	bl	8001c24 <HAL_Delay>
  HAL_Delay(100);
 8001116:	2064      	movs	r0, #100	@ 0x64
 8001118:	f000 fd84 	bl	8001c24 <HAL_Delay>

  TxHeader.DLC=3;
 800111c:	4b25      	ldr	r3, [pc, #148]	@ (80011b4 <main+0xd4>)
 800111e:	2203      	movs	r2, #3
 8001120:	611a      	str	r2, [r3, #16]
  TxHeader.RTR=CAN_RTR_DATA;
 8001122:	4b24      	ldr	r3, [pc, #144]	@ (80011b4 <main+0xd4>)
 8001124:	2200      	movs	r2, #0
 8001126:	60da      	str	r2, [r3, #12]
  TxHeader.IDE=CAN_ID_STD;
 8001128:	4b22      	ldr	r3, [pc, #136]	@ (80011b4 <main+0xd4>)
 800112a:	2200      	movs	r2, #0
 800112c:	609a      	str	r2, [r3, #8]
  TxHeader.ExtId=0x0;
 800112e:	4b21      	ldr	r3, [pc, #132]	@ (80011b4 <main+0xd4>)
 8001130:	2200      	movs	r2, #0
 8001132:	605a      	str	r2, [r3, #4]
  TxHeader.StdId=0x0AA;
 8001134:	4b1f      	ldr	r3, [pc, #124]	@ (80011b4 <main+0xd4>)
 8001136:	22aa      	movs	r2, #170	@ 0xaa
 8001138:	601a      	str	r2, [r3, #0]
  TxHeader.TransmitGlobalTime=DISABLE;
 800113a:	4b1e      	ldr	r3, [pc, #120]	@ (80011b4 <main+0xd4>)
 800113c:	2200      	movs	r2, #0
 800113e:	751a      	strb	r2, [r3, #20]
  TxData[0] = 0;
 8001140:	4b1d      	ldr	r3, [pc, #116]	@ (80011b8 <main+0xd8>)
 8001142:	2200      	movs	r2, #0
 8001144:	701a      	strb	r2, [r3, #0]

  //lcd_init();
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8001146:	2100      	movs	r1, #0
 8001148:	481c      	ldr	r0, [pc, #112]	@ (80011bc <main+0xdc>)
 800114a:	f002 ffa5 	bl	8004098 <HAL_TIM_IC_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //lcd_clear();
	  HCSR04_Read();
 800114e:	f7ff ff7f 	bl	8001050 <HCSR04_Read>
	  TempRead();
 8001152:	f7ff ff9d 	bl	8001090 <TempRead>
	  TxData[0] = !TxData[0]; //LED Toggle
 8001156:	4b18      	ldr	r3, [pc, #96]	@ (80011b8 <main+0xd8>)
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	2b00      	cmp	r3, #0
 800115c:	bf0c      	ite	eq
 800115e:	2301      	moveq	r3, #1
 8001160:	2300      	movne	r3, #0
 8001162:	b2db      	uxtb	r3, r3
 8001164:	461a      	mov	r2, r3
 8001166:	4b14      	ldr	r3, [pc, #80]	@ (80011b8 <main+0xd8>)
 8001168:	701a      	strb	r2, [r3, #0]
	  TxData[1] = Temp;
 800116a:	4b15      	ldr	r3, [pc, #84]	@ (80011c0 <main+0xe0>)
 800116c:	edd3 7a00 	vldr	s15, [r3]
 8001170:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001174:	edc7 7a01 	vstr	s15, [r7, #4]
 8001178:	793b      	ldrb	r3, [r7, #4]
 800117a:	b2da      	uxtb	r2, r3
 800117c:	4b0e      	ldr	r3, [pc, #56]	@ (80011b8 <main+0xd8>)
 800117e:	705a      	strb	r2, [r3, #1]
	  TxData[2] = Distance;
 8001180:	4b10      	ldr	r3, [pc, #64]	@ (80011c4 <main+0xe4>)
 8001182:	781a      	ldrb	r2, [r3, #0]
 8001184:	4b0c      	ldr	r3, [pc, #48]	@ (80011b8 <main+0xd8>)
 8001186:	709a      	strb	r2, [r3, #2]
	  if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailBox) != HAL_OK)
 8001188:	4b0f      	ldr	r3, [pc, #60]	@ (80011c8 <main+0xe8>)
 800118a:	4a0b      	ldr	r2, [pc, #44]	@ (80011b8 <main+0xd8>)
 800118c:	4909      	ldr	r1, [pc, #36]	@ (80011b4 <main+0xd4>)
 800118e:	4808      	ldr	r0, [pc, #32]	@ (80011b0 <main+0xd0>)
 8001190:	f001 fb58 	bl	8002844 <HAL_CAN_AddTxMessage>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <main+0xbe>
	  	  		 Error_Handler();
 800119a:	f000 fa31 	bl	8001600 <Error_Handler>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 800119e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011a2:	480a      	ldr	r0, [pc, #40]	@ (80011cc <main+0xec>)
 80011a4:	f002 f945 	bl	8003432 <HAL_GPIO_TogglePin>
  	  lcd_send_cmd(0x80|0x40);
  	  lcd_send_string(str);
  	  sprintf(str, "Temp:%d",Temp);
  	  lcd_send_cmd(0x80|0x40);
  	  lcd_send_string(str);*/
  	  HAL_Delay(50);
 80011a8:	2032      	movs	r0, #50	@ 0x32
 80011aa:	f000 fd3b 	bl	8001c24 <HAL_Delay>
	  HCSR04_Read();
 80011ae:	e7ce      	b.n	800114e <main+0x6e>
 80011b0:	20000238 	.word	0x20000238
 80011b4:	200002fc 	.word	0x200002fc
 80011b8:	20000314 	.word	0x20000314
 80011bc:	200002b4 	.word	0x200002b4
 80011c0:	20000334 	.word	0x20000334
 80011c4:	2000032d 	.word	0x2000032d
 80011c8:	2000031c 	.word	0x2000031c
 80011cc:	40020c00 	.word	0x40020c00

080011d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b094      	sub	sp, #80	@ 0x50
 80011d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011d6:	f107 0320 	add.w	r3, r7, #32
 80011da:	2230      	movs	r2, #48	@ 0x30
 80011dc:	2100      	movs	r1, #0
 80011de:	4618      	mov	r0, r3
 80011e0:	f004 fa63 	bl	80056aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011e4:	f107 030c 	add.w	r3, r7, #12
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	609a      	str	r2, [r3, #8]
 80011f0:	60da      	str	r2, [r3, #12]
 80011f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011f4:	2300      	movs	r3, #0
 80011f6:	60bb      	str	r3, [r7, #8]
 80011f8:	4b27      	ldr	r3, [pc, #156]	@ (8001298 <SystemClock_Config+0xc8>)
 80011fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011fc:	4a26      	ldr	r2, [pc, #152]	@ (8001298 <SystemClock_Config+0xc8>)
 80011fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001202:	6413      	str	r3, [r2, #64]	@ 0x40
 8001204:	4b24      	ldr	r3, [pc, #144]	@ (8001298 <SystemClock_Config+0xc8>)
 8001206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001208:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800120c:	60bb      	str	r3, [r7, #8]
 800120e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001210:	2300      	movs	r3, #0
 8001212:	607b      	str	r3, [r7, #4]
 8001214:	4b21      	ldr	r3, [pc, #132]	@ (800129c <SystemClock_Config+0xcc>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a20      	ldr	r2, [pc, #128]	@ (800129c <SystemClock_Config+0xcc>)
 800121a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800121e:	6013      	str	r3, [r2, #0]
 8001220:	4b1e      	ldr	r3, [pc, #120]	@ (800129c <SystemClock_Config+0xcc>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001228:	607b      	str	r3, [r7, #4]
 800122a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800122c:	2301      	movs	r3, #1
 800122e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001230:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001234:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001236:	2302      	movs	r3, #2
 8001238:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800123a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800123e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001240:	2304      	movs	r3, #4
 8001242:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001244:	2348      	movs	r3, #72	@ 0x48
 8001246:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001248:	2302      	movs	r3, #2
 800124a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800124c:	2307      	movs	r3, #7
 800124e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001250:	f107 0320 	add.w	r3, r7, #32
 8001254:	4618      	mov	r0, r3
 8001256:	f002 fa4b 	bl	80036f0 <HAL_RCC_OscConfig>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001260:	f000 f9ce 	bl	8001600 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001264:	230f      	movs	r3, #15
 8001266:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001268:	2302      	movs	r3, #2
 800126a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800126c:	2300      	movs	r3, #0
 800126e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001270:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001274:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001276:	2300      	movs	r3, #0
 8001278:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800127a:	f107 030c 	add.w	r3, r7, #12
 800127e:	2102      	movs	r1, #2
 8001280:	4618      	mov	r0, r3
 8001282:	f002 fcad 	bl	8003be0 <HAL_RCC_ClockConfig>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800128c:	f000 f9b8 	bl	8001600 <Error_Handler>
  }
}
 8001290:	bf00      	nop
 8001292:	3750      	adds	r7, #80	@ 0x50
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	40023800 	.word	0x40023800
 800129c:	40007000 	.word	0x40007000

080012a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012a6:	463b      	mov	r3, r7
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80012b2:	4b21      	ldr	r3, [pc, #132]	@ (8001338 <MX_ADC1_Init+0x98>)
 80012b4:	4a21      	ldr	r2, [pc, #132]	@ (800133c <MX_ADC1_Init+0x9c>)
 80012b6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80012b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001338 <MX_ADC1_Init+0x98>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012be:	4b1e      	ldr	r3, [pc, #120]	@ (8001338 <MX_ADC1_Init+0x98>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80012c4:	4b1c      	ldr	r3, [pc, #112]	@ (8001338 <MX_ADC1_Init+0x98>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80012ca:	4b1b      	ldr	r3, [pc, #108]	@ (8001338 <MX_ADC1_Init+0x98>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012d0:	4b19      	ldr	r3, [pc, #100]	@ (8001338 <MX_ADC1_Init+0x98>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012d8:	4b17      	ldr	r3, [pc, #92]	@ (8001338 <MX_ADC1_Init+0x98>)
 80012da:	2200      	movs	r2, #0
 80012dc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012de:	4b16      	ldr	r3, [pc, #88]	@ (8001338 <MX_ADC1_Init+0x98>)
 80012e0:	4a17      	ldr	r2, [pc, #92]	@ (8001340 <MX_ADC1_Init+0xa0>)
 80012e2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012e4:	4b14      	ldr	r3, [pc, #80]	@ (8001338 <MX_ADC1_Init+0x98>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80012ea:	4b13      	ldr	r3, [pc, #76]	@ (8001338 <MX_ADC1_Init+0x98>)
 80012ec:	2201      	movs	r2, #1
 80012ee:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80012f0:	4b11      	ldr	r3, [pc, #68]	@ (8001338 <MX_ADC1_Init+0x98>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001338 <MX_ADC1_Init+0x98>)
 80012fa:	2201      	movs	r2, #1
 80012fc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012fe:	480e      	ldr	r0, [pc, #56]	@ (8001338 <MX_ADC1_Init+0x98>)
 8001300:	f000 fcb4 	bl	8001c6c <HAL_ADC_Init>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800130a:	f000 f979 	bl	8001600 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800130e:	2300      	movs	r3, #0
 8001310:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001312:	2301      	movs	r3, #1
 8001314:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001316:	2300      	movs	r3, #0
 8001318:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800131a:	463b      	mov	r3, r7
 800131c:	4619      	mov	r1, r3
 800131e:	4806      	ldr	r0, [pc, #24]	@ (8001338 <MX_ADC1_Init+0x98>)
 8001320:	f000 fe52 	bl	8001fc8 <HAL_ADC_ConfigChannel>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800132a:	f000 f969 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800132e:	bf00      	nop
 8001330:	3710      	adds	r7, #16
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	200001f0 	.word	0x200001f0
 800133c:	40012000 	.word	0x40012000
 8001340:	0f000001 	.word	0x0f000001

08001344 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b08a      	sub	sp, #40	@ 0x28
 8001348:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800134a:	4b26      	ldr	r3, [pc, #152]	@ (80013e4 <MX_CAN1_Init+0xa0>)
 800134c:	4a26      	ldr	r2, [pc, #152]	@ (80013e8 <MX_CAN1_Init+0xa4>)
 800134e:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 18;
 8001350:	4b24      	ldr	r3, [pc, #144]	@ (80013e4 <MX_CAN1_Init+0xa0>)
 8001352:	2212      	movs	r2, #18
 8001354:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001356:	4b23      	ldr	r3, [pc, #140]	@ (80013e4 <MX_CAN1_Init+0xa0>)
 8001358:	2200      	movs	r2, #0
 800135a:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800135c:	4b21      	ldr	r3, [pc, #132]	@ (80013e4 <MX_CAN1_Init+0xa0>)
 800135e:	2200      	movs	r2, #0
 8001360:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001362:	4b20      	ldr	r3, [pc, #128]	@ (80013e4 <MX_CAN1_Init+0xa0>)
 8001364:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001368:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800136a:	4b1e      	ldr	r3, [pc, #120]	@ (80013e4 <MX_CAN1_Init+0xa0>)
 800136c:	2200      	movs	r2, #0
 800136e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001370:	4b1c      	ldr	r3, [pc, #112]	@ (80013e4 <MX_CAN1_Init+0xa0>)
 8001372:	2200      	movs	r2, #0
 8001374:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001376:	4b1b      	ldr	r3, [pc, #108]	@ (80013e4 <MX_CAN1_Init+0xa0>)
 8001378:	2200      	movs	r2, #0
 800137a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800137c:	4b19      	ldr	r3, [pc, #100]	@ (80013e4 <MX_CAN1_Init+0xa0>)
 800137e:	2200      	movs	r2, #0
 8001380:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001382:	4b18      	ldr	r3, [pc, #96]	@ (80013e4 <MX_CAN1_Init+0xa0>)
 8001384:	2200      	movs	r2, #0
 8001386:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001388:	4b16      	ldr	r3, [pc, #88]	@ (80013e4 <MX_CAN1_Init+0xa0>)
 800138a:	2200      	movs	r2, #0
 800138c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800138e:	4b15      	ldr	r3, [pc, #84]	@ (80013e4 <MX_CAN1_Init+0xa0>)
 8001390:	2200      	movs	r2, #0
 8001392:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001394:	4813      	ldr	r0, [pc, #76]	@ (80013e4 <MX_CAN1_Init+0xa0>)
 8001396:	f001 f835 	bl	8002404 <HAL_CAN_Init>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80013a0:	f000 f92e 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canFilterConfig;
   canFilterConfig.FilterActivation=CAN_FILTER_ENABLE;
 80013a4:	2301      	movs	r3, #1
 80013a6:	623b      	str	r3, [r7, #32]
   canFilterConfig.SlaveStartFilterBank=14;
 80013a8:	230e      	movs	r3, #14
 80013aa:	627b      	str	r3, [r7, #36]	@ 0x24
   canFilterConfig.FilterBank=2;
 80013ac:	2302      	movs	r3, #2
 80013ae:	617b      	str	r3, [r7, #20]
   canFilterConfig.FilterFIFOAssignment=CAN_RX_FIFO0;
 80013b0:	2300      	movs	r3, #0
 80013b2:	613b      	str	r3, [r7, #16]
   canFilterConfig.FilterScale=CAN_FILTERSCALE_32BIT;
 80013b4:	2301      	movs	r3, #1
 80013b6:	61fb      	str	r3, [r7, #28]
   canFilterConfig.FilterMode=CAN_FILTERMODE_IDMASK;
 80013b8:	2300      	movs	r3, #0
 80013ba:	61bb      	str	r3, [r7, #24]
   canFilterConfig.FilterMaskIdLow=0x0000;
 80013bc:	2300      	movs	r3, #0
 80013be:	60fb      	str	r3, [r7, #12]
   canFilterConfig.FilterMaskIdHigh=0xFF00;
 80013c0:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 80013c4:	60bb      	str	r3, [r7, #8]
   canFilterConfig.FilterIdLow=0x0000;
 80013c6:	2300      	movs	r3, #0
 80013c8:	607b      	str	r3, [r7, #4]
   canFilterConfig.FilterIdHigh=0x1500;
 80013ca:	f44f 53a8 	mov.w	r3, #5376	@ 0x1500
 80013ce:	603b      	str	r3, [r7, #0]
   HAL_CAN_ConfigFilter(&hcan1, &canFilterConfig);
 80013d0:	463b      	mov	r3, r7
 80013d2:	4619      	mov	r1, r3
 80013d4:	4803      	ldr	r0, [pc, #12]	@ (80013e4 <MX_CAN1_Init+0xa0>)
 80013d6:	f001 f911 	bl	80025fc <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 80013da:	bf00      	nop
 80013dc:	3728      	adds	r7, #40	@ 0x28
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	20000238 	.word	0x20000238
 80013e8:	40006400 	.word	0x40006400

080013ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013f0:	4b12      	ldr	r3, [pc, #72]	@ (800143c <MX_I2C1_Init+0x50>)
 80013f2:	4a13      	ldr	r2, [pc, #76]	@ (8001440 <MX_I2C1_Init+0x54>)
 80013f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80013f6:	4b11      	ldr	r3, [pc, #68]	@ (800143c <MX_I2C1_Init+0x50>)
 80013f8:	4a12      	ldr	r2, [pc, #72]	@ (8001444 <MX_I2C1_Init+0x58>)
 80013fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013fc:	4b0f      	ldr	r3, [pc, #60]	@ (800143c <MX_I2C1_Init+0x50>)
 80013fe:	2200      	movs	r2, #0
 8001400:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001402:	4b0e      	ldr	r3, [pc, #56]	@ (800143c <MX_I2C1_Init+0x50>)
 8001404:	2200      	movs	r2, #0
 8001406:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001408:	4b0c      	ldr	r3, [pc, #48]	@ (800143c <MX_I2C1_Init+0x50>)
 800140a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800140e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001410:	4b0a      	ldr	r3, [pc, #40]	@ (800143c <MX_I2C1_Init+0x50>)
 8001412:	2200      	movs	r2, #0
 8001414:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001416:	4b09      	ldr	r3, [pc, #36]	@ (800143c <MX_I2C1_Init+0x50>)
 8001418:	2200      	movs	r2, #0
 800141a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800141c:	4b07      	ldr	r3, [pc, #28]	@ (800143c <MX_I2C1_Init+0x50>)
 800141e:	2200      	movs	r2, #0
 8001420:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001422:	4b06      	ldr	r3, [pc, #24]	@ (800143c <MX_I2C1_Init+0x50>)
 8001424:	2200      	movs	r2, #0
 8001426:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001428:	4804      	ldr	r0, [pc, #16]	@ (800143c <MX_I2C1_Init+0x50>)
 800142a:	f002 f81d 	bl	8003468 <HAL_I2C_Init>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001434:	f000 f8e4 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001438:	bf00      	nop
 800143a:	bd80      	pop	{r7, pc}
 800143c:	20000260 	.word	0x20000260
 8001440:	40005400 	.word	0x40005400
 8001444:	000186a0 	.word	0x000186a0

08001448 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b086      	sub	sp, #24
 800144c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800144e:	f107 0310 	add.w	r3, r7, #16
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001458:	463b      	mov	r3, r7
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	605a      	str	r2, [r3, #4]
 8001460:	609a      	str	r2, [r3, #8]
 8001462:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001464:	4b21      	ldr	r3, [pc, #132]	@ (80014ec <MX_TIM1_Init+0xa4>)
 8001466:	4a22      	ldr	r2, [pc, #136]	@ (80014f0 <MX_TIM1_Init+0xa8>)
 8001468:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 800146a:	4b20      	ldr	r3, [pc, #128]	@ (80014ec <MX_TIM1_Init+0xa4>)
 800146c:	2247      	movs	r2, #71	@ 0x47
 800146e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001470:	4b1e      	ldr	r3, [pc, #120]	@ (80014ec <MX_TIM1_Init+0xa4>)
 8001472:	2200      	movs	r2, #0
 8001474:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001476:	4b1d      	ldr	r3, [pc, #116]	@ (80014ec <MX_TIM1_Init+0xa4>)
 8001478:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800147c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800147e:	4b1b      	ldr	r3, [pc, #108]	@ (80014ec <MX_TIM1_Init+0xa4>)
 8001480:	2200      	movs	r2, #0
 8001482:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001484:	4b19      	ldr	r3, [pc, #100]	@ (80014ec <MX_TIM1_Init+0xa4>)
 8001486:	2200      	movs	r2, #0
 8001488:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800148a:	4b18      	ldr	r3, [pc, #96]	@ (80014ec <MX_TIM1_Init+0xa4>)
 800148c:	2200      	movs	r2, #0
 800148e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001490:	4816      	ldr	r0, [pc, #88]	@ (80014ec <MX_TIM1_Init+0xa4>)
 8001492:	f002 fdb1 	bl	8003ff8 <HAL_TIM_IC_Init>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800149c:	f000 f8b0 	bl	8001600 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014a0:	2300      	movs	r3, #0
 80014a2:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014a4:	2300      	movs	r3, #0
 80014a6:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014a8:	f107 0310 	add.w	r3, r7, #16
 80014ac:	4619      	mov	r1, r3
 80014ae:	480f      	ldr	r0, [pc, #60]	@ (80014ec <MX_TIM1_Init+0xa4>)
 80014b0:	f003 fb0e 	bl	8004ad0 <HAL_TIMEx_MasterConfigSynchronization>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80014ba:	f000 f8a1 	bl	8001600 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80014be:	2300      	movs	r3, #0
 80014c0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80014c2:	2301      	movs	r3, #1
 80014c4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80014c6:	2300      	movs	r3, #0
 80014c8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80014ca:	2300      	movs	r3, #0
 80014cc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80014ce:	463b      	mov	r3, r7
 80014d0:	2200      	movs	r2, #0
 80014d2:	4619      	mov	r1, r3
 80014d4:	4805      	ldr	r0, [pc, #20]	@ (80014ec <MX_TIM1_Init+0xa4>)
 80014d6:	f002 fff7 	bl	80044c8 <HAL_TIM_IC_ConfigChannel>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80014e0:	f000 f88e 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80014e4:	bf00      	nop
 80014e6:	3718      	adds	r7, #24
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	200002b4 	.word	0x200002b4
 80014f0:	40010000 	.word	0x40010000

080014f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b08a      	sub	sp, #40	@ 0x28
 80014f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014fa:	f107 0314 	add.w	r3, r7, #20
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	605a      	str	r2, [r3, #4]
 8001504:	609a      	str	r2, [r3, #8]
 8001506:	60da      	str	r2, [r3, #12]
 8001508:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	613b      	str	r3, [r7, #16]
 800150e:	4b39      	ldr	r3, [pc, #228]	@ (80015f4 <MX_GPIO_Init+0x100>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001512:	4a38      	ldr	r2, [pc, #224]	@ (80015f4 <MX_GPIO_Init+0x100>)
 8001514:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001518:	6313      	str	r3, [r2, #48]	@ 0x30
 800151a:	4b36      	ldr	r3, [pc, #216]	@ (80015f4 <MX_GPIO_Init+0x100>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001522:	613b      	str	r3, [r7, #16]
 8001524:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	60fb      	str	r3, [r7, #12]
 800152a:	4b32      	ldr	r3, [pc, #200]	@ (80015f4 <MX_GPIO_Init+0x100>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152e:	4a31      	ldr	r2, [pc, #196]	@ (80015f4 <MX_GPIO_Init+0x100>)
 8001530:	f043 0301 	orr.w	r3, r3, #1
 8001534:	6313      	str	r3, [r2, #48]	@ 0x30
 8001536:	4b2f      	ldr	r3, [pc, #188]	@ (80015f4 <MX_GPIO_Init+0x100>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	60bb      	str	r3, [r7, #8]
 8001546:	4b2b      	ldr	r3, [pc, #172]	@ (80015f4 <MX_GPIO_Init+0x100>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800154a:	4a2a      	ldr	r2, [pc, #168]	@ (80015f4 <MX_GPIO_Init+0x100>)
 800154c:	f043 0310 	orr.w	r3, r3, #16
 8001550:	6313      	str	r3, [r2, #48]	@ 0x30
 8001552:	4b28      	ldr	r3, [pc, #160]	@ (80015f4 <MX_GPIO_Init+0x100>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001556:	f003 0310 	and.w	r3, r3, #16
 800155a:	60bb      	str	r3, [r7, #8]
 800155c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	607b      	str	r3, [r7, #4]
 8001562:	4b24      	ldr	r3, [pc, #144]	@ (80015f4 <MX_GPIO_Init+0x100>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001566:	4a23      	ldr	r2, [pc, #140]	@ (80015f4 <MX_GPIO_Init+0x100>)
 8001568:	f043 0308 	orr.w	r3, r3, #8
 800156c:	6313      	str	r3, [r2, #48]	@ 0x30
 800156e:	4b21      	ldr	r3, [pc, #132]	@ (80015f4 <MX_GPIO_Init+0x100>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001572:	f003 0308 	and.w	r3, r3, #8
 8001576:	607b      	str	r3, [r7, #4]
 8001578:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	603b      	str	r3, [r7, #0]
 800157e:	4b1d      	ldr	r3, [pc, #116]	@ (80015f4 <MX_GPIO_Init+0x100>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001582:	4a1c      	ldr	r2, [pc, #112]	@ (80015f4 <MX_GPIO_Init+0x100>)
 8001584:	f043 0302 	orr.w	r3, r3, #2
 8001588:	6313      	str	r3, [r2, #48]	@ 0x30
 800158a:	4b1a      	ldr	r3, [pc, #104]	@ (80015f4 <MX_GPIO_Init+0x100>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158e:	f003 0302 	and.w	r3, r3, #2
 8001592:	603b      	str	r3, [r7, #0]
 8001594:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 8001596:	2200      	movs	r2, #0
 8001598:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800159c:	4816      	ldr	r0, [pc, #88]	@ (80015f8 <MX_GPIO_Init+0x104>)
 800159e:	f001 ff2f 	bl	8003400 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80015a2:	2200      	movs	r2, #0
 80015a4:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80015a8:	4814      	ldr	r0, [pc, #80]	@ (80015fc <MX_GPIO_Init+0x108>)
 80015aa:	f001 ff29 	bl	8003400 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80015ae:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80015b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b4:	2301      	movs	r3, #1
 80015b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b8:	2300      	movs	r3, #0
 80015ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015bc:	2300      	movs	r3, #0
 80015be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015c0:	f107 0314 	add.w	r3, r7, #20
 80015c4:	4619      	mov	r1, r3
 80015c6:	480c      	ldr	r0, [pc, #48]	@ (80015f8 <MX_GPIO_Init+0x104>)
 80015c8:	f001 fd7e 	bl	80030c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80015cc:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80015d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d2:	2301      	movs	r3, #1
 80015d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015da:	2300      	movs	r3, #0
 80015dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015de:	f107 0314 	add.w	r3, r7, #20
 80015e2:	4619      	mov	r1, r3
 80015e4:	4805      	ldr	r0, [pc, #20]	@ (80015fc <MX_GPIO_Init+0x108>)
 80015e6:	f001 fd6f 	bl	80030c8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015ea:	bf00      	nop
 80015ec:	3728      	adds	r7, #40	@ 0x28
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	40023800 	.word	0x40023800
 80015f8:	40021000 	.word	0x40021000
 80015fc:	40020c00 	.word	0x40020c00

08001600 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001604:	b672      	cpsid	i
}
 8001606:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001608:	bf00      	nop
 800160a:	e7fd      	b.n	8001608 <Error_Handler+0x8>

0800160c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	607b      	str	r3, [r7, #4]
 8001616:	4b10      	ldr	r3, [pc, #64]	@ (8001658 <HAL_MspInit+0x4c>)
 8001618:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800161a:	4a0f      	ldr	r2, [pc, #60]	@ (8001658 <HAL_MspInit+0x4c>)
 800161c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001620:	6453      	str	r3, [r2, #68]	@ 0x44
 8001622:	4b0d      	ldr	r3, [pc, #52]	@ (8001658 <HAL_MspInit+0x4c>)
 8001624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001626:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800162a:	607b      	str	r3, [r7, #4]
 800162c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800162e:	2300      	movs	r3, #0
 8001630:	603b      	str	r3, [r7, #0]
 8001632:	4b09      	ldr	r3, [pc, #36]	@ (8001658 <HAL_MspInit+0x4c>)
 8001634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001636:	4a08      	ldr	r2, [pc, #32]	@ (8001658 <HAL_MspInit+0x4c>)
 8001638:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800163c:	6413      	str	r3, [r2, #64]	@ 0x40
 800163e:	4b06      	ldr	r3, [pc, #24]	@ (8001658 <HAL_MspInit+0x4c>)
 8001640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001642:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001646:	603b      	str	r3, [r7, #0]
 8001648:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800164a:	2007      	movs	r0, #7
 800164c:	f001 fcfa 	bl	8003044 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001650:	bf00      	nop
 8001652:	3708      	adds	r7, #8
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	40023800 	.word	0x40023800

0800165c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b08a      	sub	sp, #40	@ 0x28
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001664:	f107 0314 	add.w	r3, r7, #20
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	605a      	str	r2, [r3, #4]
 800166e:	609a      	str	r2, [r3, #8]
 8001670:	60da      	str	r2, [r3, #12]
 8001672:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a17      	ldr	r2, [pc, #92]	@ (80016d8 <HAL_ADC_MspInit+0x7c>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d127      	bne.n	80016ce <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	613b      	str	r3, [r7, #16]
 8001682:	4b16      	ldr	r3, [pc, #88]	@ (80016dc <HAL_ADC_MspInit+0x80>)
 8001684:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001686:	4a15      	ldr	r2, [pc, #84]	@ (80016dc <HAL_ADC_MspInit+0x80>)
 8001688:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800168c:	6453      	str	r3, [r2, #68]	@ 0x44
 800168e:	4b13      	ldr	r3, [pc, #76]	@ (80016dc <HAL_ADC_MspInit+0x80>)
 8001690:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001692:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001696:	613b      	str	r3, [r7, #16]
 8001698:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	60fb      	str	r3, [r7, #12]
 800169e:	4b0f      	ldr	r3, [pc, #60]	@ (80016dc <HAL_ADC_MspInit+0x80>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a2:	4a0e      	ldr	r2, [pc, #56]	@ (80016dc <HAL_ADC_MspInit+0x80>)
 80016a4:	f043 0301 	orr.w	r3, r3, #1
 80016a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016aa:	4b0c      	ldr	r3, [pc, #48]	@ (80016dc <HAL_ADC_MspInit+0x80>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016b6:	2301      	movs	r3, #1
 80016b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016ba:	2303      	movs	r3, #3
 80016bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016be:	2300      	movs	r3, #0
 80016c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c2:	f107 0314 	add.w	r3, r7, #20
 80016c6:	4619      	mov	r1, r3
 80016c8:	4805      	ldr	r0, [pc, #20]	@ (80016e0 <HAL_ADC_MspInit+0x84>)
 80016ca:	f001 fcfd 	bl	80030c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80016ce:	bf00      	nop
 80016d0:	3728      	adds	r7, #40	@ 0x28
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	40012000 	.word	0x40012000
 80016dc:	40023800 	.word	0x40023800
 80016e0:	40020000 	.word	0x40020000

080016e4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b08a      	sub	sp, #40	@ 0x28
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ec:	f107 0314 	add.w	r3, r7, #20
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	605a      	str	r2, [r3, #4]
 80016f6:	609a      	str	r2, [r3, #8]
 80016f8:	60da      	str	r2, [r3, #12]
 80016fa:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a1d      	ldr	r2, [pc, #116]	@ (8001778 <HAL_CAN_MspInit+0x94>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d134      	bne.n	8001770 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	613b      	str	r3, [r7, #16]
 800170a:	4b1c      	ldr	r3, [pc, #112]	@ (800177c <HAL_CAN_MspInit+0x98>)
 800170c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800170e:	4a1b      	ldr	r2, [pc, #108]	@ (800177c <HAL_CAN_MspInit+0x98>)
 8001710:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001714:	6413      	str	r3, [r2, #64]	@ 0x40
 8001716:	4b19      	ldr	r3, [pc, #100]	@ (800177c <HAL_CAN_MspInit+0x98>)
 8001718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800171a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800171e:	613b      	str	r3, [r7, #16]
 8001720:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	60fb      	str	r3, [r7, #12]
 8001726:	4b15      	ldr	r3, [pc, #84]	@ (800177c <HAL_CAN_MspInit+0x98>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800172a:	4a14      	ldr	r2, [pc, #80]	@ (800177c <HAL_CAN_MspInit+0x98>)
 800172c:	f043 0302 	orr.w	r3, r3, #2
 8001730:	6313      	str	r3, [r2, #48]	@ 0x30
 8001732:	4b12      	ldr	r3, [pc, #72]	@ (800177c <HAL_CAN_MspInit+0x98>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	60fb      	str	r3, [r7, #12]
 800173c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800173e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001742:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001744:	2302      	movs	r3, #2
 8001746:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001748:	2300      	movs	r3, #0
 800174a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800174c:	2303      	movs	r3, #3
 800174e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001750:	2309      	movs	r3, #9
 8001752:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001754:	f107 0314 	add.w	r3, r7, #20
 8001758:	4619      	mov	r1, r3
 800175a:	4809      	ldr	r0, [pc, #36]	@ (8001780 <HAL_CAN_MspInit+0x9c>)
 800175c:	f001 fcb4 	bl	80030c8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001760:	2200      	movs	r2, #0
 8001762:	2100      	movs	r1, #0
 8001764:	2014      	movs	r0, #20
 8001766:	f001 fc78 	bl	800305a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800176a:	2014      	movs	r0, #20
 800176c:	f001 fc91 	bl	8003092 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001770:	bf00      	nop
 8001772:	3728      	adds	r7, #40	@ 0x28
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	40006400 	.word	0x40006400
 800177c:	40023800 	.word	0x40023800
 8001780:	40020400 	.word	0x40020400

08001784 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b08a      	sub	sp, #40	@ 0x28
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800178c:	f107 0314 	add.w	r3, r7, #20
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	605a      	str	r2, [r3, #4]
 8001796:	609a      	str	r2, [r3, #8]
 8001798:	60da      	str	r2, [r3, #12]
 800179a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a19      	ldr	r2, [pc, #100]	@ (8001808 <HAL_I2C_MspInit+0x84>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d12b      	bne.n	80017fe <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	613b      	str	r3, [r7, #16]
 80017aa:	4b18      	ldr	r3, [pc, #96]	@ (800180c <HAL_I2C_MspInit+0x88>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ae:	4a17      	ldr	r2, [pc, #92]	@ (800180c <HAL_I2C_MspInit+0x88>)
 80017b0:	f043 0302 	orr.w	r3, r3, #2
 80017b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017b6:	4b15      	ldr	r3, [pc, #84]	@ (800180c <HAL_I2C_MspInit+0x88>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ba:	f003 0302 	and.w	r3, r3, #2
 80017be:	613b      	str	r3, [r7, #16]
 80017c0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80017c2:	23c0      	movs	r3, #192	@ 0xc0
 80017c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017c6:	2312      	movs	r3, #18
 80017c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ca:	2300      	movs	r3, #0
 80017cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ce:	2303      	movs	r3, #3
 80017d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017d2:	2304      	movs	r3, #4
 80017d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017d6:	f107 0314 	add.w	r3, r7, #20
 80017da:	4619      	mov	r1, r3
 80017dc:	480c      	ldr	r0, [pc, #48]	@ (8001810 <HAL_I2C_MspInit+0x8c>)
 80017de:	f001 fc73 	bl	80030c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017e2:	2300      	movs	r3, #0
 80017e4:	60fb      	str	r3, [r7, #12]
 80017e6:	4b09      	ldr	r3, [pc, #36]	@ (800180c <HAL_I2C_MspInit+0x88>)
 80017e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ea:	4a08      	ldr	r2, [pc, #32]	@ (800180c <HAL_I2C_MspInit+0x88>)
 80017ec:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80017f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80017f2:	4b06      	ldr	r3, [pc, #24]	@ (800180c <HAL_I2C_MspInit+0x88>)
 80017f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80017fe:	bf00      	nop
 8001800:	3728      	adds	r7, #40	@ 0x28
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	40005400 	.word	0x40005400
 800180c:	40023800 	.word	0x40023800
 8001810:	40020400 	.word	0x40020400

08001814 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b08a      	sub	sp, #40	@ 0x28
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800181c:	f107 0314 	add.w	r3, r7, #20
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	605a      	str	r2, [r3, #4]
 8001826:	609a      	str	r2, [r3, #8]
 8001828:	60da      	str	r2, [r3, #12]
 800182a:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a1d      	ldr	r2, [pc, #116]	@ (80018a8 <HAL_TIM_IC_MspInit+0x94>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d134      	bne.n	80018a0 <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001836:	2300      	movs	r3, #0
 8001838:	613b      	str	r3, [r7, #16]
 800183a:	4b1c      	ldr	r3, [pc, #112]	@ (80018ac <HAL_TIM_IC_MspInit+0x98>)
 800183c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800183e:	4a1b      	ldr	r2, [pc, #108]	@ (80018ac <HAL_TIM_IC_MspInit+0x98>)
 8001840:	f043 0301 	orr.w	r3, r3, #1
 8001844:	6453      	str	r3, [r2, #68]	@ 0x44
 8001846:	4b19      	ldr	r3, [pc, #100]	@ (80018ac <HAL_TIM_IC_MspInit+0x98>)
 8001848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	613b      	str	r3, [r7, #16]
 8001850:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	60fb      	str	r3, [r7, #12]
 8001856:	4b15      	ldr	r3, [pc, #84]	@ (80018ac <HAL_TIM_IC_MspInit+0x98>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800185a:	4a14      	ldr	r2, [pc, #80]	@ (80018ac <HAL_TIM_IC_MspInit+0x98>)
 800185c:	f043 0310 	orr.w	r3, r3, #16
 8001860:	6313      	str	r3, [r2, #48]	@ 0x30
 8001862:	4b12      	ldr	r3, [pc, #72]	@ (80018ac <HAL_TIM_IC_MspInit+0x98>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001866:	f003 0310 	and.w	r3, r3, #16
 800186a:	60fb      	str	r3, [r7, #12]
 800186c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800186e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001872:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001874:	2302      	movs	r3, #2
 8001876:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001878:	2300      	movs	r3, #0
 800187a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187c:	2300      	movs	r3, #0
 800187e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001880:	2301      	movs	r3, #1
 8001882:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001884:	f107 0314 	add.w	r3, r7, #20
 8001888:	4619      	mov	r1, r3
 800188a:	4809      	ldr	r0, [pc, #36]	@ (80018b0 <HAL_TIM_IC_MspInit+0x9c>)
 800188c:	f001 fc1c 	bl	80030c8 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001890:	2200      	movs	r2, #0
 8001892:	2100      	movs	r1, #0
 8001894:	201b      	movs	r0, #27
 8001896:	f001 fbe0 	bl	800305a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800189a:	201b      	movs	r0, #27
 800189c:	f001 fbf9 	bl	8003092 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80018a0:	bf00      	nop
 80018a2:	3728      	adds	r7, #40	@ 0x28
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	40010000 	.word	0x40010000
 80018ac:	40023800 	.word	0x40023800
 80018b0:	40021000 	.word	0x40021000

080018b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018b8:	bf00      	nop
 80018ba:	e7fd      	b.n	80018b8 <NMI_Handler+0x4>

080018bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018c0:	bf00      	nop
 80018c2:	e7fd      	b.n	80018c0 <HardFault_Handler+0x4>

080018c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018c8:	bf00      	nop
 80018ca:	e7fd      	b.n	80018c8 <MemManage_Handler+0x4>

080018cc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018d0:	bf00      	nop
 80018d2:	e7fd      	b.n	80018d0 <BusFault_Handler+0x4>

080018d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018d8:	bf00      	nop
 80018da:	e7fd      	b.n	80018d8 <UsageFault_Handler+0x4>

080018dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018e0:	bf00      	nop
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr

080018ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018ea:	b480      	push	{r7}
 80018ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018ee:	bf00      	nop
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018fc:	bf00      	nop
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr

08001906 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001906:	b580      	push	{r7, lr}
 8001908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800190a:	f000 f96b 	bl	8001be4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800190e:	bf00      	nop
 8001910:	bd80      	pop	{r7, pc}
	...

08001914 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001918:	4802      	ldr	r0, [pc, #8]	@ (8001924 <CAN1_RX0_IRQHandler+0x10>)
 800191a:	f001 f889 	bl	8002a30 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800191e:	bf00      	nop
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	20000238 	.word	0x20000238

08001928 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800192c:	4802      	ldr	r0, [pc, #8]	@ (8001938 <TIM1_CC_IRQHandler+0x10>)
 800192e:	f002 fcdb 	bl	80042e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001932:	bf00      	nop
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	200002b4 	.word	0x200002b4

0800193c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  return 1;
 8001940:	2301      	movs	r3, #1
}
 8001942:	4618      	mov	r0, r3
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <_kill>:

int _kill(int pid, int sig)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001956:	f003 fefb 	bl	8005750 <__errno>
 800195a:	4603      	mov	r3, r0
 800195c:	2216      	movs	r2, #22
 800195e:	601a      	str	r2, [r3, #0]
  return -1;
 8001960:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001964:	4618      	mov	r0, r3
 8001966:	3708      	adds	r7, #8
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}

0800196c <_exit>:

void _exit (int status)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001974:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f7ff ffe7 	bl	800194c <_kill>
  while (1) {}    /* Make sure we hang here */
 800197e:	bf00      	nop
 8001980:	e7fd      	b.n	800197e <_exit+0x12>

08001982 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001982:	b580      	push	{r7, lr}
 8001984:	b086      	sub	sp, #24
 8001986:	af00      	add	r7, sp, #0
 8001988:	60f8      	str	r0, [r7, #12]
 800198a:	60b9      	str	r1, [r7, #8]
 800198c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800198e:	2300      	movs	r3, #0
 8001990:	617b      	str	r3, [r7, #20]
 8001992:	e00a      	b.n	80019aa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001994:	f3af 8000 	nop.w
 8001998:	4601      	mov	r1, r0
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	1c5a      	adds	r2, r3, #1
 800199e:	60ba      	str	r2, [r7, #8]
 80019a0:	b2ca      	uxtb	r2, r1
 80019a2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	3301      	adds	r3, #1
 80019a8:	617b      	str	r3, [r7, #20]
 80019aa:	697a      	ldr	r2, [r7, #20]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	429a      	cmp	r2, r3
 80019b0:	dbf0      	blt.n	8001994 <_read+0x12>
  }

  return len;
 80019b2:	687b      	ldr	r3, [r7, #4]
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3718      	adds	r7, #24
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}

080019bc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b086      	sub	sp, #24
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019c8:	2300      	movs	r3, #0
 80019ca:	617b      	str	r3, [r7, #20]
 80019cc:	e009      	b.n	80019e2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	1c5a      	adds	r2, r3, #1
 80019d2:	60ba      	str	r2, [r7, #8]
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	3301      	adds	r3, #1
 80019e0:	617b      	str	r3, [r7, #20]
 80019e2:	697a      	ldr	r2, [r7, #20]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	429a      	cmp	r2, r3
 80019e8:	dbf1      	blt.n	80019ce <_write+0x12>
  }
  return len;
 80019ea:	687b      	ldr	r3, [r7, #4]
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3718      	adds	r7, #24
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <_close>:

int _close(int file)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a1c:	605a      	str	r2, [r3, #4]
  return 0;
 8001a1e:	2300      	movs	r3, #0
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <_isatty>:

int _isatty(int file)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a34:	2301      	movs	r3, #1
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr

08001a42 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a42:	b480      	push	{r7}
 8001a44:	b085      	sub	sp, #20
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	60f8      	str	r0, [r7, #12]
 8001a4a:	60b9      	str	r1, [r7, #8]
 8001a4c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a4e:	2300      	movs	r3, #0
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3714      	adds	r7, #20
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a64:	4a14      	ldr	r2, [pc, #80]	@ (8001ab8 <_sbrk+0x5c>)
 8001a66:	4b15      	ldr	r3, [pc, #84]	@ (8001abc <_sbrk+0x60>)
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a70:	4b13      	ldr	r3, [pc, #76]	@ (8001ac0 <_sbrk+0x64>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d102      	bne.n	8001a7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a78:	4b11      	ldr	r3, [pc, #68]	@ (8001ac0 <_sbrk+0x64>)
 8001a7a:	4a12      	ldr	r2, [pc, #72]	@ (8001ac4 <_sbrk+0x68>)
 8001a7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a7e:	4b10      	ldr	r3, [pc, #64]	@ (8001ac0 <_sbrk+0x64>)
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4413      	add	r3, r2
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d207      	bcs.n	8001a9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a8c:	f003 fe60 	bl	8005750 <__errno>
 8001a90:	4603      	mov	r3, r0
 8001a92:	220c      	movs	r2, #12
 8001a94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a96:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a9a:	e009      	b.n	8001ab0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a9c:	4b08      	ldr	r3, [pc, #32]	@ (8001ac0 <_sbrk+0x64>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aa2:	4b07      	ldr	r3, [pc, #28]	@ (8001ac0 <_sbrk+0x64>)
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	4a05      	ldr	r2, [pc, #20]	@ (8001ac0 <_sbrk+0x64>)
 8001aac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001aae:	68fb      	ldr	r3, [r7, #12]
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3718      	adds	r7, #24
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	20020000 	.word	0x20020000
 8001abc:	00000400 	.word	0x00000400
 8001ac0:	20000338 	.word	0x20000338
 8001ac4:	20000490 	.word	0x20000490

08001ac8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001acc:	4b06      	ldr	r3, [pc, #24]	@ (8001ae8 <SystemInit+0x20>)
 8001ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ad2:	4a05      	ldr	r2, [pc, #20]	@ (8001ae8 <SystemInit+0x20>)
 8001ad4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ad8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001adc:	bf00      	nop
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	e000ed00 	.word	0xe000ed00

08001aec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001aec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b24 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001af0:	f7ff ffea 	bl	8001ac8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001af4:	480c      	ldr	r0, [pc, #48]	@ (8001b28 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001af6:	490d      	ldr	r1, [pc, #52]	@ (8001b2c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001af8:	4a0d      	ldr	r2, [pc, #52]	@ (8001b30 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001afa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001afc:	e002      	b.n	8001b04 <LoopCopyDataInit>

08001afe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001afe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b02:	3304      	adds	r3, #4

08001b04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b08:	d3f9      	bcc.n	8001afe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b0a:	4a0a      	ldr	r2, [pc, #40]	@ (8001b34 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b0c:	4c0a      	ldr	r4, [pc, #40]	@ (8001b38 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b10:	e001      	b.n	8001b16 <LoopFillZerobss>

08001b12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b14:	3204      	adds	r2, #4

08001b16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b18:	d3fb      	bcc.n	8001b12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b1a:	f003 fe1f 	bl	800575c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b1e:	f7ff fadf 	bl	80010e0 <main>
  bx  lr    
 8001b22:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001b24:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b2c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001b30:	080078a0 	.word	0x080078a0
  ldr r2, =_sbss
 8001b34:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001b38:	2000048c 	.word	0x2000048c

08001b3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b3c:	e7fe      	b.n	8001b3c <ADC_IRQHandler>
	...

08001b40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b44:	4b0e      	ldr	r3, [pc, #56]	@ (8001b80 <HAL_Init+0x40>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a0d      	ldr	r2, [pc, #52]	@ (8001b80 <HAL_Init+0x40>)
 8001b4a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b50:	4b0b      	ldr	r3, [pc, #44]	@ (8001b80 <HAL_Init+0x40>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a0a      	ldr	r2, [pc, #40]	@ (8001b80 <HAL_Init+0x40>)
 8001b56:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b5c:	4b08      	ldr	r3, [pc, #32]	@ (8001b80 <HAL_Init+0x40>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a07      	ldr	r2, [pc, #28]	@ (8001b80 <HAL_Init+0x40>)
 8001b62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b68:	2003      	movs	r0, #3
 8001b6a:	f001 fa6b 	bl	8003044 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b6e:	2000      	movs	r0, #0
 8001b70:	f000 f808 	bl	8001b84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b74:	f7ff fd4a 	bl	800160c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40023c00 	.word	0x40023c00

08001b84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b8c:	4b12      	ldr	r3, [pc, #72]	@ (8001bd8 <HAL_InitTick+0x54>)
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	4b12      	ldr	r3, [pc, #72]	@ (8001bdc <HAL_InitTick+0x58>)
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	4619      	mov	r1, r3
 8001b96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f001 fa83 	bl	80030ae <HAL_SYSTICK_Config>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e00e      	b.n	8001bd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2b0f      	cmp	r3, #15
 8001bb6:	d80a      	bhi.n	8001bce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bb8:	2200      	movs	r2, #0
 8001bba:	6879      	ldr	r1, [r7, #4]
 8001bbc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001bc0:	f001 fa4b 	bl	800305a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bc4:	4a06      	ldr	r2, [pc, #24]	@ (8001be0 <HAL_InitTick+0x5c>)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	e000      	b.n	8001bd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3708      	adds	r7, #8
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	20000000 	.word	0x20000000
 8001bdc:	20000008 	.word	0x20000008
 8001be0:	20000004 	.word	0x20000004

08001be4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001be8:	4b06      	ldr	r3, [pc, #24]	@ (8001c04 <HAL_IncTick+0x20>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	461a      	mov	r2, r3
 8001bee:	4b06      	ldr	r3, [pc, #24]	@ (8001c08 <HAL_IncTick+0x24>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	4a04      	ldr	r2, [pc, #16]	@ (8001c08 <HAL_IncTick+0x24>)
 8001bf6:	6013      	str	r3, [r2, #0]
}
 8001bf8:	bf00      	nop
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	20000008 	.word	0x20000008
 8001c08:	2000033c 	.word	0x2000033c

08001c0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c10:	4b03      	ldr	r3, [pc, #12]	@ (8001c20 <HAL_GetTick+0x14>)
 8001c12:	681b      	ldr	r3, [r3, #0]
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	2000033c 	.word	0x2000033c

08001c24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c2c:	f7ff ffee 	bl	8001c0c <HAL_GetTick>
 8001c30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001c3c:	d005      	beq.n	8001c4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c3e:	4b0a      	ldr	r3, [pc, #40]	@ (8001c68 <HAL_Delay+0x44>)
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	461a      	mov	r2, r3
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	4413      	add	r3, r2
 8001c48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c4a:	bf00      	nop
 8001c4c:	f7ff ffde 	bl	8001c0c <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	68fa      	ldr	r2, [r7, #12]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d8f7      	bhi.n	8001c4c <HAL_Delay+0x28>
  {
  }
}
 8001c5c:	bf00      	nop
 8001c5e:	bf00      	nop
 8001c60:	3710      	adds	r7, #16
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	20000008 	.word	0x20000008

08001c6c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c74:	2300      	movs	r3, #0
 8001c76:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d101      	bne.n	8001c82 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e033      	b.n	8001cea <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d109      	bne.n	8001c9e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f7ff fce6 	bl	800165c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca2:	f003 0310 	and.w	r3, r3, #16
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d118      	bne.n	8001cdc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cae:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001cb2:	f023 0302 	bic.w	r3, r3, #2
 8001cb6:	f043 0202 	orr.w	r2, r3, #2
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f000 faa4 	bl	800220c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cce:	f023 0303 	bic.w	r3, r3, #3
 8001cd2:	f043 0201 	orr.w	r2, r3, #1
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	641a      	str	r2, [r3, #64]	@ 0x40
 8001cda:	e001      	b.n	8001ce0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3710      	adds	r7, #16
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
	...

08001cf4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d101      	bne.n	8001d0e <HAL_ADC_Start+0x1a>
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	e0b2      	b.n	8001e74 <HAL_ADC_Start+0x180>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2201      	movs	r2, #1
 8001d12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	f003 0301 	and.w	r3, r3, #1
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d018      	beq.n	8001d56 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	689a      	ldr	r2, [r3, #8]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f042 0201 	orr.w	r2, r2, #1
 8001d32:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d34:	4b52      	ldr	r3, [pc, #328]	@ (8001e80 <HAL_ADC_Start+0x18c>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a52      	ldr	r2, [pc, #328]	@ (8001e84 <HAL_ADC_Start+0x190>)
 8001d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d3e:	0c9a      	lsrs	r2, r3, #18
 8001d40:	4613      	mov	r3, r2
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	4413      	add	r3, r2
 8001d46:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001d48:	e002      	b.n	8001d50 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	3b01      	subs	r3, #1
 8001d4e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d1f9      	bne.n	8001d4a <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	f003 0301 	and.w	r3, r3, #1
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d17a      	bne.n	8001e5a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d68:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001d6c:	f023 0301 	bic.w	r3, r3, #1
 8001d70:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d007      	beq.n	8001d96 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d8a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001d8e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d9a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001da2:	d106      	bne.n	8001db2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001da8:	f023 0206 	bic.w	r2, r3, #6
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	645a      	str	r2, [r3, #68]	@ 0x44
 8001db0:	e002      	b.n	8001db8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001dc0:	4b31      	ldr	r3, [pc, #196]	@ (8001e88 <HAL_ADC_Start+0x194>)
 8001dc2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001dcc:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f003 031f 	and.w	r3, r3, #31
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d12a      	bne.n	8001e30 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a2b      	ldr	r2, [pc, #172]	@ (8001e8c <HAL_ADC_Start+0x198>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d015      	beq.n	8001e10 <HAL_ADC_Start+0x11c>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a29      	ldr	r2, [pc, #164]	@ (8001e90 <HAL_ADC_Start+0x19c>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d105      	bne.n	8001dfa <HAL_ADC_Start+0x106>
 8001dee:	4b26      	ldr	r3, [pc, #152]	@ (8001e88 <HAL_ADC_Start+0x194>)
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f003 031f 	and.w	r3, r3, #31
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d00a      	beq.n	8001e10 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a25      	ldr	r2, [pc, #148]	@ (8001e94 <HAL_ADC_Start+0x1a0>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d136      	bne.n	8001e72 <HAL_ADC_Start+0x17e>
 8001e04:	4b20      	ldr	r3, [pc, #128]	@ (8001e88 <HAL_ADC_Start+0x194>)
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f003 0310 	and.w	r3, r3, #16
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d130      	bne.n	8001e72 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d129      	bne.n	8001e72 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	689a      	ldr	r2, [r3, #8]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001e2c:	609a      	str	r2, [r3, #8]
 8001e2e:	e020      	b.n	8001e72 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a15      	ldr	r2, [pc, #84]	@ (8001e8c <HAL_ADC_Start+0x198>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d11b      	bne.n	8001e72 <HAL_ADC_Start+0x17e>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d114      	bne.n	8001e72 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	689a      	ldr	r2, [r3, #8]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001e56:	609a      	str	r2, [r3, #8]
 8001e58:	e00b      	b.n	8001e72 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e5e:	f043 0210 	orr.w	r2, r3, #16
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e6a:	f043 0201 	orr.w	r2, r3, #1
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001e72:	2300      	movs	r3, #0
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3714      	adds	r7, #20
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr
 8001e80:	20000000 	.word	0x20000000
 8001e84:	431bde83 	.word	0x431bde83
 8001e88:	40012300 	.word	0x40012300
 8001e8c:	40012000 	.word	0x40012000
 8001e90:	40012100 	.word	0x40012100
 8001e94:	40012200 	.word	0x40012200

08001e98 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001eb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001eb4:	d113      	bne.n	8001ede <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001ec0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ec4:	d10b      	bne.n	8001ede <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eca:	f043 0220 	orr.w	r2, r3, #32
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e063      	b.n	8001fa6 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ede:	f7ff fe95 	bl	8001c0c <HAL_GetTick>
 8001ee2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001ee4:	e021      	b.n	8001f2a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001eec:	d01d      	beq.n	8001f2a <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d007      	beq.n	8001f04 <HAL_ADC_PollForConversion+0x6c>
 8001ef4:	f7ff fe8a 	bl	8001c0c <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	683a      	ldr	r2, [r7, #0]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d212      	bcs.n	8001f2a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d00b      	beq.n	8001f2a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f16:	f043 0204 	orr.w	r2, r3, #4
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e03d      	b.n	8001fa6 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0302 	and.w	r3, r3, #2
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d1d6      	bne.n	8001ee6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f06f 0212 	mvn.w	r2, #18
 8001f40:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f46:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d123      	bne.n	8001fa4 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d11f      	bne.n	8001fa4 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f6a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d006      	beq.n	8001f80 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d111      	bne.n	8001fa4 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f84:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f90:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d105      	bne.n	8001fa4 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f9c:	f043 0201 	orr.w	r2, r3, #1
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3710      	adds	r7, #16
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}

08001fae <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	b083      	sub	sp, #12
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b085      	sub	sp, #20
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d101      	bne.n	8001fe4 <HAL_ADC_ConfigChannel+0x1c>
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	e105      	b.n	80021f0 <HAL_ADC_ConfigChannel+0x228>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2b09      	cmp	r3, #9
 8001ff2:	d925      	bls.n	8002040 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	68d9      	ldr	r1, [r3, #12]
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	461a      	mov	r2, r3
 8002002:	4613      	mov	r3, r2
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	4413      	add	r3, r2
 8002008:	3b1e      	subs	r3, #30
 800200a:	2207      	movs	r2, #7
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	43da      	mvns	r2, r3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	400a      	ands	r2, r1
 8002018:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	68d9      	ldr	r1, [r3, #12]
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	689a      	ldr	r2, [r3, #8]
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	b29b      	uxth	r3, r3
 800202a:	4618      	mov	r0, r3
 800202c:	4603      	mov	r3, r0
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	4403      	add	r3, r0
 8002032:	3b1e      	subs	r3, #30
 8002034:	409a      	lsls	r2, r3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	430a      	orrs	r2, r1
 800203c:	60da      	str	r2, [r3, #12]
 800203e:	e022      	b.n	8002086 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	6919      	ldr	r1, [r3, #16]
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	b29b      	uxth	r3, r3
 800204c:	461a      	mov	r2, r3
 800204e:	4613      	mov	r3, r2
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	4413      	add	r3, r2
 8002054:	2207      	movs	r2, #7
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	43da      	mvns	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	400a      	ands	r2, r1
 8002062:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	6919      	ldr	r1, [r3, #16]
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	689a      	ldr	r2, [r3, #8]
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	b29b      	uxth	r3, r3
 8002074:	4618      	mov	r0, r3
 8002076:	4603      	mov	r3, r0
 8002078:	005b      	lsls	r3, r3, #1
 800207a:	4403      	add	r3, r0
 800207c:	409a      	lsls	r2, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	430a      	orrs	r2, r1
 8002084:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	2b06      	cmp	r3, #6
 800208c:	d824      	bhi.n	80020d8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685a      	ldr	r2, [r3, #4]
 8002098:	4613      	mov	r3, r2
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	4413      	add	r3, r2
 800209e:	3b05      	subs	r3, #5
 80020a0:	221f      	movs	r2, #31
 80020a2:	fa02 f303 	lsl.w	r3, r2, r3
 80020a6:	43da      	mvns	r2, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	400a      	ands	r2, r1
 80020ae:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	4618      	mov	r0, r3
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	685a      	ldr	r2, [r3, #4]
 80020c2:	4613      	mov	r3, r2
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	4413      	add	r3, r2
 80020c8:	3b05      	subs	r3, #5
 80020ca:	fa00 f203 	lsl.w	r2, r0, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	430a      	orrs	r2, r1
 80020d4:	635a      	str	r2, [r3, #52]	@ 0x34
 80020d6:	e04c      	b.n	8002172 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	2b0c      	cmp	r3, #12
 80020de:	d824      	bhi.n	800212a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	685a      	ldr	r2, [r3, #4]
 80020ea:	4613      	mov	r3, r2
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	4413      	add	r3, r2
 80020f0:	3b23      	subs	r3, #35	@ 0x23
 80020f2:	221f      	movs	r2, #31
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	43da      	mvns	r2, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	400a      	ands	r2, r1
 8002100:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	b29b      	uxth	r3, r3
 800210e:	4618      	mov	r0, r3
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685a      	ldr	r2, [r3, #4]
 8002114:	4613      	mov	r3, r2
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	4413      	add	r3, r2
 800211a:	3b23      	subs	r3, #35	@ 0x23
 800211c:	fa00 f203 	lsl.w	r2, r0, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	430a      	orrs	r2, r1
 8002126:	631a      	str	r2, [r3, #48]	@ 0x30
 8002128:	e023      	b.n	8002172 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685a      	ldr	r2, [r3, #4]
 8002134:	4613      	mov	r3, r2
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	4413      	add	r3, r2
 800213a:	3b41      	subs	r3, #65	@ 0x41
 800213c:	221f      	movs	r2, #31
 800213e:	fa02 f303 	lsl.w	r3, r2, r3
 8002142:	43da      	mvns	r2, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	400a      	ands	r2, r1
 800214a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	b29b      	uxth	r3, r3
 8002158:	4618      	mov	r0, r3
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	685a      	ldr	r2, [r3, #4]
 800215e:	4613      	mov	r3, r2
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	4413      	add	r3, r2
 8002164:	3b41      	subs	r3, #65	@ 0x41
 8002166:	fa00 f203 	lsl.w	r2, r0, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	430a      	orrs	r2, r1
 8002170:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002172:	4b22      	ldr	r3, [pc, #136]	@ (80021fc <HAL_ADC_ConfigChannel+0x234>)
 8002174:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a21      	ldr	r2, [pc, #132]	@ (8002200 <HAL_ADC_ConfigChannel+0x238>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d109      	bne.n	8002194 <HAL_ADC_ConfigChannel+0x1cc>
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2b12      	cmp	r3, #18
 8002186:	d105      	bne.n	8002194 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a19      	ldr	r2, [pc, #100]	@ (8002200 <HAL_ADC_ConfigChannel+0x238>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d123      	bne.n	80021e6 <HAL_ADC_ConfigChannel+0x21e>
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2b10      	cmp	r3, #16
 80021a4:	d003      	beq.n	80021ae <HAL_ADC_ConfigChannel+0x1e6>
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	2b11      	cmp	r3, #17
 80021ac:	d11b      	bne.n	80021e6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2b10      	cmp	r3, #16
 80021c0:	d111      	bne.n	80021e6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80021c2:	4b10      	ldr	r3, [pc, #64]	@ (8002204 <HAL_ADC_ConfigChannel+0x23c>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a10      	ldr	r2, [pc, #64]	@ (8002208 <HAL_ADC_ConfigChannel+0x240>)
 80021c8:	fba2 2303 	umull	r2, r3, r2, r3
 80021cc:	0c9a      	lsrs	r2, r3, #18
 80021ce:	4613      	mov	r3, r2
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	4413      	add	r3, r2
 80021d4:	005b      	lsls	r3, r3, #1
 80021d6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80021d8:	e002      	b.n	80021e0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	3b01      	subs	r3, #1
 80021de:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d1f9      	bne.n	80021da <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80021ee:	2300      	movs	r3, #0
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3714      	adds	r7, #20
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr
 80021fc:	40012300 	.word	0x40012300
 8002200:	40012000 	.word	0x40012000
 8002204:	20000000 	.word	0x20000000
 8002208:	431bde83 	.word	0x431bde83

0800220c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800220c:	b480      	push	{r7}
 800220e:	b085      	sub	sp, #20
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002214:	4b79      	ldr	r3, [pc, #484]	@ (80023fc <ADC_Init+0x1f0>)
 8002216:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	685a      	ldr	r2, [r3, #4]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	431a      	orrs	r2, r3
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	685a      	ldr	r2, [r3, #4]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002240:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	6859      	ldr	r1, [r3, #4]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	691b      	ldr	r3, [r3, #16]
 800224c:	021a      	lsls	r2, r3, #8
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	430a      	orrs	r2, r1
 8002254:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	685a      	ldr	r2, [r3, #4]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002264:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	6859      	ldr	r1, [r3, #4]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689a      	ldr	r2, [r3, #8]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	430a      	orrs	r2, r1
 8002276:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	689a      	ldr	r2, [r3, #8]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002286:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	6899      	ldr	r1, [r3, #8]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	68da      	ldr	r2, [r3, #12]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	430a      	orrs	r2, r1
 8002298:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800229e:	4a58      	ldr	r2, [pc, #352]	@ (8002400 <ADC_Init+0x1f4>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d022      	beq.n	80022ea <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	689a      	ldr	r2, [r3, #8]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80022b2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	6899      	ldr	r1, [r3, #8]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	430a      	orrs	r2, r1
 80022c4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	689a      	ldr	r2, [r3, #8]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80022d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	6899      	ldr	r1, [r3, #8]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	430a      	orrs	r2, r1
 80022e6:	609a      	str	r2, [r3, #8]
 80022e8:	e00f      	b.n	800230a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	689a      	ldr	r2, [r3, #8]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80022f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	689a      	ldr	r2, [r3, #8]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002308:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	689a      	ldr	r2, [r3, #8]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f022 0202 	bic.w	r2, r2, #2
 8002318:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	6899      	ldr	r1, [r3, #8]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	7e1b      	ldrb	r3, [r3, #24]
 8002324:	005a      	lsls	r2, r3, #1
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	430a      	orrs	r2, r1
 800232c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d01b      	beq.n	8002370 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	685a      	ldr	r2, [r3, #4]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002346:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	685a      	ldr	r2, [r3, #4]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002356:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	6859      	ldr	r1, [r3, #4]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002362:	3b01      	subs	r3, #1
 8002364:	035a      	lsls	r2, r3, #13
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	430a      	orrs	r2, r1
 800236c:	605a      	str	r2, [r3, #4]
 800236e:	e007      	b.n	8002380 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	685a      	ldr	r2, [r3, #4]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800237e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800238e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	69db      	ldr	r3, [r3, #28]
 800239a:	3b01      	subs	r3, #1
 800239c:	051a      	lsls	r2, r3, #20
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	430a      	orrs	r2, r1
 80023a4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	689a      	ldr	r2, [r3, #8]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80023b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	6899      	ldr	r1, [r3, #8]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80023c2:	025a      	lsls	r2, r3, #9
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	430a      	orrs	r2, r1
 80023ca:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	689a      	ldr	r2, [r3, #8]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80023da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	6899      	ldr	r1, [r3, #8]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	695b      	ldr	r3, [r3, #20]
 80023e6:	029a      	lsls	r2, r3, #10
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	430a      	orrs	r2, r1
 80023ee:	609a      	str	r2, [r3, #8]
}
 80023f0:	bf00      	nop
 80023f2:	3714      	adds	r7, #20
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr
 80023fc:	40012300 	.word	0x40012300
 8002400:	0f000001 	.word	0x0f000001

08002404 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d101      	bne.n	8002416 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e0ed      	b.n	80025f2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f893 3020 	ldrb.w	r3, [r3, #32]
 800241c:	b2db      	uxtb	r3, r3
 800241e:	2b00      	cmp	r3, #0
 8002420:	d102      	bne.n	8002428 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f7ff f95e 	bl	80016e4 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f042 0201 	orr.w	r2, r2, #1
 8002436:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002438:	f7ff fbe8 	bl	8001c0c <HAL_GetTick>
 800243c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800243e:	e012      	b.n	8002466 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002440:	f7ff fbe4 	bl	8001c0c <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	2b0a      	cmp	r3, #10
 800244c:	d90b      	bls.n	8002466 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002452:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2205      	movs	r2, #5
 800245e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e0c5      	b.n	80025f2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f003 0301 	and.w	r3, r3, #1
 8002470:	2b00      	cmp	r3, #0
 8002472:	d0e5      	beq.n	8002440 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f022 0202 	bic.w	r2, r2, #2
 8002482:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002484:	f7ff fbc2 	bl	8001c0c <HAL_GetTick>
 8002488:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800248a:	e012      	b.n	80024b2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800248c:	f7ff fbbe 	bl	8001c0c <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	2b0a      	cmp	r3, #10
 8002498:	d90b      	bls.n	80024b2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800249e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2205      	movs	r2, #5
 80024aa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e09f      	b.n	80025f2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f003 0302 	and.w	r3, r3, #2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d1e5      	bne.n	800248c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	7e1b      	ldrb	r3, [r3, #24]
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d108      	bne.n	80024da <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80024d6:	601a      	str	r2, [r3, #0]
 80024d8:	e007      	b.n	80024ea <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80024e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	7e5b      	ldrb	r3, [r3, #25]
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d108      	bne.n	8002504 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002500:	601a      	str	r2, [r3, #0]
 8002502:	e007      	b.n	8002514 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002512:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	7e9b      	ldrb	r3, [r3, #26]
 8002518:	2b01      	cmp	r3, #1
 800251a:	d108      	bne.n	800252e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f042 0220 	orr.w	r2, r2, #32
 800252a:	601a      	str	r2, [r3, #0]
 800252c:	e007      	b.n	800253e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f022 0220 	bic.w	r2, r2, #32
 800253c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	7edb      	ldrb	r3, [r3, #27]
 8002542:	2b01      	cmp	r3, #1
 8002544:	d108      	bne.n	8002558 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f022 0210 	bic.w	r2, r2, #16
 8002554:	601a      	str	r2, [r3, #0]
 8002556:	e007      	b.n	8002568 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f042 0210 	orr.w	r2, r2, #16
 8002566:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	7f1b      	ldrb	r3, [r3, #28]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d108      	bne.n	8002582 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f042 0208 	orr.w	r2, r2, #8
 800257e:	601a      	str	r2, [r3, #0]
 8002580:	e007      	b.n	8002592 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f022 0208 	bic.w	r2, r2, #8
 8002590:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	7f5b      	ldrb	r3, [r3, #29]
 8002596:	2b01      	cmp	r3, #1
 8002598:	d108      	bne.n	80025ac <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f042 0204 	orr.w	r2, r2, #4
 80025a8:	601a      	str	r2, [r3, #0]
 80025aa:	e007      	b.n	80025bc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f022 0204 	bic.w	r2, r2, #4
 80025ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	689a      	ldr	r2, [r3, #8]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	431a      	orrs	r2, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	691b      	ldr	r3, [r3, #16]
 80025ca:	431a      	orrs	r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	695b      	ldr	r3, [r3, #20]
 80025d0:	ea42 0103 	orr.w	r1, r2, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	1e5a      	subs	r2, r3, #1
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	430a      	orrs	r2, r1
 80025e0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80025f0:	2300      	movs	r3, #0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3710      	adds	r7, #16
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
	...

080025fc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b087      	sub	sp, #28
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002612:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002614:	7cfb      	ldrb	r3, [r7, #19]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d003      	beq.n	8002622 <HAL_CAN_ConfigFilter+0x26>
 800261a:	7cfb      	ldrb	r3, [r7, #19]
 800261c:	2b02      	cmp	r3, #2
 800261e:	f040 80be 	bne.w	800279e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8002622:	4b65      	ldr	r3, [pc, #404]	@ (80027b8 <HAL_CAN_ConfigFilter+0x1bc>)
 8002624:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800262c:	f043 0201 	orr.w	r2, r3, #1
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800263c:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002650:	021b      	lsls	r3, r3, #8
 8002652:	431a      	orrs	r2, r3
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	695b      	ldr	r3, [r3, #20]
 800265e:	f003 031f 	and.w	r3, r3, #31
 8002662:	2201      	movs	r2, #1
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	43db      	mvns	r3, r3
 8002674:	401a      	ands	r2, r3
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	69db      	ldr	r3, [r3, #28]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d123      	bne.n	80026cc <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	43db      	mvns	r3, r3
 800268e:	401a      	ands	r2, r3
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80026a2:	683a      	ldr	r2, [r7, #0]
 80026a4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80026a6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	3248      	adds	r2, #72	@ 0x48
 80026ac:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80026c0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80026c2:	6979      	ldr	r1, [r7, #20]
 80026c4:	3348      	adds	r3, #72	@ 0x48
 80026c6:	00db      	lsls	r3, r3, #3
 80026c8:	440b      	add	r3, r1
 80026ca:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	69db      	ldr	r3, [r3, #28]
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d122      	bne.n	800271a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	431a      	orrs	r2, r3
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80026f0:	683a      	ldr	r2, [r7, #0]
 80026f2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80026f4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	3248      	adds	r2, #72	@ 0x48
 80026fa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800270e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002710:	6979      	ldr	r1, [r7, #20]
 8002712:	3348      	adds	r3, #72	@ 0x48
 8002714:	00db      	lsls	r3, r3, #3
 8002716:	440b      	add	r3, r1
 8002718:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	699b      	ldr	r3, [r3, #24]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d109      	bne.n	8002736 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	43db      	mvns	r3, r3
 800272c:	401a      	ands	r2, r3
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8002734:	e007      	b.n	8002746 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	431a      	orrs	r2, r3
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	691b      	ldr	r3, [r3, #16]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d109      	bne.n	8002762 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	43db      	mvns	r3, r3
 8002758:	401a      	ands	r2, r3
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8002760:	e007      	b.n	8002772 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	431a      	orrs	r2, r3
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	6a1b      	ldr	r3, [r3, #32]
 8002776:	2b01      	cmp	r3, #1
 8002778:	d107      	bne.n	800278a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	431a      	orrs	r2, r3
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002790:	f023 0201 	bic.w	r2, r3, #1
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800279a:	2300      	movs	r3, #0
 800279c:	e006      	b.n	80027ac <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027a2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
  }
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	371c      	adds	r7, #28
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr
 80027b8:	40006400 	.word	0x40006400

080027bc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d12e      	bne.n	800282e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2202      	movs	r2, #2
 80027d4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f022 0201 	bic.w	r2, r2, #1
 80027e6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80027e8:	f7ff fa10 	bl	8001c0c <HAL_GetTick>
 80027ec:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80027ee:	e012      	b.n	8002816 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80027f0:	f7ff fa0c 	bl	8001c0c <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b0a      	cmp	r3, #10
 80027fc:	d90b      	bls.n	8002816 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002802:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2205      	movs	r2, #5
 800280e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e012      	b.n	800283c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f003 0301 	and.w	r3, r3, #1
 8002820:	2b00      	cmp	r3, #0
 8002822:	d1e5      	bne.n	80027f0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800282a:	2300      	movs	r3, #0
 800282c:	e006      	b.n	800283c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002832:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
  }
}
 800283c:	4618      	mov	r0, r3
 800283e:	3710      	adds	r7, #16
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}

08002844 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002844:	b480      	push	{r7}
 8002846:	b089      	sub	sp, #36	@ 0x24
 8002848:	af00      	add	r7, sp, #0
 800284a:	60f8      	str	r0, [r7, #12]
 800284c:	60b9      	str	r1, [r7, #8]
 800284e:	607a      	str	r2, [r7, #4]
 8002850:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002858:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002862:	7ffb      	ldrb	r3, [r7, #31]
 8002864:	2b01      	cmp	r3, #1
 8002866:	d003      	beq.n	8002870 <HAL_CAN_AddTxMessage+0x2c>
 8002868:	7ffb      	ldrb	r3, [r7, #31]
 800286a:	2b02      	cmp	r3, #2
 800286c:	f040 80ad 	bne.w	80029ca <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d10a      	bne.n	8002890 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002880:	2b00      	cmp	r3, #0
 8002882:	d105      	bne.n	8002890 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800288a:	2b00      	cmp	r3, #0
 800288c:	f000 8095 	beq.w	80029ba <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	0e1b      	lsrs	r3, r3, #24
 8002894:	f003 0303 	and.w	r3, r3, #3
 8002898:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800289a:	2201      	movs	r2, #1
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	409a      	lsls	r2, r3
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d10d      	bne.n	80028c8 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80028b6:	68f9      	ldr	r1, [r7, #12]
 80028b8:	6809      	ldr	r1, [r1, #0]
 80028ba:	431a      	orrs	r2, r3
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	3318      	adds	r3, #24
 80028c0:	011b      	lsls	r3, r3, #4
 80028c2:	440b      	add	r3, r1
 80028c4:	601a      	str	r2, [r3, #0]
 80028c6:	e00f      	b.n	80028e8 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80028d2:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80028d8:	68f9      	ldr	r1, [r7, #12]
 80028da:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80028dc:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	3318      	adds	r3, #24
 80028e2:	011b      	lsls	r3, r3, #4
 80028e4:	440b      	add	r3, r1
 80028e6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6819      	ldr	r1, [r3, #0]
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	691a      	ldr	r2, [r3, #16]
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	3318      	adds	r3, #24
 80028f4:	011b      	lsls	r3, r3, #4
 80028f6:	440b      	add	r3, r1
 80028f8:	3304      	adds	r3, #4
 80028fa:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	7d1b      	ldrb	r3, [r3, #20]
 8002900:	2b01      	cmp	r3, #1
 8002902:	d111      	bne.n	8002928 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	3318      	adds	r3, #24
 800290c:	011b      	lsls	r3, r3, #4
 800290e:	4413      	add	r3, r2
 8002910:	3304      	adds	r3, #4
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	68fa      	ldr	r2, [r7, #12]
 8002916:	6811      	ldr	r1, [r2, #0]
 8002918:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	3318      	adds	r3, #24
 8002920:	011b      	lsls	r3, r3, #4
 8002922:	440b      	add	r3, r1
 8002924:	3304      	adds	r3, #4
 8002926:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	3307      	adds	r3, #7
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	061a      	lsls	r2, r3, #24
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	3306      	adds	r3, #6
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	041b      	lsls	r3, r3, #16
 8002938:	431a      	orrs	r2, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	3305      	adds	r3, #5
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	021b      	lsls	r3, r3, #8
 8002942:	4313      	orrs	r3, r2
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	3204      	adds	r2, #4
 8002948:	7812      	ldrb	r2, [r2, #0]
 800294a:	4610      	mov	r0, r2
 800294c:	68fa      	ldr	r2, [r7, #12]
 800294e:	6811      	ldr	r1, [r2, #0]
 8002950:	ea43 0200 	orr.w	r2, r3, r0
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	011b      	lsls	r3, r3, #4
 8002958:	440b      	add	r3, r1
 800295a:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800295e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	3303      	adds	r3, #3
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	061a      	lsls	r2, r3, #24
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	3302      	adds	r3, #2
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	041b      	lsls	r3, r3, #16
 8002970:	431a      	orrs	r2, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	3301      	adds	r3, #1
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	021b      	lsls	r3, r3, #8
 800297a:	4313      	orrs	r3, r2
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	7812      	ldrb	r2, [r2, #0]
 8002980:	4610      	mov	r0, r2
 8002982:	68fa      	ldr	r2, [r7, #12]
 8002984:	6811      	ldr	r1, [r2, #0]
 8002986:	ea43 0200 	orr.w	r2, r3, r0
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	011b      	lsls	r3, r3, #4
 800298e:	440b      	add	r3, r1
 8002990:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002994:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	3318      	adds	r3, #24
 800299e:	011b      	lsls	r3, r3, #4
 80029a0:	4413      	add	r3, r2
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	68fa      	ldr	r2, [r7, #12]
 80029a6:	6811      	ldr	r1, [r2, #0]
 80029a8:	f043 0201 	orr.w	r2, r3, #1
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	3318      	adds	r3, #24
 80029b0:	011b      	lsls	r3, r3, #4
 80029b2:	440b      	add	r3, r1
 80029b4:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80029b6:	2300      	movs	r3, #0
 80029b8:	e00e      	b.n	80029d8 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029be:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e006      	b.n	80029d8 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ce:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
  }
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3724      	adds	r7, #36	@ 0x24
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b085      	sub	sp, #20
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029f4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80029f6:	7bfb      	ldrb	r3, [r7, #15]
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d002      	beq.n	8002a02 <HAL_CAN_ActivateNotification+0x1e>
 80029fc:	7bfb      	ldrb	r3, [r7, #15]
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d109      	bne.n	8002a16 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	6959      	ldr	r1, [r3, #20]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	683a      	ldr	r2, [r7, #0]
 8002a0e:	430a      	orrs	r2, r1
 8002a10:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002a12:	2300      	movs	r3, #0
 8002a14:	e006      	b.n	8002a24 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a1a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
  }
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3714      	adds	r7, #20
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b08a      	sub	sp, #40	@ 0x28
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	695b      	ldr	r3, [r3, #20]
 8002a42:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002a6c:	6a3b      	ldr	r3, [r7, #32]
 8002a6e:	f003 0301 	and.w	r3, r3, #1
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d07c      	beq.n	8002b70 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	f003 0301 	and.w	r3, r3, #1
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d023      	beq.n	8002ac8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2201      	movs	r2, #1
 8002a86:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d003      	beq.n	8002a9a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f000 f983 	bl	8002d9e <HAL_CAN_TxMailbox0CompleteCallback>
 8002a98:	e016      	b.n	8002ac8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	f003 0304 	and.w	r3, r3, #4
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d004      	beq.n	8002aae <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002aaa:	627b      	str	r3, [r7, #36]	@ 0x24
 8002aac:	e00c      	b.n	8002ac8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	f003 0308 	and.w	r3, r3, #8
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d004      	beq.n	8002ac2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aba:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002abe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ac0:	e002      	b.n	8002ac8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f000 f989 	bl	8002dda <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d024      	beq.n	8002b1c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002ada:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d003      	beq.n	8002aee <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 f963 	bl	8002db2 <HAL_CAN_TxMailbox1CompleteCallback>
 8002aec:	e016      	b.n	8002b1c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d004      	beq.n	8002b02 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002afa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002afe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b00:	e00c      	b.n	8002b1c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d004      	beq.n	8002b16 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b0e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b12:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b14:	e002      	b.n	8002b1c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 f969 	bl	8002dee <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002b1c:	69bb      	ldr	r3, [r7, #24]
 8002b1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d024      	beq.n	8002b70 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002b2e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002b30:	69bb      	ldr	r3, [r7, #24]
 8002b32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d003      	beq.n	8002b42 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f000 f943 	bl	8002dc6 <HAL_CAN_TxMailbox2CompleteCallback>
 8002b40:	e016      	b.n	8002b70 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d004      	beq.n	8002b56 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b52:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b54:	e00c      	b.n	8002b70 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002b56:	69bb      	ldr	r3, [r7, #24]
 8002b58:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d004      	beq.n	8002b6a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b66:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b68:	e002      	b.n	8002b70 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 f949 	bl	8002e02 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002b70:	6a3b      	ldr	r3, [r7, #32]
 8002b72:	f003 0308 	and.w	r3, r3, #8
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d00c      	beq.n	8002b94 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	f003 0310 	and.w	r3, r3, #16
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d007      	beq.n	8002b94 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b86:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b8a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2210      	movs	r2, #16
 8002b92:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002b94:	6a3b      	ldr	r3, [r7, #32]
 8002b96:	f003 0304 	and.w	r3, r3, #4
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d00b      	beq.n	8002bb6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	f003 0308 	and.w	r3, r3, #8
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d006      	beq.n	8002bb6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2208      	movs	r2, #8
 8002bae:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f000 f93a 	bl	8002e2a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002bb6:	6a3b      	ldr	r3, [r7, #32]
 8002bb8:	f003 0302 	and.w	r3, r3, #2
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d009      	beq.n	8002bd4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	f003 0303 	and.w	r3, r3, #3
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d002      	beq.n	8002bd4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f000 f921 	bl	8002e16 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002bd4:	6a3b      	ldr	r3, [r7, #32]
 8002bd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d00c      	beq.n	8002bf8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	f003 0310 	and.w	r3, r3, #16
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d007      	beq.n	8002bf8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002bee:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2210      	movs	r2, #16
 8002bf6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002bf8:	6a3b      	ldr	r3, [r7, #32]
 8002bfa:	f003 0320 	and.w	r3, r3, #32
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d00b      	beq.n	8002c1a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	f003 0308 	and.w	r3, r3, #8
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d006      	beq.n	8002c1a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2208      	movs	r2, #8
 8002c12:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f000 f91c 	bl	8002e52 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002c1a:	6a3b      	ldr	r3, [r7, #32]
 8002c1c:	f003 0310 	and.w	r3, r3, #16
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d009      	beq.n	8002c38 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	f003 0303 	and.w	r3, r3, #3
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d002      	beq.n	8002c38 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f000 f903 	bl	8002e3e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002c38:	6a3b      	ldr	r3, [r7, #32]
 8002c3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d00b      	beq.n	8002c5a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	f003 0310 	and.w	r3, r3, #16
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d006      	beq.n	8002c5a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2210      	movs	r2, #16
 8002c52:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f000 f906 	bl	8002e66 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002c5a:	6a3b      	ldr	r3, [r7, #32]
 8002c5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d00b      	beq.n	8002c7c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	f003 0308 	and.w	r3, r3, #8
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d006      	beq.n	8002c7c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	2208      	movs	r2, #8
 8002c74:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f000 f8ff 	bl	8002e7a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002c7c:	6a3b      	ldr	r3, [r7, #32]
 8002c7e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d07b      	beq.n	8002d7e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	f003 0304 	and.w	r3, r3, #4
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d072      	beq.n	8002d76 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002c90:	6a3b      	ldr	r3, [r7, #32]
 8002c92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d008      	beq.n	8002cac <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d003      	beq.n	8002cac <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca6:	f043 0301 	orr.w	r3, r3, #1
 8002caa:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002cac:	6a3b      	ldr	r3, [r7, #32]
 8002cae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d008      	beq.n	8002cc8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d003      	beq.n	8002cc8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc2:	f043 0302 	orr.w	r3, r3, #2
 8002cc6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002cc8:	6a3b      	ldr	r3, [r7, #32]
 8002cca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d008      	beq.n	8002ce4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d003      	beq.n	8002ce4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cde:	f043 0304 	orr.w	r3, r3, #4
 8002ce2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002ce4:	6a3b      	ldr	r3, [r7, #32]
 8002ce6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d043      	beq.n	8002d76 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d03e      	beq.n	8002d76 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002cfe:	2b60      	cmp	r3, #96	@ 0x60
 8002d00:	d02b      	beq.n	8002d5a <HAL_CAN_IRQHandler+0x32a>
 8002d02:	2b60      	cmp	r3, #96	@ 0x60
 8002d04:	d82e      	bhi.n	8002d64 <HAL_CAN_IRQHandler+0x334>
 8002d06:	2b50      	cmp	r3, #80	@ 0x50
 8002d08:	d022      	beq.n	8002d50 <HAL_CAN_IRQHandler+0x320>
 8002d0a:	2b50      	cmp	r3, #80	@ 0x50
 8002d0c:	d82a      	bhi.n	8002d64 <HAL_CAN_IRQHandler+0x334>
 8002d0e:	2b40      	cmp	r3, #64	@ 0x40
 8002d10:	d019      	beq.n	8002d46 <HAL_CAN_IRQHandler+0x316>
 8002d12:	2b40      	cmp	r3, #64	@ 0x40
 8002d14:	d826      	bhi.n	8002d64 <HAL_CAN_IRQHandler+0x334>
 8002d16:	2b30      	cmp	r3, #48	@ 0x30
 8002d18:	d010      	beq.n	8002d3c <HAL_CAN_IRQHandler+0x30c>
 8002d1a:	2b30      	cmp	r3, #48	@ 0x30
 8002d1c:	d822      	bhi.n	8002d64 <HAL_CAN_IRQHandler+0x334>
 8002d1e:	2b10      	cmp	r3, #16
 8002d20:	d002      	beq.n	8002d28 <HAL_CAN_IRQHandler+0x2f8>
 8002d22:	2b20      	cmp	r3, #32
 8002d24:	d005      	beq.n	8002d32 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002d26:	e01d      	b.n	8002d64 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d2a:	f043 0308 	orr.w	r3, r3, #8
 8002d2e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002d30:	e019      	b.n	8002d66 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d34:	f043 0310 	orr.w	r3, r3, #16
 8002d38:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002d3a:	e014      	b.n	8002d66 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d3e:	f043 0320 	orr.w	r3, r3, #32
 8002d42:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002d44:	e00f      	b.n	8002d66 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002d4c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002d4e:	e00a      	b.n	8002d66 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d56:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002d58:	e005      	b.n	8002d66 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d60:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002d62:	e000      	b.n	8002d66 <HAL_CAN_IRQHandler+0x336>
            break;
 8002d64:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	699a      	ldr	r2, [r3, #24]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002d74:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2204      	movs	r2, #4
 8002d7c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d008      	beq.n	8002d96 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d8a:	431a      	orrs	r2, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f000 f87c 	bl	8002e8e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002d96:	bf00      	nop
 8002d98:	3728      	adds	r7, #40	@ 0x28
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002d9e:	b480      	push	{r7}
 8002da0:	b083      	sub	sp, #12
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002da6:	bf00      	nop
 8002da8:	370c      	adds	r7, #12
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr

08002db2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002db2:	b480      	push	{r7}
 8002db4:	b083      	sub	sp, #12
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002dba:	bf00      	nop
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr

08002dc6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002dc6:	b480      	push	{r7}
 8002dc8:	b083      	sub	sp, #12
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002dce:	bf00      	nop
 8002dd0:	370c      	adds	r7, #12
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr

08002dda <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002dda:	b480      	push	{r7}
 8002ddc:	b083      	sub	sp, #12
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002de2:	bf00      	nop
 8002de4:	370c      	adds	r7, #12
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr

08002dee <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002dee:	b480      	push	{r7}
 8002df0:	b083      	sub	sp, #12
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002df6:	bf00      	nop
 8002df8:	370c      	adds	r7, #12
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr

08002e02 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002e02:	b480      	push	{r7}
 8002e04:	b083      	sub	sp, #12
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002e0a:	bf00      	nop
 8002e0c:	370c      	adds	r7, #12
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr

08002e16 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002e16:	b480      	push	{r7}
 8002e18:	b083      	sub	sp, #12
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002e1e:	bf00      	nop
 8002e20:	370c      	adds	r7, #12
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr

08002e2a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002e2a:	b480      	push	{r7}
 8002e2c:	b083      	sub	sp, #12
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002e32:	bf00      	nop
 8002e34:	370c      	adds	r7, #12
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr

08002e3e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002e3e:	b480      	push	{r7}
 8002e40:	b083      	sub	sp, #12
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002e46:	bf00      	nop
 8002e48:	370c      	adds	r7, #12
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr

08002e52 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002e52:	b480      	push	{r7}
 8002e54:	b083      	sub	sp, #12
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002e5a:	bf00      	nop
 8002e5c:	370c      	adds	r7, #12
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr

08002e66 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002e66:	b480      	push	{r7}
 8002e68:	b083      	sub	sp, #12
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002e6e:	bf00      	nop
 8002e70:	370c      	adds	r7, #12
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr

08002e7a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002e7a:	b480      	push	{r7}
 8002e7c:	b083      	sub	sp, #12
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002e82:	bf00      	nop
 8002e84:	370c      	adds	r7, #12
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr

08002e8e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002e8e:	b480      	push	{r7}
 8002e90:	b083      	sub	sp, #12
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002e96:	bf00      	nop
 8002e98:	370c      	adds	r7, #12
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr
	...

08002ea4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b085      	sub	sp, #20
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f003 0307 	and.w	r3, r3, #7
 8002eb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002eb4:	4b0c      	ldr	r3, [pc, #48]	@ (8002ee8 <__NVIC_SetPriorityGrouping+0x44>)
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002eba:	68ba      	ldr	r2, [r7, #8]
 8002ebc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ecc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ed0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ed4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ed6:	4a04      	ldr	r2, [pc, #16]	@ (8002ee8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	60d3      	str	r3, [r2, #12]
}
 8002edc:	bf00      	nop
 8002ede:	3714      	adds	r7, #20
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr
 8002ee8:	e000ed00 	.word	0xe000ed00

08002eec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002eec:	b480      	push	{r7}
 8002eee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ef0:	4b04      	ldr	r3, [pc, #16]	@ (8002f04 <__NVIC_GetPriorityGrouping+0x18>)
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	0a1b      	lsrs	r3, r3, #8
 8002ef6:	f003 0307 	and.w	r3, r3, #7
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr
 8002f04:	e000ed00 	.word	0xe000ed00

08002f08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	4603      	mov	r3, r0
 8002f10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	db0b      	blt.n	8002f32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f1a:	79fb      	ldrb	r3, [r7, #7]
 8002f1c:	f003 021f 	and.w	r2, r3, #31
 8002f20:	4907      	ldr	r1, [pc, #28]	@ (8002f40 <__NVIC_EnableIRQ+0x38>)
 8002f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f26:	095b      	lsrs	r3, r3, #5
 8002f28:	2001      	movs	r0, #1
 8002f2a:	fa00 f202 	lsl.w	r2, r0, r2
 8002f2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f32:	bf00      	nop
 8002f34:	370c      	adds	r7, #12
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	e000e100 	.word	0xe000e100

08002f44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	6039      	str	r1, [r7, #0]
 8002f4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	db0a      	blt.n	8002f6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	b2da      	uxtb	r2, r3
 8002f5c:	490c      	ldr	r1, [pc, #48]	@ (8002f90 <__NVIC_SetPriority+0x4c>)
 8002f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f62:	0112      	lsls	r2, r2, #4
 8002f64:	b2d2      	uxtb	r2, r2
 8002f66:	440b      	add	r3, r1
 8002f68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f6c:	e00a      	b.n	8002f84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	b2da      	uxtb	r2, r3
 8002f72:	4908      	ldr	r1, [pc, #32]	@ (8002f94 <__NVIC_SetPriority+0x50>)
 8002f74:	79fb      	ldrb	r3, [r7, #7]
 8002f76:	f003 030f 	and.w	r3, r3, #15
 8002f7a:	3b04      	subs	r3, #4
 8002f7c:	0112      	lsls	r2, r2, #4
 8002f7e:	b2d2      	uxtb	r2, r2
 8002f80:	440b      	add	r3, r1
 8002f82:	761a      	strb	r2, [r3, #24]
}
 8002f84:	bf00      	nop
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr
 8002f90:	e000e100 	.word	0xe000e100
 8002f94:	e000ed00 	.word	0xe000ed00

08002f98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b089      	sub	sp, #36	@ 0x24
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	60b9      	str	r1, [r7, #8]
 8002fa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f003 0307 	and.w	r3, r3, #7
 8002faa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	f1c3 0307 	rsb	r3, r3, #7
 8002fb2:	2b04      	cmp	r3, #4
 8002fb4:	bf28      	it	cs
 8002fb6:	2304      	movcs	r3, #4
 8002fb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	3304      	adds	r3, #4
 8002fbe:	2b06      	cmp	r3, #6
 8002fc0:	d902      	bls.n	8002fc8 <NVIC_EncodePriority+0x30>
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	3b03      	subs	r3, #3
 8002fc6:	e000      	b.n	8002fca <NVIC_EncodePriority+0x32>
 8002fc8:	2300      	movs	r3, #0
 8002fca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fcc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd6:	43da      	mvns	r2, r3
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	401a      	ands	r2, r3
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fe0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8002fea:	43d9      	mvns	r1, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ff0:	4313      	orrs	r3, r2
         );
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3724      	adds	r7, #36	@ 0x24
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
	...

08003000 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	3b01      	subs	r3, #1
 800300c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003010:	d301      	bcc.n	8003016 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003012:	2301      	movs	r3, #1
 8003014:	e00f      	b.n	8003036 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003016:	4a0a      	ldr	r2, [pc, #40]	@ (8003040 <SysTick_Config+0x40>)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	3b01      	subs	r3, #1
 800301c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800301e:	210f      	movs	r1, #15
 8003020:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003024:	f7ff ff8e 	bl	8002f44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003028:	4b05      	ldr	r3, [pc, #20]	@ (8003040 <SysTick_Config+0x40>)
 800302a:	2200      	movs	r2, #0
 800302c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800302e:	4b04      	ldr	r3, [pc, #16]	@ (8003040 <SysTick_Config+0x40>)
 8003030:	2207      	movs	r2, #7
 8003032:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	3708      	adds	r7, #8
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	e000e010 	.word	0xe000e010

08003044 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f7ff ff29 	bl	8002ea4 <__NVIC_SetPriorityGrouping>
}
 8003052:	bf00      	nop
 8003054:	3708      	adds	r7, #8
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800305a:	b580      	push	{r7, lr}
 800305c:	b086      	sub	sp, #24
 800305e:	af00      	add	r7, sp, #0
 8003060:	4603      	mov	r3, r0
 8003062:	60b9      	str	r1, [r7, #8]
 8003064:	607a      	str	r2, [r7, #4]
 8003066:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003068:	2300      	movs	r3, #0
 800306a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800306c:	f7ff ff3e 	bl	8002eec <__NVIC_GetPriorityGrouping>
 8003070:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	68b9      	ldr	r1, [r7, #8]
 8003076:	6978      	ldr	r0, [r7, #20]
 8003078:	f7ff ff8e 	bl	8002f98 <NVIC_EncodePriority>
 800307c:	4602      	mov	r2, r0
 800307e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003082:	4611      	mov	r1, r2
 8003084:	4618      	mov	r0, r3
 8003086:	f7ff ff5d 	bl	8002f44 <__NVIC_SetPriority>
}
 800308a:	bf00      	nop
 800308c:	3718      	adds	r7, #24
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}

08003092 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003092:	b580      	push	{r7, lr}
 8003094:	b082      	sub	sp, #8
 8003096:	af00      	add	r7, sp, #0
 8003098:	4603      	mov	r3, r0
 800309a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800309c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7ff ff31 	bl	8002f08 <__NVIC_EnableIRQ>
}
 80030a6:	bf00      	nop
 80030a8:	3708      	adds	r7, #8
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}

080030ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030ae:	b580      	push	{r7, lr}
 80030b0:	b082      	sub	sp, #8
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f7ff ffa2 	bl	8003000 <SysTick_Config>
 80030bc:	4603      	mov	r3, r0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3708      	adds	r7, #8
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
	...

080030c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b089      	sub	sp, #36	@ 0x24
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80030d2:	2300      	movs	r3, #0
 80030d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80030d6:	2300      	movs	r3, #0
 80030d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80030da:	2300      	movs	r3, #0
 80030dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030de:	2300      	movs	r3, #0
 80030e0:	61fb      	str	r3, [r7, #28]
 80030e2:	e16b      	b.n	80033bc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80030e4:	2201      	movs	r2, #1
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	697a      	ldr	r2, [r7, #20]
 80030f4:	4013      	ands	r3, r2
 80030f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80030f8:	693a      	ldr	r2, [r7, #16]
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	f040 815a 	bne.w	80033b6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	f003 0303 	and.w	r3, r3, #3
 800310a:	2b01      	cmp	r3, #1
 800310c:	d005      	beq.n	800311a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003116:	2b02      	cmp	r3, #2
 8003118:	d130      	bne.n	800317c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	005b      	lsls	r3, r3, #1
 8003124:	2203      	movs	r2, #3
 8003126:	fa02 f303 	lsl.w	r3, r2, r3
 800312a:	43db      	mvns	r3, r3
 800312c:	69ba      	ldr	r2, [r7, #24]
 800312e:	4013      	ands	r3, r2
 8003130:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	68da      	ldr	r2, [r3, #12]
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	005b      	lsls	r3, r3, #1
 800313a:	fa02 f303 	lsl.w	r3, r2, r3
 800313e:	69ba      	ldr	r2, [r7, #24]
 8003140:	4313      	orrs	r3, r2
 8003142:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	69ba      	ldr	r2, [r7, #24]
 8003148:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003150:	2201      	movs	r2, #1
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	fa02 f303 	lsl.w	r3, r2, r3
 8003158:	43db      	mvns	r3, r3
 800315a:	69ba      	ldr	r2, [r7, #24]
 800315c:	4013      	ands	r3, r2
 800315e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	091b      	lsrs	r3, r3, #4
 8003166:	f003 0201 	and.w	r2, r3, #1
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	fa02 f303 	lsl.w	r3, r2, r3
 8003170:	69ba      	ldr	r2, [r7, #24]
 8003172:	4313      	orrs	r3, r2
 8003174:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	69ba      	ldr	r2, [r7, #24]
 800317a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f003 0303 	and.w	r3, r3, #3
 8003184:	2b03      	cmp	r3, #3
 8003186:	d017      	beq.n	80031b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	005b      	lsls	r3, r3, #1
 8003192:	2203      	movs	r2, #3
 8003194:	fa02 f303 	lsl.w	r3, r2, r3
 8003198:	43db      	mvns	r3, r3
 800319a:	69ba      	ldr	r2, [r7, #24]
 800319c:	4013      	ands	r3, r2
 800319e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	689a      	ldr	r2, [r3, #8]
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	005b      	lsls	r3, r3, #1
 80031a8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ac:	69ba      	ldr	r2, [r7, #24]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	69ba      	ldr	r2, [r7, #24]
 80031b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f003 0303 	and.w	r3, r3, #3
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d123      	bne.n	800320c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	08da      	lsrs	r2, r3, #3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	3208      	adds	r2, #8
 80031cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	f003 0307 	and.w	r3, r3, #7
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	220f      	movs	r2, #15
 80031dc:	fa02 f303 	lsl.w	r3, r2, r3
 80031e0:	43db      	mvns	r3, r3
 80031e2:	69ba      	ldr	r2, [r7, #24]
 80031e4:	4013      	ands	r3, r2
 80031e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	691a      	ldr	r2, [r3, #16]
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	f003 0307 	and.w	r3, r3, #7
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	fa02 f303 	lsl.w	r3, r2, r3
 80031f8:	69ba      	ldr	r2, [r7, #24]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	08da      	lsrs	r2, r3, #3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	3208      	adds	r2, #8
 8003206:	69b9      	ldr	r1, [r7, #24]
 8003208:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	005b      	lsls	r3, r3, #1
 8003216:	2203      	movs	r2, #3
 8003218:	fa02 f303 	lsl.w	r3, r2, r3
 800321c:	43db      	mvns	r3, r3
 800321e:	69ba      	ldr	r2, [r7, #24]
 8003220:	4013      	ands	r3, r2
 8003222:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f003 0203 	and.w	r2, r3, #3
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	005b      	lsls	r3, r3, #1
 8003230:	fa02 f303 	lsl.w	r3, r2, r3
 8003234:	69ba      	ldr	r2, [r7, #24]
 8003236:	4313      	orrs	r3, r2
 8003238:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	69ba      	ldr	r2, [r7, #24]
 800323e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003248:	2b00      	cmp	r3, #0
 800324a:	f000 80b4 	beq.w	80033b6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800324e:	2300      	movs	r3, #0
 8003250:	60fb      	str	r3, [r7, #12]
 8003252:	4b60      	ldr	r3, [pc, #384]	@ (80033d4 <HAL_GPIO_Init+0x30c>)
 8003254:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003256:	4a5f      	ldr	r2, [pc, #380]	@ (80033d4 <HAL_GPIO_Init+0x30c>)
 8003258:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800325c:	6453      	str	r3, [r2, #68]	@ 0x44
 800325e:	4b5d      	ldr	r3, [pc, #372]	@ (80033d4 <HAL_GPIO_Init+0x30c>)
 8003260:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003262:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003266:	60fb      	str	r3, [r7, #12]
 8003268:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800326a:	4a5b      	ldr	r2, [pc, #364]	@ (80033d8 <HAL_GPIO_Init+0x310>)
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	089b      	lsrs	r3, r3, #2
 8003270:	3302      	adds	r3, #2
 8003272:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003276:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	f003 0303 	and.w	r3, r3, #3
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	220f      	movs	r2, #15
 8003282:	fa02 f303 	lsl.w	r3, r2, r3
 8003286:	43db      	mvns	r3, r3
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	4013      	ands	r3, r2
 800328c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a52      	ldr	r2, [pc, #328]	@ (80033dc <HAL_GPIO_Init+0x314>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d02b      	beq.n	80032ee <HAL_GPIO_Init+0x226>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a51      	ldr	r2, [pc, #324]	@ (80033e0 <HAL_GPIO_Init+0x318>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d025      	beq.n	80032ea <HAL_GPIO_Init+0x222>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4a50      	ldr	r2, [pc, #320]	@ (80033e4 <HAL_GPIO_Init+0x31c>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d01f      	beq.n	80032e6 <HAL_GPIO_Init+0x21e>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a4f      	ldr	r2, [pc, #316]	@ (80033e8 <HAL_GPIO_Init+0x320>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d019      	beq.n	80032e2 <HAL_GPIO_Init+0x21a>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a4e      	ldr	r2, [pc, #312]	@ (80033ec <HAL_GPIO_Init+0x324>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d013      	beq.n	80032de <HAL_GPIO_Init+0x216>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a4d      	ldr	r2, [pc, #308]	@ (80033f0 <HAL_GPIO_Init+0x328>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d00d      	beq.n	80032da <HAL_GPIO_Init+0x212>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a4c      	ldr	r2, [pc, #304]	@ (80033f4 <HAL_GPIO_Init+0x32c>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d007      	beq.n	80032d6 <HAL_GPIO_Init+0x20e>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a4b      	ldr	r2, [pc, #300]	@ (80033f8 <HAL_GPIO_Init+0x330>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d101      	bne.n	80032d2 <HAL_GPIO_Init+0x20a>
 80032ce:	2307      	movs	r3, #7
 80032d0:	e00e      	b.n	80032f0 <HAL_GPIO_Init+0x228>
 80032d2:	2308      	movs	r3, #8
 80032d4:	e00c      	b.n	80032f0 <HAL_GPIO_Init+0x228>
 80032d6:	2306      	movs	r3, #6
 80032d8:	e00a      	b.n	80032f0 <HAL_GPIO_Init+0x228>
 80032da:	2305      	movs	r3, #5
 80032dc:	e008      	b.n	80032f0 <HAL_GPIO_Init+0x228>
 80032de:	2304      	movs	r3, #4
 80032e0:	e006      	b.n	80032f0 <HAL_GPIO_Init+0x228>
 80032e2:	2303      	movs	r3, #3
 80032e4:	e004      	b.n	80032f0 <HAL_GPIO_Init+0x228>
 80032e6:	2302      	movs	r3, #2
 80032e8:	e002      	b.n	80032f0 <HAL_GPIO_Init+0x228>
 80032ea:	2301      	movs	r3, #1
 80032ec:	e000      	b.n	80032f0 <HAL_GPIO_Init+0x228>
 80032ee:	2300      	movs	r3, #0
 80032f0:	69fa      	ldr	r2, [r7, #28]
 80032f2:	f002 0203 	and.w	r2, r2, #3
 80032f6:	0092      	lsls	r2, r2, #2
 80032f8:	4093      	lsls	r3, r2
 80032fa:	69ba      	ldr	r2, [r7, #24]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003300:	4935      	ldr	r1, [pc, #212]	@ (80033d8 <HAL_GPIO_Init+0x310>)
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	089b      	lsrs	r3, r3, #2
 8003306:	3302      	adds	r3, #2
 8003308:	69ba      	ldr	r2, [r7, #24]
 800330a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800330e:	4b3b      	ldr	r3, [pc, #236]	@ (80033fc <HAL_GPIO_Init+0x334>)
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	43db      	mvns	r3, r3
 8003318:	69ba      	ldr	r2, [r7, #24]
 800331a:	4013      	ands	r3, r2
 800331c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d003      	beq.n	8003332 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800332a:	69ba      	ldr	r2, [r7, #24]
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	4313      	orrs	r3, r2
 8003330:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003332:	4a32      	ldr	r2, [pc, #200]	@ (80033fc <HAL_GPIO_Init+0x334>)
 8003334:	69bb      	ldr	r3, [r7, #24]
 8003336:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003338:	4b30      	ldr	r3, [pc, #192]	@ (80033fc <HAL_GPIO_Init+0x334>)
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	43db      	mvns	r3, r3
 8003342:	69ba      	ldr	r2, [r7, #24]
 8003344:	4013      	ands	r3, r2
 8003346:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d003      	beq.n	800335c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003354:	69ba      	ldr	r2, [r7, #24]
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	4313      	orrs	r3, r2
 800335a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800335c:	4a27      	ldr	r2, [pc, #156]	@ (80033fc <HAL_GPIO_Init+0x334>)
 800335e:	69bb      	ldr	r3, [r7, #24]
 8003360:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003362:	4b26      	ldr	r3, [pc, #152]	@ (80033fc <HAL_GPIO_Init+0x334>)
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	43db      	mvns	r3, r3
 800336c:	69ba      	ldr	r2, [r7, #24]
 800336e:	4013      	ands	r3, r2
 8003370:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d003      	beq.n	8003386 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800337e:	69ba      	ldr	r2, [r7, #24]
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	4313      	orrs	r3, r2
 8003384:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003386:	4a1d      	ldr	r2, [pc, #116]	@ (80033fc <HAL_GPIO_Init+0x334>)
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800338c:	4b1b      	ldr	r3, [pc, #108]	@ (80033fc <HAL_GPIO_Init+0x334>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	43db      	mvns	r3, r3
 8003396:	69ba      	ldr	r2, [r7, #24]
 8003398:	4013      	ands	r3, r2
 800339a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d003      	beq.n	80033b0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80033a8:	69ba      	ldr	r2, [r7, #24]
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033b0:	4a12      	ldr	r2, [pc, #72]	@ (80033fc <HAL_GPIO_Init+0x334>)
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	3301      	adds	r3, #1
 80033ba:	61fb      	str	r3, [r7, #28]
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	2b0f      	cmp	r3, #15
 80033c0:	f67f ae90 	bls.w	80030e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80033c4:	bf00      	nop
 80033c6:	bf00      	nop
 80033c8:	3724      	adds	r7, #36	@ 0x24
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr
 80033d2:	bf00      	nop
 80033d4:	40023800 	.word	0x40023800
 80033d8:	40013800 	.word	0x40013800
 80033dc:	40020000 	.word	0x40020000
 80033e0:	40020400 	.word	0x40020400
 80033e4:	40020800 	.word	0x40020800
 80033e8:	40020c00 	.word	0x40020c00
 80033ec:	40021000 	.word	0x40021000
 80033f0:	40021400 	.word	0x40021400
 80033f4:	40021800 	.word	0x40021800
 80033f8:	40021c00 	.word	0x40021c00
 80033fc:	40013c00 	.word	0x40013c00

08003400 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	460b      	mov	r3, r1
 800340a:	807b      	strh	r3, [r7, #2]
 800340c:	4613      	mov	r3, r2
 800340e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003410:	787b      	ldrb	r3, [r7, #1]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d003      	beq.n	800341e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003416:	887a      	ldrh	r2, [r7, #2]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800341c:	e003      	b.n	8003426 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800341e:	887b      	ldrh	r3, [r7, #2]
 8003420:	041a      	lsls	r2, r3, #16
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	619a      	str	r2, [r3, #24]
}
 8003426:	bf00      	nop
 8003428:	370c      	adds	r7, #12
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr

08003432 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003432:	b480      	push	{r7}
 8003434:	b085      	sub	sp, #20
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
 800343a:	460b      	mov	r3, r1
 800343c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	695b      	ldr	r3, [r3, #20]
 8003442:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003444:	887a      	ldrh	r2, [r7, #2]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	4013      	ands	r3, r2
 800344a:	041a      	lsls	r2, r3, #16
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	43d9      	mvns	r1, r3
 8003450:	887b      	ldrh	r3, [r7, #2]
 8003452:	400b      	ands	r3, r1
 8003454:	431a      	orrs	r2, r3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	619a      	str	r2, [r3, #24]
}
 800345a:	bf00      	nop
 800345c:	3714      	adds	r7, #20
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr
	...

08003468 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d101      	bne.n	800347a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e12b      	b.n	80036d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003480:	b2db      	uxtb	r3, r3
 8003482:	2b00      	cmp	r3, #0
 8003484:	d106      	bne.n	8003494 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f7fe f978 	bl	8001784 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2224      	movs	r2, #36	@ 0x24
 8003498:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f022 0201 	bic.w	r2, r2, #1
 80034aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80034ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80034ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80034cc:	f000 fd80 	bl	8003fd0 <HAL_RCC_GetPCLK1Freq>
 80034d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	4a81      	ldr	r2, [pc, #516]	@ (80036dc <HAL_I2C_Init+0x274>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d807      	bhi.n	80034ec <HAL_I2C_Init+0x84>
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	4a80      	ldr	r2, [pc, #512]	@ (80036e0 <HAL_I2C_Init+0x278>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	bf94      	ite	ls
 80034e4:	2301      	movls	r3, #1
 80034e6:	2300      	movhi	r3, #0
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	e006      	b.n	80034fa <HAL_I2C_Init+0x92>
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	4a7d      	ldr	r2, [pc, #500]	@ (80036e4 <HAL_I2C_Init+0x27c>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	bf94      	ite	ls
 80034f4:	2301      	movls	r3, #1
 80034f6:	2300      	movhi	r3, #0
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d001      	beq.n	8003502 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e0e7      	b.n	80036d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	4a78      	ldr	r2, [pc, #480]	@ (80036e8 <HAL_I2C_Init+0x280>)
 8003506:	fba2 2303 	umull	r2, r3, r2, r3
 800350a:	0c9b      	lsrs	r3, r3, #18
 800350c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	68ba      	ldr	r2, [r7, #8]
 800351e:	430a      	orrs	r2, r1
 8003520:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	6a1b      	ldr	r3, [r3, #32]
 8003528:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	4a6a      	ldr	r2, [pc, #424]	@ (80036dc <HAL_I2C_Init+0x274>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d802      	bhi.n	800353c <HAL_I2C_Init+0xd4>
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	3301      	adds	r3, #1
 800353a:	e009      	b.n	8003550 <HAL_I2C_Init+0xe8>
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003542:	fb02 f303 	mul.w	r3, r2, r3
 8003546:	4a69      	ldr	r2, [pc, #420]	@ (80036ec <HAL_I2C_Init+0x284>)
 8003548:	fba2 2303 	umull	r2, r3, r2, r3
 800354c:	099b      	lsrs	r3, r3, #6
 800354e:	3301      	adds	r3, #1
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	6812      	ldr	r2, [r2, #0]
 8003554:	430b      	orrs	r3, r1
 8003556:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	69db      	ldr	r3, [r3, #28]
 800355e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003562:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	495c      	ldr	r1, [pc, #368]	@ (80036dc <HAL_I2C_Init+0x274>)
 800356c:	428b      	cmp	r3, r1
 800356e:	d819      	bhi.n	80035a4 <HAL_I2C_Init+0x13c>
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	1e59      	subs	r1, r3, #1
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	005b      	lsls	r3, r3, #1
 800357a:	fbb1 f3f3 	udiv	r3, r1, r3
 800357e:	1c59      	adds	r1, r3, #1
 8003580:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003584:	400b      	ands	r3, r1
 8003586:	2b00      	cmp	r3, #0
 8003588:	d00a      	beq.n	80035a0 <HAL_I2C_Init+0x138>
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	1e59      	subs	r1, r3, #1
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	005b      	lsls	r3, r3, #1
 8003594:	fbb1 f3f3 	udiv	r3, r1, r3
 8003598:	3301      	adds	r3, #1
 800359a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800359e:	e051      	b.n	8003644 <HAL_I2C_Init+0x1dc>
 80035a0:	2304      	movs	r3, #4
 80035a2:	e04f      	b.n	8003644 <HAL_I2C_Init+0x1dc>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d111      	bne.n	80035d0 <HAL_I2C_Init+0x168>
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	1e58      	subs	r0, r3, #1
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6859      	ldr	r1, [r3, #4]
 80035b4:	460b      	mov	r3, r1
 80035b6:	005b      	lsls	r3, r3, #1
 80035b8:	440b      	add	r3, r1
 80035ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80035be:	3301      	adds	r3, #1
 80035c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	bf0c      	ite	eq
 80035c8:	2301      	moveq	r3, #1
 80035ca:	2300      	movne	r3, #0
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	e012      	b.n	80035f6 <HAL_I2C_Init+0x18e>
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	1e58      	subs	r0, r3, #1
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6859      	ldr	r1, [r3, #4]
 80035d8:	460b      	mov	r3, r1
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	440b      	add	r3, r1
 80035de:	0099      	lsls	r1, r3, #2
 80035e0:	440b      	add	r3, r1
 80035e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80035e6:	3301      	adds	r3, #1
 80035e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	bf0c      	ite	eq
 80035f0:	2301      	moveq	r3, #1
 80035f2:	2300      	movne	r3, #0
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d001      	beq.n	80035fe <HAL_I2C_Init+0x196>
 80035fa:	2301      	movs	r3, #1
 80035fc:	e022      	b.n	8003644 <HAL_I2C_Init+0x1dc>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d10e      	bne.n	8003624 <HAL_I2C_Init+0x1bc>
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	1e58      	subs	r0, r3, #1
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6859      	ldr	r1, [r3, #4]
 800360e:	460b      	mov	r3, r1
 8003610:	005b      	lsls	r3, r3, #1
 8003612:	440b      	add	r3, r1
 8003614:	fbb0 f3f3 	udiv	r3, r0, r3
 8003618:	3301      	adds	r3, #1
 800361a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800361e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003622:	e00f      	b.n	8003644 <HAL_I2C_Init+0x1dc>
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	1e58      	subs	r0, r3, #1
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6859      	ldr	r1, [r3, #4]
 800362c:	460b      	mov	r3, r1
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	440b      	add	r3, r1
 8003632:	0099      	lsls	r1, r3, #2
 8003634:	440b      	add	r3, r1
 8003636:	fbb0 f3f3 	udiv	r3, r0, r3
 800363a:	3301      	adds	r3, #1
 800363c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003640:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003644:	6879      	ldr	r1, [r7, #4]
 8003646:	6809      	ldr	r1, [r1, #0]
 8003648:	4313      	orrs	r3, r2
 800364a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	69da      	ldr	r2, [r3, #28]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a1b      	ldr	r3, [r3, #32]
 800365e:	431a      	orrs	r2, r3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	430a      	orrs	r2, r1
 8003666:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003672:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	6911      	ldr	r1, [r2, #16]
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	68d2      	ldr	r2, [r2, #12]
 800367e:	4311      	orrs	r1, r2
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	6812      	ldr	r2, [r2, #0]
 8003684:	430b      	orrs	r3, r1
 8003686:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	695a      	ldr	r2, [r3, #20]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	699b      	ldr	r3, [r3, #24]
 800369a:	431a      	orrs	r2, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	430a      	orrs	r2, r1
 80036a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f042 0201 	orr.w	r2, r2, #1
 80036b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2220      	movs	r2, #32
 80036be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3710      	adds	r7, #16
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	000186a0 	.word	0x000186a0
 80036e0:	001e847f 	.word	0x001e847f
 80036e4:	003d08ff 	.word	0x003d08ff
 80036e8:	431bde83 	.word	0x431bde83
 80036ec:	10624dd3 	.word	0x10624dd3

080036f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b086      	sub	sp, #24
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d101      	bne.n	8003702 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e267      	b.n	8003bd2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0301 	and.w	r3, r3, #1
 800370a:	2b00      	cmp	r3, #0
 800370c:	d075      	beq.n	80037fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800370e:	4b88      	ldr	r3, [pc, #544]	@ (8003930 <HAL_RCC_OscConfig+0x240>)
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	f003 030c 	and.w	r3, r3, #12
 8003716:	2b04      	cmp	r3, #4
 8003718:	d00c      	beq.n	8003734 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800371a:	4b85      	ldr	r3, [pc, #532]	@ (8003930 <HAL_RCC_OscConfig+0x240>)
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003722:	2b08      	cmp	r3, #8
 8003724:	d112      	bne.n	800374c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003726:	4b82      	ldr	r3, [pc, #520]	@ (8003930 <HAL_RCC_OscConfig+0x240>)
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800372e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003732:	d10b      	bne.n	800374c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003734:	4b7e      	ldr	r3, [pc, #504]	@ (8003930 <HAL_RCC_OscConfig+0x240>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d05b      	beq.n	80037f8 <HAL_RCC_OscConfig+0x108>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d157      	bne.n	80037f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e242      	b.n	8003bd2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003754:	d106      	bne.n	8003764 <HAL_RCC_OscConfig+0x74>
 8003756:	4b76      	ldr	r3, [pc, #472]	@ (8003930 <HAL_RCC_OscConfig+0x240>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a75      	ldr	r2, [pc, #468]	@ (8003930 <HAL_RCC_OscConfig+0x240>)
 800375c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003760:	6013      	str	r3, [r2, #0]
 8003762:	e01d      	b.n	80037a0 <HAL_RCC_OscConfig+0xb0>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800376c:	d10c      	bne.n	8003788 <HAL_RCC_OscConfig+0x98>
 800376e:	4b70      	ldr	r3, [pc, #448]	@ (8003930 <HAL_RCC_OscConfig+0x240>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a6f      	ldr	r2, [pc, #444]	@ (8003930 <HAL_RCC_OscConfig+0x240>)
 8003774:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003778:	6013      	str	r3, [r2, #0]
 800377a:	4b6d      	ldr	r3, [pc, #436]	@ (8003930 <HAL_RCC_OscConfig+0x240>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a6c      	ldr	r2, [pc, #432]	@ (8003930 <HAL_RCC_OscConfig+0x240>)
 8003780:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003784:	6013      	str	r3, [r2, #0]
 8003786:	e00b      	b.n	80037a0 <HAL_RCC_OscConfig+0xb0>
 8003788:	4b69      	ldr	r3, [pc, #420]	@ (8003930 <HAL_RCC_OscConfig+0x240>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a68      	ldr	r2, [pc, #416]	@ (8003930 <HAL_RCC_OscConfig+0x240>)
 800378e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003792:	6013      	str	r3, [r2, #0]
 8003794:	4b66      	ldr	r3, [pc, #408]	@ (8003930 <HAL_RCC_OscConfig+0x240>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a65      	ldr	r2, [pc, #404]	@ (8003930 <HAL_RCC_OscConfig+0x240>)
 800379a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800379e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d013      	beq.n	80037d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037a8:	f7fe fa30 	bl	8001c0c <HAL_GetTick>
 80037ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ae:	e008      	b.n	80037c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037b0:	f7fe fa2c 	bl	8001c0c <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	2b64      	cmp	r3, #100	@ 0x64
 80037bc:	d901      	bls.n	80037c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e207      	b.n	8003bd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037c2:	4b5b      	ldr	r3, [pc, #364]	@ (8003930 <HAL_RCC_OscConfig+0x240>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d0f0      	beq.n	80037b0 <HAL_RCC_OscConfig+0xc0>
 80037ce:	e014      	b.n	80037fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037d0:	f7fe fa1c 	bl	8001c0c <HAL_GetTick>
 80037d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037d6:	e008      	b.n	80037ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037d8:	f7fe fa18 	bl	8001c0c <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	2b64      	cmp	r3, #100	@ 0x64
 80037e4:	d901      	bls.n	80037ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e1f3      	b.n	8003bd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037ea:	4b51      	ldr	r3, [pc, #324]	@ (8003930 <HAL_RCC_OscConfig+0x240>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d1f0      	bne.n	80037d8 <HAL_RCC_OscConfig+0xe8>
 80037f6:	e000      	b.n	80037fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0302 	and.w	r3, r3, #2
 8003802:	2b00      	cmp	r3, #0
 8003804:	d063      	beq.n	80038ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003806:	4b4a      	ldr	r3, [pc, #296]	@ (8003930 <HAL_RCC_OscConfig+0x240>)
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	f003 030c 	and.w	r3, r3, #12
 800380e:	2b00      	cmp	r3, #0
 8003810:	d00b      	beq.n	800382a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003812:	4b47      	ldr	r3, [pc, #284]	@ (8003930 <HAL_RCC_OscConfig+0x240>)
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800381a:	2b08      	cmp	r3, #8
 800381c:	d11c      	bne.n	8003858 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800381e:	4b44      	ldr	r3, [pc, #272]	@ (8003930 <HAL_RCC_OscConfig+0x240>)
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d116      	bne.n	8003858 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800382a:	4b41      	ldr	r3, [pc, #260]	@ (8003930 <HAL_RCC_OscConfig+0x240>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0302 	and.w	r3, r3, #2
 8003832:	2b00      	cmp	r3, #0
 8003834:	d005      	beq.n	8003842 <HAL_RCC_OscConfig+0x152>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	2b01      	cmp	r3, #1
 800383c:	d001      	beq.n	8003842 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e1c7      	b.n	8003bd2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003842:	4b3b      	ldr	r3, [pc, #236]	@ (8003930 <HAL_RCC_OscConfig+0x240>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	691b      	ldr	r3, [r3, #16]
 800384e:	00db      	lsls	r3, r3, #3
 8003850:	4937      	ldr	r1, [pc, #220]	@ (8003930 <HAL_RCC_OscConfig+0x240>)
 8003852:	4313      	orrs	r3, r2
 8003854:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003856:	e03a      	b.n	80038ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d020      	beq.n	80038a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003860:	4b34      	ldr	r3, [pc, #208]	@ (8003934 <HAL_RCC_OscConfig+0x244>)
 8003862:	2201      	movs	r2, #1
 8003864:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003866:	f7fe f9d1 	bl	8001c0c <HAL_GetTick>
 800386a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800386c:	e008      	b.n	8003880 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800386e:	f7fe f9cd 	bl	8001c0c <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	2b02      	cmp	r3, #2
 800387a:	d901      	bls.n	8003880 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800387c:	2303      	movs	r3, #3
 800387e:	e1a8      	b.n	8003bd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003880:	4b2b      	ldr	r3, [pc, #172]	@ (8003930 <HAL_RCC_OscConfig+0x240>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0302 	and.w	r3, r3, #2
 8003888:	2b00      	cmp	r3, #0
 800388a:	d0f0      	beq.n	800386e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800388c:	4b28      	ldr	r3, [pc, #160]	@ (8003930 <HAL_RCC_OscConfig+0x240>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	691b      	ldr	r3, [r3, #16]
 8003898:	00db      	lsls	r3, r3, #3
 800389a:	4925      	ldr	r1, [pc, #148]	@ (8003930 <HAL_RCC_OscConfig+0x240>)
 800389c:	4313      	orrs	r3, r2
 800389e:	600b      	str	r3, [r1, #0]
 80038a0:	e015      	b.n	80038ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038a2:	4b24      	ldr	r3, [pc, #144]	@ (8003934 <HAL_RCC_OscConfig+0x244>)
 80038a4:	2200      	movs	r2, #0
 80038a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a8:	f7fe f9b0 	bl	8001c0c <HAL_GetTick>
 80038ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038ae:	e008      	b.n	80038c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038b0:	f7fe f9ac 	bl	8001c0c <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d901      	bls.n	80038c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e187      	b.n	8003bd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038c2:	4b1b      	ldr	r3, [pc, #108]	@ (8003930 <HAL_RCC_OscConfig+0x240>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0302 	and.w	r3, r3, #2
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d1f0      	bne.n	80038b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0308 	and.w	r3, r3, #8
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d036      	beq.n	8003948 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	695b      	ldr	r3, [r3, #20]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d016      	beq.n	8003910 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038e2:	4b15      	ldr	r3, [pc, #84]	@ (8003938 <HAL_RCC_OscConfig+0x248>)
 80038e4:	2201      	movs	r2, #1
 80038e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038e8:	f7fe f990 	bl	8001c0c <HAL_GetTick>
 80038ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038ee:	e008      	b.n	8003902 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038f0:	f7fe f98c 	bl	8001c0c <HAL_GetTick>
 80038f4:	4602      	mov	r2, r0
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	2b02      	cmp	r3, #2
 80038fc:	d901      	bls.n	8003902 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80038fe:	2303      	movs	r3, #3
 8003900:	e167      	b.n	8003bd2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003902:	4b0b      	ldr	r3, [pc, #44]	@ (8003930 <HAL_RCC_OscConfig+0x240>)
 8003904:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003906:	f003 0302 	and.w	r3, r3, #2
 800390a:	2b00      	cmp	r3, #0
 800390c:	d0f0      	beq.n	80038f0 <HAL_RCC_OscConfig+0x200>
 800390e:	e01b      	b.n	8003948 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003910:	4b09      	ldr	r3, [pc, #36]	@ (8003938 <HAL_RCC_OscConfig+0x248>)
 8003912:	2200      	movs	r2, #0
 8003914:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003916:	f7fe f979 	bl	8001c0c <HAL_GetTick>
 800391a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800391c:	e00e      	b.n	800393c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800391e:	f7fe f975 	bl	8001c0c <HAL_GetTick>
 8003922:	4602      	mov	r2, r0
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	2b02      	cmp	r3, #2
 800392a:	d907      	bls.n	800393c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	e150      	b.n	8003bd2 <HAL_RCC_OscConfig+0x4e2>
 8003930:	40023800 	.word	0x40023800
 8003934:	42470000 	.word	0x42470000
 8003938:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800393c:	4b88      	ldr	r3, [pc, #544]	@ (8003b60 <HAL_RCC_OscConfig+0x470>)
 800393e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003940:	f003 0302 	and.w	r3, r3, #2
 8003944:	2b00      	cmp	r3, #0
 8003946:	d1ea      	bne.n	800391e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0304 	and.w	r3, r3, #4
 8003950:	2b00      	cmp	r3, #0
 8003952:	f000 8097 	beq.w	8003a84 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003956:	2300      	movs	r3, #0
 8003958:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800395a:	4b81      	ldr	r3, [pc, #516]	@ (8003b60 <HAL_RCC_OscConfig+0x470>)
 800395c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800395e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d10f      	bne.n	8003986 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003966:	2300      	movs	r3, #0
 8003968:	60bb      	str	r3, [r7, #8]
 800396a:	4b7d      	ldr	r3, [pc, #500]	@ (8003b60 <HAL_RCC_OscConfig+0x470>)
 800396c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800396e:	4a7c      	ldr	r2, [pc, #496]	@ (8003b60 <HAL_RCC_OscConfig+0x470>)
 8003970:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003974:	6413      	str	r3, [r2, #64]	@ 0x40
 8003976:	4b7a      	ldr	r3, [pc, #488]	@ (8003b60 <HAL_RCC_OscConfig+0x470>)
 8003978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800397a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800397e:	60bb      	str	r3, [r7, #8]
 8003980:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003982:	2301      	movs	r3, #1
 8003984:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003986:	4b77      	ldr	r3, [pc, #476]	@ (8003b64 <HAL_RCC_OscConfig+0x474>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800398e:	2b00      	cmp	r3, #0
 8003990:	d118      	bne.n	80039c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003992:	4b74      	ldr	r3, [pc, #464]	@ (8003b64 <HAL_RCC_OscConfig+0x474>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a73      	ldr	r2, [pc, #460]	@ (8003b64 <HAL_RCC_OscConfig+0x474>)
 8003998:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800399c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800399e:	f7fe f935 	bl	8001c0c <HAL_GetTick>
 80039a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039a4:	e008      	b.n	80039b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039a6:	f7fe f931 	bl	8001c0c <HAL_GetTick>
 80039aa:	4602      	mov	r2, r0
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	d901      	bls.n	80039b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80039b4:	2303      	movs	r3, #3
 80039b6:	e10c      	b.n	8003bd2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039b8:	4b6a      	ldr	r3, [pc, #424]	@ (8003b64 <HAL_RCC_OscConfig+0x474>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d0f0      	beq.n	80039a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d106      	bne.n	80039da <HAL_RCC_OscConfig+0x2ea>
 80039cc:	4b64      	ldr	r3, [pc, #400]	@ (8003b60 <HAL_RCC_OscConfig+0x470>)
 80039ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039d0:	4a63      	ldr	r2, [pc, #396]	@ (8003b60 <HAL_RCC_OscConfig+0x470>)
 80039d2:	f043 0301 	orr.w	r3, r3, #1
 80039d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80039d8:	e01c      	b.n	8003a14 <HAL_RCC_OscConfig+0x324>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	2b05      	cmp	r3, #5
 80039e0:	d10c      	bne.n	80039fc <HAL_RCC_OscConfig+0x30c>
 80039e2:	4b5f      	ldr	r3, [pc, #380]	@ (8003b60 <HAL_RCC_OscConfig+0x470>)
 80039e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039e6:	4a5e      	ldr	r2, [pc, #376]	@ (8003b60 <HAL_RCC_OscConfig+0x470>)
 80039e8:	f043 0304 	orr.w	r3, r3, #4
 80039ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80039ee:	4b5c      	ldr	r3, [pc, #368]	@ (8003b60 <HAL_RCC_OscConfig+0x470>)
 80039f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039f2:	4a5b      	ldr	r2, [pc, #364]	@ (8003b60 <HAL_RCC_OscConfig+0x470>)
 80039f4:	f043 0301 	orr.w	r3, r3, #1
 80039f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80039fa:	e00b      	b.n	8003a14 <HAL_RCC_OscConfig+0x324>
 80039fc:	4b58      	ldr	r3, [pc, #352]	@ (8003b60 <HAL_RCC_OscConfig+0x470>)
 80039fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a00:	4a57      	ldr	r2, [pc, #348]	@ (8003b60 <HAL_RCC_OscConfig+0x470>)
 8003a02:	f023 0301 	bic.w	r3, r3, #1
 8003a06:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a08:	4b55      	ldr	r3, [pc, #340]	@ (8003b60 <HAL_RCC_OscConfig+0x470>)
 8003a0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a0c:	4a54      	ldr	r2, [pc, #336]	@ (8003b60 <HAL_RCC_OscConfig+0x470>)
 8003a0e:	f023 0304 	bic.w	r3, r3, #4
 8003a12:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d015      	beq.n	8003a48 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a1c:	f7fe f8f6 	bl	8001c0c <HAL_GetTick>
 8003a20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a22:	e00a      	b.n	8003a3a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a24:	f7fe f8f2 	bl	8001c0c <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d901      	bls.n	8003a3a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e0cb      	b.n	8003bd2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a3a:	4b49      	ldr	r3, [pc, #292]	@ (8003b60 <HAL_RCC_OscConfig+0x470>)
 8003a3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a3e:	f003 0302 	and.w	r3, r3, #2
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d0ee      	beq.n	8003a24 <HAL_RCC_OscConfig+0x334>
 8003a46:	e014      	b.n	8003a72 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a48:	f7fe f8e0 	bl	8001c0c <HAL_GetTick>
 8003a4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a4e:	e00a      	b.n	8003a66 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a50:	f7fe f8dc 	bl	8001c0c <HAL_GetTick>
 8003a54:	4602      	mov	r2, r0
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d901      	bls.n	8003a66 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e0b5      	b.n	8003bd2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a66:	4b3e      	ldr	r3, [pc, #248]	@ (8003b60 <HAL_RCC_OscConfig+0x470>)
 8003a68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a6a:	f003 0302 	and.w	r3, r3, #2
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d1ee      	bne.n	8003a50 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a72:	7dfb      	ldrb	r3, [r7, #23]
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d105      	bne.n	8003a84 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a78:	4b39      	ldr	r3, [pc, #228]	@ (8003b60 <HAL_RCC_OscConfig+0x470>)
 8003a7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a7c:	4a38      	ldr	r2, [pc, #224]	@ (8003b60 <HAL_RCC_OscConfig+0x470>)
 8003a7e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a82:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	699b      	ldr	r3, [r3, #24]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	f000 80a1 	beq.w	8003bd0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a8e:	4b34      	ldr	r3, [pc, #208]	@ (8003b60 <HAL_RCC_OscConfig+0x470>)
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	f003 030c 	and.w	r3, r3, #12
 8003a96:	2b08      	cmp	r3, #8
 8003a98:	d05c      	beq.n	8003b54 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	699b      	ldr	r3, [r3, #24]
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d141      	bne.n	8003b26 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aa2:	4b31      	ldr	r3, [pc, #196]	@ (8003b68 <HAL_RCC_OscConfig+0x478>)
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aa8:	f7fe f8b0 	bl	8001c0c <HAL_GetTick>
 8003aac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aae:	e008      	b.n	8003ac2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ab0:	f7fe f8ac 	bl	8001c0c <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d901      	bls.n	8003ac2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e087      	b.n	8003bd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ac2:	4b27      	ldr	r3, [pc, #156]	@ (8003b60 <HAL_RCC_OscConfig+0x470>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d1f0      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	69da      	ldr	r2, [r3, #28]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6a1b      	ldr	r3, [r3, #32]
 8003ad6:	431a      	orrs	r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003adc:	019b      	lsls	r3, r3, #6
 8003ade:	431a      	orrs	r2, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ae4:	085b      	lsrs	r3, r3, #1
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	041b      	lsls	r3, r3, #16
 8003aea:	431a      	orrs	r2, r3
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003af0:	061b      	lsls	r3, r3, #24
 8003af2:	491b      	ldr	r1, [pc, #108]	@ (8003b60 <HAL_RCC_OscConfig+0x470>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003af8:	4b1b      	ldr	r3, [pc, #108]	@ (8003b68 <HAL_RCC_OscConfig+0x478>)
 8003afa:	2201      	movs	r2, #1
 8003afc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003afe:	f7fe f885 	bl	8001c0c <HAL_GetTick>
 8003b02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b04:	e008      	b.n	8003b18 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b06:	f7fe f881 	bl	8001c0c <HAL_GetTick>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d901      	bls.n	8003b18 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003b14:	2303      	movs	r3, #3
 8003b16:	e05c      	b.n	8003bd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b18:	4b11      	ldr	r3, [pc, #68]	@ (8003b60 <HAL_RCC_OscConfig+0x470>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d0f0      	beq.n	8003b06 <HAL_RCC_OscConfig+0x416>
 8003b24:	e054      	b.n	8003bd0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b26:	4b10      	ldr	r3, [pc, #64]	@ (8003b68 <HAL_RCC_OscConfig+0x478>)
 8003b28:	2200      	movs	r2, #0
 8003b2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b2c:	f7fe f86e 	bl	8001c0c <HAL_GetTick>
 8003b30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b32:	e008      	b.n	8003b46 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b34:	f7fe f86a 	bl	8001c0c <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d901      	bls.n	8003b46 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e045      	b.n	8003bd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b46:	4b06      	ldr	r3, [pc, #24]	@ (8003b60 <HAL_RCC_OscConfig+0x470>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d1f0      	bne.n	8003b34 <HAL_RCC_OscConfig+0x444>
 8003b52:	e03d      	b.n	8003bd0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	699b      	ldr	r3, [r3, #24]
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d107      	bne.n	8003b6c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e038      	b.n	8003bd2 <HAL_RCC_OscConfig+0x4e2>
 8003b60:	40023800 	.word	0x40023800
 8003b64:	40007000 	.word	0x40007000
 8003b68:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b6c:	4b1b      	ldr	r3, [pc, #108]	@ (8003bdc <HAL_RCC_OscConfig+0x4ec>)
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	699b      	ldr	r3, [r3, #24]
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d028      	beq.n	8003bcc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d121      	bne.n	8003bcc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d11a      	bne.n	8003bcc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b96:	68fa      	ldr	r2, [r7, #12]
 8003b98:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003ba2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d111      	bne.n	8003bcc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bb2:	085b      	lsrs	r3, r3, #1
 8003bb4:	3b01      	subs	r3, #1
 8003bb6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d107      	bne.n	8003bcc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bc6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d001      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e000      	b.n	8003bd2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3718      	adds	r7, #24
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	40023800 	.word	0x40023800

08003be0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d101      	bne.n	8003bf4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e0cc      	b.n	8003d8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003bf4:	4b68      	ldr	r3, [pc, #416]	@ (8003d98 <HAL_RCC_ClockConfig+0x1b8>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0307 	and.w	r3, r3, #7
 8003bfc:	683a      	ldr	r2, [r7, #0]
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d90c      	bls.n	8003c1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c02:	4b65      	ldr	r3, [pc, #404]	@ (8003d98 <HAL_RCC_ClockConfig+0x1b8>)
 8003c04:	683a      	ldr	r2, [r7, #0]
 8003c06:	b2d2      	uxtb	r2, r2
 8003c08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c0a:	4b63      	ldr	r3, [pc, #396]	@ (8003d98 <HAL_RCC_ClockConfig+0x1b8>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0307 	and.w	r3, r3, #7
 8003c12:	683a      	ldr	r2, [r7, #0]
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d001      	beq.n	8003c1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e0b8      	b.n	8003d8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0302 	and.w	r3, r3, #2
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d020      	beq.n	8003c6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0304 	and.w	r3, r3, #4
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d005      	beq.n	8003c40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c34:	4b59      	ldr	r3, [pc, #356]	@ (8003d9c <HAL_RCC_ClockConfig+0x1bc>)
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	4a58      	ldr	r2, [pc, #352]	@ (8003d9c <HAL_RCC_ClockConfig+0x1bc>)
 8003c3a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003c3e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0308 	and.w	r3, r3, #8
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d005      	beq.n	8003c58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c4c:	4b53      	ldr	r3, [pc, #332]	@ (8003d9c <HAL_RCC_ClockConfig+0x1bc>)
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	4a52      	ldr	r2, [pc, #328]	@ (8003d9c <HAL_RCC_ClockConfig+0x1bc>)
 8003c52:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003c56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c58:	4b50      	ldr	r3, [pc, #320]	@ (8003d9c <HAL_RCC_ClockConfig+0x1bc>)
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	494d      	ldr	r1, [pc, #308]	@ (8003d9c <HAL_RCC_ClockConfig+0x1bc>)
 8003c66:	4313      	orrs	r3, r2
 8003c68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0301 	and.w	r3, r3, #1
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d044      	beq.n	8003d00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d107      	bne.n	8003c8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c7e:	4b47      	ldr	r3, [pc, #284]	@ (8003d9c <HAL_RCC_ClockConfig+0x1bc>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d119      	bne.n	8003cbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e07f      	b.n	8003d8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d003      	beq.n	8003c9e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c9a:	2b03      	cmp	r3, #3
 8003c9c:	d107      	bne.n	8003cae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c9e:	4b3f      	ldr	r3, [pc, #252]	@ (8003d9c <HAL_RCC_ClockConfig+0x1bc>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d109      	bne.n	8003cbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e06f      	b.n	8003d8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cae:	4b3b      	ldr	r3, [pc, #236]	@ (8003d9c <HAL_RCC_ClockConfig+0x1bc>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0302 	and.w	r3, r3, #2
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d101      	bne.n	8003cbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e067      	b.n	8003d8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cbe:	4b37      	ldr	r3, [pc, #220]	@ (8003d9c <HAL_RCC_ClockConfig+0x1bc>)
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	f023 0203 	bic.w	r2, r3, #3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	4934      	ldr	r1, [pc, #208]	@ (8003d9c <HAL_RCC_ClockConfig+0x1bc>)
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cd0:	f7fd ff9c 	bl	8001c0c <HAL_GetTick>
 8003cd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cd6:	e00a      	b.n	8003cee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cd8:	f7fd ff98 	bl	8001c0c <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d901      	bls.n	8003cee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e04f      	b.n	8003d8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cee:	4b2b      	ldr	r3, [pc, #172]	@ (8003d9c <HAL_RCC_ClockConfig+0x1bc>)
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f003 020c 	and.w	r2, r3, #12
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d1eb      	bne.n	8003cd8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d00:	4b25      	ldr	r3, [pc, #148]	@ (8003d98 <HAL_RCC_ClockConfig+0x1b8>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0307 	and.w	r3, r3, #7
 8003d08:	683a      	ldr	r2, [r7, #0]
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d20c      	bcs.n	8003d28 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d0e:	4b22      	ldr	r3, [pc, #136]	@ (8003d98 <HAL_RCC_ClockConfig+0x1b8>)
 8003d10:	683a      	ldr	r2, [r7, #0]
 8003d12:	b2d2      	uxtb	r2, r2
 8003d14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d16:	4b20      	ldr	r3, [pc, #128]	@ (8003d98 <HAL_RCC_ClockConfig+0x1b8>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0307 	and.w	r3, r3, #7
 8003d1e:	683a      	ldr	r2, [r7, #0]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d001      	beq.n	8003d28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e032      	b.n	8003d8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0304 	and.w	r3, r3, #4
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d008      	beq.n	8003d46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d34:	4b19      	ldr	r3, [pc, #100]	@ (8003d9c <HAL_RCC_ClockConfig+0x1bc>)
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	4916      	ldr	r1, [pc, #88]	@ (8003d9c <HAL_RCC_ClockConfig+0x1bc>)
 8003d42:	4313      	orrs	r3, r2
 8003d44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0308 	and.w	r3, r3, #8
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d009      	beq.n	8003d66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d52:	4b12      	ldr	r3, [pc, #72]	@ (8003d9c <HAL_RCC_ClockConfig+0x1bc>)
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	691b      	ldr	r3, [r3, #16]
 8003d5e:	00db      	lsls	r3, r3, #3
 8003d60:	490e      	ldr	r1, [pc, #56]	@ (8003d9c <HAL_RCC_ClockConfig+0x1bc>)
 8003d62:	4313      	orrs	r3, r2
 8003d64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d66:	f000 f821 	bl	8003dac <HAL_RCC_GetSysClockFreq>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	4b0b      	ldr	r3, [pc, #44]	@ (8003d9c <HAL_RCC_ClockConfig+0x1bc>)
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	091b      	lsrs	r3, r3, #4
 8003d72:	f003 030f 	and.w	r3, r3, #15
 8003d76:	490a      	ldr	r1, [pc, #40]	@ (8003da0 <HAL_RCC_ClockConfig+0x1c0>)
 8003d78:	5ccb      	ldrb	r3, [r1, r3]
 8003d7a:	fa22 f303 	lsr.w	r3, r2, r3
 8003d7e:	4a09      	ldr	r2, [pc, #36]	@ (8003da4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d82:	4b09      	ldr	r3, [pc, #36]	@ (8003da8 <HAL_RCC_ClockConfig+0x1c8>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4618      	mov	r0, r3
 8003d88:	f7fd fefc 	bl	8001b84 <HAL_InitTick>

  return HAL_OK;
 8003d8c:	2300      	movs	r3, #0
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3710      	adds	r7, #16
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	40023c00 	.word	0x40023c00
 8003d9c:	40023800 	.word	0x40023800
 8003da0:	08007508 	.word	0x08007508
 8003da4:	20000000 	.word	0x20000000
 8003da8:	20000004 	.word	0x20000004

08003dac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003db0:	b094      	sub	sp, #80	@ 0x50
 8003db2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003db4:	2300      	movs	r3, #0
 8003db6:	647b      	str	r3, [r7, #68]	@ 0x44
 8003db8:	2300      	movs	r3, #0
 8003dba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003dc4:	4b79      	ldr	r3, [pc, #484]	@ (8003fac <HAL_RCC_GetSysClockFreq+0x200>)
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	f003 030c 	and.w	r3, r3, #12
 8003dcc:	2b08      	cmp	r3, #8
 8003dce:	d00d      	beq.n	8003dec <HAL_RCC_GetSysClockFreq+0x40>
 8003dd0:	2b08      	cmp	r3, #8
 8003dd2:	f200 80e1 	bhi.w	8003f98 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d002      	beq.n	8003de0 <HAL_RCC_GetSysClockFreq+0x34>
 8003dda:	2b04      	cmp	r3, #4
 8003ddc:	d003      	beq.n	8003de6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003dde:	e0db      	b.n	8003f98 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003de0:	4b73      	ldr	r3, [pc, #460]	@ (8003fb0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003de2:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003de4:	e0db      	b.n	8003f9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003de6:	4b73      	ldr	r3, [pc, #460]	@ (8003fb4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003de8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003dea:	e0d8      	b.n	8003f9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003dec:	4b6f      	ldr	r3, [pc, #444]	@ (8003fac <HAL_RCC_GetSysClockFreq+0x200>)
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003df4:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003df6:	4b6d      	ldr	r3, [pc, #436]	@ (8003fac <HAL_RCC_GetSysClockFreq+0x200>)
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d063      	beq.n	8003eca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e02:	4b6a      	ldr	r3, [pc, #424]	@ (8003fac <HAL_RCC_GetSysClockFreq+0x200>)
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	099b      	lsrs	r3, r3, #6
 8003e08:	2200      	movs	r2, #0
 8003e0a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003e0c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003e0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e14:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e16:	2300      	movs	r3, #0
 8003e18:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e1a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003e1e:	4622      	mov	r2, r4
 8003e20:	462b      	mov	r3, r5
 8003e22:	f04f 0000 	mov.w	r0, #0
 8003e26:	f04f 0100 	mov.w	r1, #0
 8003e2a:	0159      	lsls	r1, r3, #5
 8003e2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e30:	0150      	lsls	r0, r2, #5
 8003e32:	4602      	mov	r2, r0
 8003e34:	460b      	mov	r3, r1
 8003e36:	4621      	mov	r1, r4
 8003e38:	1a51      	subs	r1, r2, r1
 8003e3a:	6139      	str	r1, [r7, #16]
 8003e3c:	4629      	mov	r1, r5
 8003e3e:	eb63 0301 	sbc.w	r3, r3, r1
 8003e42:	617b      	str	r3, [r7, #20]
 8003e44:	f04f 0200 	mov.w	r2, #0
 8003e48:	f04f 0300 	mov.w	r3, #0
 8003e4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e50:	4659      	mov	r1, fp
 8003e52:	018b      	lsls	r3, r1, #6
 8003e54:	4651      	mov	r1, sl
 8003e56:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e5a:	4651      	mov	r1, sl
 8003e5c:	018a      	lsls	r2, r1, #6
 8003e5e:	4651      	mov	r1, sl
 8003e60:	ebb2 0801 	subs.w	r8, r2, r1
 8003e64:	4659      	mov	r1, fp
 8003e66:	eb63 0901 	sbc.w	r9, r3, r1
 8003e6a:	f04f 0200 	mov.w	r2, #0
 8003e6e:	f04f 0300 	mov.w	r3, #0
 8003e72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e7e:	4690      	mov	r8, r2
 8003e80:	4699      	mov	r9, r3
 8003e82:	4623      	mov	r3, r4
 8003e84:	eb18 0303 	adds.w	r3, r8, r3
 8003e88:	60bb      	str	r3, [r7, #8]
 8003e8a:	462b      	mov	r3, r5
 8003e8c:	eb49 0303 	adc.w	r3, r9, r3
 8003e90:	60fb      	str	r3, [r7, #12]
 8003e92:	f04f 0200 	mov.w	r2, #0
 8003e96:	f04f 0300 	mov.w	r3, #0
 8003e9a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003e9e:	4629      	mov	r1, r5
 8003ea0:	024b      	lsls	r3, r1, #9
 8003ea2:	4621      	mov	r1, r4
 8003ea4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ea8:	4621      	mov	r1, r4
 8003eaa:	024a      	lsls	r2, r1, #9
 8003eac:	4610      	mov	r0, r2
 8003eae:	4619      	mov	r1, r3
 8003eb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003eb6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003eb8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003ebc:	f7fc fe94 	bl	8000be8 <__aeabi_uldivmod>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	460b      	mov	r3, r1
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ec8:	e058      	b.n	8003f7c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003eca:	4b38      	ldr	r3, [pc, #224]	@ (8003fac <HAL_RCC_GetSysClockFreq+0x200>)
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	099b      	lsrs	r3, r3, #6
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	4611      	mov	r1, r2
 8003ed6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003eda:	623b      	str	r3, [r7, #32]
 8003edc:	2300      	movs	r3, #0
 8003ede:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ee0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003ee4:	4642      	mov	r2, r8
 8003ee6:	464b      	mov	r3, r9
 8003ee8:	f04f 0000 	mov.w	r0, #0
 8003eec:	f04f 0100 	mov.w	r1, #0
 8003ef0:	0159      	lsls	r1, r3, #5
 8003ef2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ef6:	0150      	lsls	r0, r2, #5
 8003ef8:	4602      	mov	r2, r0
 8003efa:	460b      	mov	r3, r1
 8003efc:	4641      	mov	r1, r8
 8003efe:	ebb2 0a01 	subs.w	sl, r2, r1
 8003f02:	4649      	mov	r1, r9
 8003f04:	eb63 0b01 	sbc.w	fp, r3, r1
 8003f08:	f04f 0200 	mov.w	r2, #0
 8003f0c:	f04f 0300 	mov.w	r3, #0
 8003f10:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003f14:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003f18:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003f1c:	ebb2 040a 	subs.w	r4, r2, sl
 8003f20:	eb63 050b 	sbc.w	r5, r3, fp
 8003f24:	f04f 0200 	mov.w	r2, #0
 8003f28:	f04f 0300 	mov.w	r3, #0
 8003f2c:	00eb      	lsls	r3, r5, #3
 8003f2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f32:	00e2      	lsls	r2, r4, #3
 8003f34:	4614      	mov	r4, r2
 8003f36:	461d      	mov	r5, r3
 8003f38:	4643      	mov	r3, r8
 8003f3a:	18e3      	adds	r3, r4, r3
 8003f3c:	603b      	str	r3, [r7, #0]
 8003f3e:	464b      	mov	r3, r9
 8003f40:	eb45 0303 	adc.w	r3, r5, r3
 8003f44:	607b      	str	r3, [r7, #4]
 8003f46:	f04f 0200 	mov.w	r2, #0
 8003f4a:	f04f 0300 	mov.w	r3, #0
 8003f4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f52:	4629      	mov	r1, r5
 8003f54:	028b      	lsls	r3, r1, #10
 8003f56:	4621      	mov	r1, r4
 8003f58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f5c:	4621      	mov	r1, r4
 8003f5e:	028a      	lsls	r2, r1, #10
 8003f60:	4610      	mov	r0, r2
 8003f62:	4619      	mov	r1, r3
 8003f64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f66:	2200      	movs	r2, #0
 8003f68:	61bb      	str	r3, [r7, #24]
 8003f6a:	61fa      	str	r2, [r7, #28]
 8003f6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f70:	f7fc fe3a 	bl	8000be8 <__aeabi_uldivmod>
 8003f74:	4602      	mov	r2, r0
 8003f76:	460b      	mov	r3, r1
 8003f78:	4613      	mov	r3, r2
 8003f7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f7c:	4b0b      	ldr	r3, [pc, #44]	@ (8003fac <HAL_RCC_GetSysClockFreq+0x200>)
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	0c1b      	lsrs	r3, r3, #16
 8003f82:	f003 0303 	and.w	r3, r3, #3
 8003f86:	3301      	adds	r3, #1
 8003f88:	005b      	lsls	r3, r3, #1
 8003f8a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003f8c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003f8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f94:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003f96:	e002      	b.n	8003f9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f98:	4b05      	ldr	r3, [pc, #20]	@ (8003fb0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f9a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003f9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3750      	adds	r7, #80	@ 0x50
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003faa:	bf00      	nop
 8003fac:	40023800 	.word	0x40023800
 8003fb0:	00f42400 	.word	0x00f42400
 8003fb4:	007a1200 	.word	0x007a1200

08003fb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fbc:	4b03      	ldr	r3, [pc, #12]	@ (8003fcc <HAL_RCC_GetHCLKFreq+0x14>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr
 8003fca:	bf00      	nop
 8003fcc:	20000000 	.word	0x20000000

08003fd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003fd4:	f7ff fff0 	bl	8003fb8 <HAL_RCC_GetHCLKFreq>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	4b05      	ldr	r3, [pc, #20]	@ (8003ff0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	0a9b      	lsrs	r3, r3, #10
 8003fe0:	f003 0307 	and.w	r3, r3, #7
 8003fe4:	4903      	ldr	r1, [pc, #12]	@ (8003ff4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fe6:	5ccb      	ldrb	r3, [r1, r3]
 8003fe8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	40023800 	.word	0x40023800
 8003ff4:	08007518 	.word	0x08007518

08003ff8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b082      	sub	sp, #8
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d101      	bne.n	800400a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e041      	b.n	800408e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004010:	b2db      	uxtb	r3, r3
 8004012:	2b00      	cmp	r3, #0
 8004014:	d106      	bne.n	8004024 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f7fd fbf8 	bl	8001814 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2202      	movs	r2, #2
 8004028:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	3304      	adds	r3, #4
 8004034:	4619      	mov	r1, r3
 8004036:	4610      	mov	r0, r2
 8004038:	f000 fb4e 	bl	80046d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800408c:	2300      	movs	r3, #0
}
 800408e:	4618      	mov	r0, r3
 8004090:	3708      	adds	r7, #8
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
	...

08004098 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040a2:	2300      	movs	r3, #0
 80040a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d104      	bne.n	80040b6 <HAL_TIM_IC_Start_IT+0x1e>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	e013      	b.n	80040de <HAL_TIM_IC_Start_IT+0x46>
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	2b04      	cmp	r3, #4
 80040ba:	d104      	bne.n	80040c6 <HAL_TIM_IC_Start_IT+0x2e>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	e00b      	b.n	80040de <HAL_TIM_IC_Start_IT+0x46>
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	2b08      	cmp	r3, #8
 80040ca:	d104      	bne.n	80040d6 <HAL_TIM_IC_Start_IT+0x3e>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	e003      	b.n	80040de <HAL_TIM_IC_Start_IT+0x46>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d104      	bne.n	80040f0 <HAL_TIM_IC_Start_IT+0x58>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	e013      	b.n	8004118 <HAL_TIM_IC_Start_IT+0x80>
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	2b04      	cmp	r3, #4
 80040f4:	d104      	bne.n	8004100 <HAL_TIM_IC_Start_IT+0x68>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	e00b      	b.n	8004118 <HAL_TIM_IC_Start_IT+0x80>
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	2b08      	cmp	r3, #8
 8004104:	d104      	bne.n	8004110 <HAL_TIM_IC_Start_IT+0x78>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800410c:	b2db      	uxtb	r3, r3
 800410e:	e003      	b.n	8004118 <HAL_TIM_IC_Start_IT+0x80>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004116:	b2db      	uxtb	r3, r3
 8004118:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800411a:	7bbb      	ldrb	r3, [r7, #14]
 800411c:	2b01      	cmp	r3, #1
 800411e:	d102      	bne.n	8004126 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004120:	7b7b      	ldrb	r3, [r7, #13]
 8004122:	2b01      	cmp	r3, #1
 8004124:	d001      	beq.n	800412a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e0cc      	b.n	80042c4 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d104      	bne.n	800413a <HAL_TIM_IC_Start_IT+0xa2>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2202      	movs	r2, #2
 8004134:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004138:	e013      	b.n	8004162 <HAL_TIM_IC_Start_IT+0xca>
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	2b04      	cmp	r3, #4
 800413e:	d104      	bne.n	800414a <HAL_TIM_IC_Start_IT+0xb2>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2202      	movs	r2, #2
 8004144:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004148:	e00b      	b.n	8004162 <HAL_TIM_IC_Start_IT+0xca>
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	2b08      	cmp	r3, #8
 800414e:	d104      	bne.n	800415a <HAL_TIM_IC_Start_IT+0xc2>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2202      	movs	r2, #2
 8004154:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004158:	e003      	b.n	8004162 <HAL_TIM_IC_Start_IT+0xca>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2202      	movs	r2, #2
 800415e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d104      	bne.n	8004172 <HAL_TIM_IC_Start_IT+0xda>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2202      	movs	r2, #2
 800416c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004170:	e013      	b.n	800419a <HAL_TIM_IC_Start_IT+0x102>
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	2b04      	cmp	r3, #4
 8004176:	d104      	bne.n	8004182 <HAL_TIM_IC_Start_IT+0xea>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2202      	movs	r2, #2
 800417c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004180:	e00b      	b.n	800419a <HAL_TIM_IC_Start_IT+0x102>
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	2b08      	cmp	r3, #8
 8004186:	d104      	bne.n	8004192 <HAL_TIM_IC_Start_IT+0xfa>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2202      	movs	r2, #2
 800418c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004190:	e003      	b.n	800419a <HAL_TIM_IC_Start_IT+0x102>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2202      	movs	r2, #2
 8004196:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	2b0c      	cmp	r3, #12
 800419e:	d841      	bhi.n	8004224 <HAL_TIM_IC_Start_IT+0x18c>
 80041a0:	a201      	add	r2, pc, #4	@ (adr r2, 80041a8 <HAL_TIM_IC_Start_IT+0x110>)
 80041a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041a6:	bf00      	nop
 80041a8:	080041dd 	.word	0x080041dd
 80041ac:	08004225 	.word	0x08004225
 80041b0:	08004225 	.word	0x08004225
 80041b4:	08004225 	.word	0x08004225
 80041b8:	080041ef 	.word	0x080041ef
 80041bc:	08004225 	.word	0x08004225
 80041c0:	08004225 	.word	0x08004225
 80041c4:	08004225 	.word	0x08004225
 80041c8:	08004201 	.word	0x08004201
 80041cc:	08004225 	.word	0x08004225
 80041d0:	08004225 	.word	0x08004225
 80041d4:	08004225 	.word	0x08004225
 80041d8:	08004213 	.word	0x08004213
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	68da      	ldr	r2, [r3, #12]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f042 0202 	orr.w	r2, r2, #2
 80041ea:	60da      	str	r2, [r3, #12]
      break;
 80041ec:	e01d      	b.n	800422a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	68da      	ldr	r2, [r3, #12]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f042 0204 	orr.w	r2, r2, #4
 80041fc:	60da      	str	r2, [r3, #12]
      break;
 80041fe:	e014      	b.n	800422a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	68da      	ldr	r2, [r3, #12]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f042 0208 	orr.w	r2, r2, #8
 800420e:	60da      	str	r2, [r3, #12]
      break;
 8004210:	e00b      	b.n	800422a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	68da      	ldr	r2, [r3, #12]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f042 0210 	orr.w	r2, r2, #16
 8004220:	60da      	str	r2, [r3, #12]
      break;
 8004222:	e002      	b.n	800422a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	73fb      	strb	r3, [r7, #15]
      break;
 8004228:	bf00      	nop
  }

  if (status == HAL_OK)
 800422a:	7bfb      	ldrb	r3, [r7, #15]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d148      	bne.n	80042c2 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2201      	movs	r2, #1
 8004236:	6839      	ldr	r1, [r7, #0]
 8004238:	4618      	mov	r0, r3
 800423a:	f000 fc23 	bl	8004a84 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a22      	ldr	r2, [pc, #136]	@ (80042cc <HAL_TIM_IC_Start_IT+0x234>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d022      	beq.n	800428e <HAL_TIM_IC_Start_IT+0x1f6>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004250:	d01d      	beq.n	800428e <HAL_TIM_IC_Start_IT+0x1f6>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a1e      	ldr	r2, [pc, #120]	@ (80042d0 <HAL_TIM_IC_Start_IT+0x238>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d018      	beq.n	800428e <HAL_TIM_IC_Start_IT+0x1f6>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a1c      	ldr	r2, [pc, #112]	@ (80042d4 <HAL_TIM_IC_Start_IT+0x23c>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d013      	beq.n	800428e <HAL_TIM_IC_Start_IT+0x1f6>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a1b      	ldr	r2, [pc, #108]	@ (80042d8 <HAL_TIM_IC_Start_IT+0x240>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d00e      	beq.n	800428e <HAL_TIM_IC_Start_IT+0x1f6>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a19      	ldr	r2, [pc, #100]	@ (80042dc <HAL_TIM_IC_Start_IT+0x244>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d009      	beq.n	800428e <HAL_TIM_IC_Start_IT+0x1f6>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a18      	ldr	r2, [pc, #96]	@ (80042e0 <HAL_TIM_IC_Start_IT+0x248>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d004      	beq.n	800428e <HAL_TIM_IC_Start_IT+0x1f6>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a16      	ldr	r2, [pc, #88]	@ (80042e4 <HAL_TIM_IC_Start_IT+0x24c>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d111      	bne.n	80042b2 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	f003 0307 	and.w	r3, r3, #7
 8004298:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	2b06      	cmp	r3, #6
 800429e:	d010      	beq.n	80042c2 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f042 0201 	orr.w	r2, r2, #1
 80042ae:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042b0:	e007      	b.n	80042c2 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f042 0201 	orr.w	r2, r2, #1
 80042c0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80042c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3710      	adds	r7, #16
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}
 80042cc:	40010000 	.word	0x40010000
 80042d0:	40000400 	.word	0x40000400
 80042d4:	40000800 	.word	0x40000800
 80042d8:	40000c00 	.word	0x40000c00
 80042dc:	40010400 	.word	0x40010400
 80042e0:	40014000 	.word	0x40014000
 80042e4:	40001800 	.word	0x40001800

080042e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	f003 0302 	and.w	r3, r3, #2
 8004306:	2b00      	cmp	r3, #0
 8004308:	d020      	beq.n	800434c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	f003 0302 	and.w	r3, r3, #2
 8004310:	2b00      	cmp	r3, #0
 8004312:	d01b      	beq.n	800434c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f06f 0202 	mvn.w	r2, #2
 800431c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2201      	movs	r2, #1
 8004322:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	699b      	ldr	r3, [r3, #24]
 800432a:	f003 0303 	and.w	r3, r3, #3
 800432e:	2b00      	cmp	r3, #0
 8004330:	d003      	beq.n	800433a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f7fc fdec 	bl	8000f10 <HAL_TIM_IC_CaptureCallback>
 8004338:	e005      	b.n	8004346 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f000 f9ae 	bl	800469c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f000 f9b5 	bl	80046b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	f003 0304 	and.w	r3, r3, #4
 8004352:	2b00      	cmp	r3, #0
 8004354:	d020      	beq.n	8004398 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f003 0304 	and.w	r3, r3, #4
 800435c:	2b00      	cmp	r3, #0
 800435e:	d01b      	beq.n	8004398 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f06f 0204 	mvn.w	r2, #4
 8004368:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2202      	movs	r2, #2
 800436e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	699b      	ldr	r3, [r3, #24]
 8004376:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800437a:	2b00      	cmp	r3, #0
 800437c:	d003      	beq.n	8004386 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f7fc fdc6 	bl	8000f10 <HAL_TIM_IC_CaptureCallback>
 8004384:	e005      	b.n	8004392 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 f988 	bl	800469c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f000 f98f 	bl	80046b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	f003 0308 	and.w	r3, r3, #8
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d020      	beq.n	80043e4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f003 0308 	and.w	r3, r3, #8
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d01b      	beq.n	80043e4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f06f 0208 	mvn.w	r2, #8
 80043b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2204      	movs	r2, #4
 80043ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	69db      	ldr	r3, [r3, #28]
 80043c2:	f003 0303 	and.w	r3, r3, #3
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d003      	beq.n	80043d2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f7fc fda0 	bl	8000f10 <HAL_TIM_IC_CaptureCallback>
 80043d0:	e005      	b.n	80043de <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f000 f962 	bl	800469c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f000 f969 	bl	80046b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	f003 0310 	and.w	r3, r3, #16
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d020      	beq.n	8004430 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	f003 0310 	and.w	r3, r3, #16
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d01b      	beq.n	8004430 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f06f 0210 	mvn.w	r2, #16
 8004400:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2208      	movs	r2, #8
 8004406:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	69db      	ldr	r3, [r3, #28]
 800440e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004412:	2b00      	cmp	r3, #0
 8004414:	d003      	beq.n	800441e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f7fc fd7a 	bl	8000f10 <HAL_TIM_IC_CaptureCallback>
 800441c:	e005      	b.n	800442a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f000 f93c 	bl	800469c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f000 f943 	bl	80046b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	f003 0301 	and.w	r3, r3, #1
 8004436:	2b00      	cmp	r3, #0
 8004438:	d00c      	beq.n	8004454 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f003 0301 	and.w	r3, r3, #1
 8004440:	2b00      	cmp	r3, #0
 8004442:	d007      	beq.n	8004454 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f06f 0201 	mvn.w	r2, #1
 800444c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 f91a 	bl	8004688 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800445a:	2b00      	cmp	r3, #0
 800445c:	d00c      	beq.n	8004478 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004464:	2b00      	cmp	r3, #0
 8004466:	d007      	beq.n	8004478 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004470:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f000 fbb2 	bl	8004bdc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800447e:	2b00      	cmp	r3, #0
 8004480:	d00c      	beq.n	800449c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004488:	2b00      	cmp	r3, #0
 800448a:	d007      	beq.n	800449c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004494:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 f914 	bl	80046c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	f003 0320 	and.w	r3, r3, #32
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d00c      	beq.n	80044c0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	f003 0320 	and.w	r3, r3, #32
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d007      	beq.n	80044c0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f06f 0220 	mvn.w	r2, #32
 80044b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 fb84 	bl	8004bc8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044c0:	bf00      	nop
 80044c2:	3710      	adds	r7, #16
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b086      	sub	sp, #24
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	60f8      	str	r0, [r7, #12]
 80044d0:	60b9      	str	r1, [r7, #8]
 80044d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044d4:	2300      	movs	r3, #0
 80044d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d101      	bne.n	80044e6 <HAL_TIM_IC_ConfigChannel+0x1e>
 80044e2:	2302      	movs	r3, #2
 80044e4:	e088      	b.n	80045f8 <HAL_TIM_IC_ConfigChannel+0x130>
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2201      	movs	r2, #1
 80044ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d11b      	bne.n	800452c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8004504:	f000 f994 	bl	8004830 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	699a      	ldr	r2, [r3, #24]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f022 020c 	bic.w	r2, r2, #12
 8004516:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	6999      	ldr	r1, [r3, #24]
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	689a      	ldr	r2, [r3, #8]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	430a      	orrs	r2, r1
 8004528:	619a      	str	r2, [r3, #24]
 800452a:	e060      	b.n	80045ee <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2b04      	cmp	r3, #4
 8004530:	d11c      	bne.n	800456c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8004542:	f000 f9e9 	bl	8004918 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	699a      	ldr	r2, [r3, #24]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004554:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	6999      	ldr	r1, [r3, #24]
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	021a      	lsls	r2, r3, #8
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	430a      	orrs	r2, r1
 8004568:	619a      	str	r2, [r3, #24]
 800456a:	e040      	b.n	80045ee <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2b08      	cmp	r3, #8
 8004570:	d11b      	bne.n	80045aa <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8004582:	f000 fa06 	bl	8004992 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	69da      	ldr	r2, [r3, #28]
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f022 020c 	bic.w	r2, r2, #12
 8004594:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	69d9      	ldr	r1, [r3, #28]
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	689a      	ldr	r2, [r3, #8]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	430a      	orrs	r2, r1
 80045a6:	61da      	str	r2, [r3, #28]
 80045a8:	e021      	b.n	80045ee <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2b0c      	cmp	r3, #12
 80045ae:	d11c      	bne.n	80045ea <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80045c0:	f000 fa23 	bl	8004a0a <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	69da      	ldr	r2, [r3, #28]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80045d2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	69d9      	ldr	r1, [r3, #28]
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	021a      	lsls	r2, r3, #8
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	430a      	orrs	r2, r1
 80045e6:	61da      	str	r2, [r3, #28]
 80045e8:	e001      	b.n	80045ee <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80045f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3718      	adds	r7, #24
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}

08004600 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004600:	b480      	push	{r7}
 8004602:	b085      	sub	sp, #20
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800460a:	2300      	movs	r3, #0
 800460c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	2b0c      	cmp	r3, #12
 8004612:	d831      	bhi.n	8004678 <HAL_TIM_ReadCapturedValue+0x78>
 8004614:	a201      	add	r2, pc, #4	@ (adr r2, 800461c <HAL_TIM_ReadCapturedValue+0x1c>)
 8004616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800461a:	bf00      	nop
 800461c:	08004651 	.word	0x08004651
 8004620:	08004679 	.word	0x08004679
 8004624:	08004679 	.word	0x08004679
 8004628:	08004679 	.word	0x08004679
 800462c:	0800465b 	.word	0x0800465b
 8004630:	08004679 	.word	0x08004679
 8004634:	08004679 	.word	0x08004679
 8004638:	08004679 	.word	0x08004679
 800463c:	08004665 	.word	0x08004665
 8004640:	08004679 	.word	0x08004679
 8004644:	08004679 	.word	0x08004679
 8004648:	08004679 	.word	0x08004679
 800464c:	0800466f 	.word	0x0800466f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004656:	60fb      	str	r3, [r7, #12]

      break;
 8004658:	e00f      	b.n	800467a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004660:	60fb      	str	r3, [r7, #12]

      break;
 8004662:	e00a      	b.n	800467a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800466a:	60fb      	str	r3, [r7, #12]

      break;
 800466c:	e005      	b.n	800467a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004674:	60fb      	str	r3, [r7, #12]

      break;
 8004676:	e000      	b.n	800467a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004678:	bf00      	nop
  }

  return tmpreg;
 800467a:	68fb      	ldr	r3, [r7, #12]
}
 800467c:	4618      	mov	r0, r3
 800467e:	3714      	adds	r7, #20
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr

08004688 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004688:	b480      	push	{r7}
 800468a:	b083      	sub	sp, #12
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004690:	bf00      	nop
 8004692:	370c      	adds	r7, #12
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr

0800469c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800469c:	b480      	push	{r7}
 800469e:	b083      	sub	sp, #12
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046a4:	bf00      	nop
 80046a6:	370c      	adds	r7, #12
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr

080046b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b083      	sub	sp, #12
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80046b8:	bf00      	nop
 80046ba:	370c      	adds	r7, #12
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr

080046c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80046cc:	bf00      	nop
 80046ce:	370c      	adds	r7, #12
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr

080046d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80046d8:	b480      	push	{r7}
 80046da:	b085      	sub	sp, #20
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	4a46      	ldr	r2, [pc, #280]	@ (8004804 <TIM_Base_SetConfig+0x12c>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d013      	beq.n	8004718 <TIM_Base_SetConfig+0x40>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046f6:	d00f      	beq.n	8004718 <TIM_Base_SetConfig+0x40>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	4a43      	ldr	r2, [pc, #268]	@ (8004808 <TIM_Base_SetConfig+0x130>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d00b      	beq.n	8004718 <TIM_Base_SetConfig+0x40>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	4a42      	ldr	r2, [pc, #264]	@ (800480c <TIM_Base_SetConfig+0x134>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d007      	beq.n	8004718 <TIM_Base_SetConfig+0x40>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	4a41      	ldr	r2, [pc, #260]	@ (8004810 <TIM_Base_SetConfig+0x138>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d003      	beq.n	8004718 <TIM_Base_SetConfig+0x40>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	4a40      	ldr	r2, [pc, #256]	@ (8004814 <TIM_Base_SetConfig+0x13c>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d108      	bne.n	800472a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800471e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	68fa      	ldr	r2, [r7, #12]
 8004726:	4313      	orrs	r3, r2
 8004728:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4a35      	ldr	r2, [pc, #212]	@ (8004804 <TIM_Base_SetConfig+0x12c>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d02b      	beq.n	800478a <TIM_Base_SetConfig+0xb2>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004738:	d027      	beq.n	800478a <TIM_Base_SetConfig+0xb2>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4a32      	ldr	r2, [pc, #200]	@ (8004808 <TIM_Base_SetConfig+0x130>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d023      	beq.n	800478a <TIM_Base_SetConfig+0xb2>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4a31      	ldr	r2, [pc, #196]	@ (800480c <TIM_Base_SetConfig+0x134>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d01f      	beq.n	800478a <TIM_Base_SetConfig+0xb2>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4a30      	ldr	r2, [pc, #192]	@ (8004810 <TIM_Base_SetConfig+0x138>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d01b      	beq.n	800478a <TIM_Base_SetConfig+0xb2>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4a2f      	ldr	r2, [pc, #188]	@ (8004814 <TIM_Base_SetConfig+0x13c>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d017      	beq.n	800478a <TIM_Base_SetConfig+0xb2>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4a2e      	ldr	r2, [pc, #184]	@ (8004818 <TIM_Base_SetConfig+0x140>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d013      	beq.n	800478a <TIM_Base_SetConfig+0xb2>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4a2d      	ldr	r2, [pc, #180]	@ (800481c <TIM_Base_SetConfig+0x144>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d00f      	beq.n	800478a <TIM_Base_SetConfig+0xb2>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a2c      	ldr	r2, [pc, #176]	@ (8004820 <TIM_Base_SetConfig+0x148>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d00b      	beq.n	800478a <TIM_Base_SetConfig+0xb2>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a2b      	ldr	r2, [pc, #172]	@ (8004824 <TIM_Base_SetConfig+0x14c>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d007      	beq.n	800478a <TIM_Base_SetConfig+0xb2>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4a2a      	ldr	r2, [pc, #168]	@ (8004828 <TIM_Base_SetConfig+0x150>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d003      	beq.n	800478a <TIM_Base_SetConfig+0xb2>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4a29      	ldr	r2, [pc, #164]	@ (800482c <TIM_Base_SetConfig+0x154>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d108      	bne.n	800479c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004790:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	68fa      	ldr	r2, [r7, #12]
 8004798:	4313      	orrs	r3, r2
 800479a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	695b      	ldr	r3, [r3, #20]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	68fa      	ldr	r2, [r7, #12]
 80047ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	689a      	ldr	r2, [r3, #8]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	4a10      	ldr	r2, [pc, #64]	@ (8004804 <TIM_Base_SetConfig+0x12c>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d003      	beq.n	80047d0 <TIM_Base_SetConfig+0xf8>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	4a12      	ldr	r2, [pc, #72]	@ (8004814 <TIM_Base_SetConfig+0x13c>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d103      	bne.n	80047d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	691a      	ldr	r2, [r3, #16]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	691b      	ldr	r3, [r3, #16]
 80047e2:	f003 0301 	and.w	r3, r3, #1
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d105      	bne.n	80047f6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	f023 0201 	bic.w	r2, r3, #1
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	611a      	str	r2, [r3, #16]
  }
}
 80047f6:	bf00      	nop
 80047f8:	3714      	adds	r7, #20
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr
 8004802:	bf00      	nop
 8004804:	40010000 	.word	0x40010000
 8004808:	40000400 	.word	0x40000400
 800480c:	40000800 	.word	0x40000800
 8004810:	40000c00 	.word	0x40000c00
 8004814:	40010400 	.word	0x40010400
 8004818:	40014000 	.word	0x40014000
 800481c:	40014400 	.word	0x40014400
 8004820:	40014800 	.word	0x40014800
 8004824:	40001800 	.word	0x40001800
 8004828:	40001c00 	.word	0x40001c00
 800482c:	40002000 	.word	0x40002000

08004830 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004830:	b480      	push	{r7}
 8004832:	b087      	sub	sp, #28
 8004834:	af00      	add	r7, sp, #0
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	60b9      	str	r1, [r7, #8]
 800483a:	607a      	str	r2, [r7, #4]
 800483c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6a1b      	ldr	r3, [r3, #32]
 8004842:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	6a1b      	ldr	r3, [r3, #32]
 8004848:	f023 0201 	bic.w	r2, r3, #1
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	699b      	ldr	r3, [r3, #24]
 8004854:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	4a28      	ldr	r2, [pc, #160]	@ (80048fc <TIM_TI1_SetConfig+0xcc>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d01b      	beq.n	8004896 <TIM_TI1_SetConfig+0x66>
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004864:	d017      	beq.n	8004896 <TIM_TI1_SetConfig+0x66>
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	4a25      	ldr	r2, [pc, #148]	@ (8004900 <TIM_TI1_SetConfig+0xd0>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d013      	beq.n	8004896 <TIM_TI1_SetConfig+0x66>
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	4a24      	ldr	r2, [pc, #144]	@ (8004904 <TIM_TI1_SetConfig+0xd4>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d00f      	beq.n	8004896 <TIM_TI1_SetConfig+0x66>
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	4a23      	ldr	r2, [pc, #140]	@ (8004908 <TIM_TI1_SetConfig+0xd8>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d00b      	beq.n	8004896 <TIM_TI1_SetConfig+0x66>
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	4a22      	ldr	r2, [pc, #136]	@ (800490c <TIM_TI1_SetConfig+0xdc>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d007      	beq.n	8004896 <TIM_TI1_SetConfig+0x66>
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	4a21      	ldr	r2, [pc, #132]	@ (8004910 <TIM_TI1_SetConfig+0xe0>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d003      	beq.n	8004896 <TIM_TI1_SetConfig+0x66>
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	4a20      	ldr	r2, [pc, #128]	@ (8004914 <TIM_TI1_SetConfig+0xe4>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d101      	bne.n	800489a <TIM_TI1_SetConfig+0x6a>
 8004896:	2301      	movs	r3, #1
 8004898:	e000      	b.n	800489c <TIM_TI1_SetConfig+0x6c>
 800489a:	2300      	movs	r3, #0
 800489c:	2b00      	cmp	r3, #0
 800489e:	d008      	beq.n	80048b2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	f023 0303 	bic.w	r3, r3, #3
 80048a6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80048a8:	697a      	ldr	r2, [r7, #20]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	617b      	str	r3, [r7, #20]
 80048b0:	e003      	b.n	80048ba <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	f043 0301 	orr.w	r3, r3, #1
 80048b8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80048c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	011b      	lsls	r3, r3, #4
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	697a      	ldr	r2, [r7, #20]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	f023 030a 	bic.w	r3, r3, #10
 80048d4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	f003 030a 	and.w	r3, r3, #10
 80048dc:	693a      	ldr	r2, [r7, #16]
 80048de:	4313      	orrs	r3, r2
 80048e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	697a      	ldr	r2, [r7, #20]
 80048e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	693a      	ldr	r2, [r7, #16]
 80048ec:	621a      	str	r2, [r3, #32]
}
 80048ee:	bf00      	nop
 80048f0:	371c      	adds	r7, #28
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	40010000 	.word	0x40010000
 8004900:	40000400 	.word	0x40000400
 8004904:	40000800 	.word	0x40000800
 8004908:	40000c00 	.word	0x40000c00
 800490c:	40010400 	.word	0x40010400
 8004910:	40014000 	.word	0x40014000
 8004914:	40001800 	.word	0x40001800

08004918 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004918:	b480      	push	{r7}
 800491a:	b087      	sub	sp, #28
 800491c:	af00      	add	r7, sp, #0
 800491e:	60f8      	str	r0, [r7, #12]
 8004920:	60b9      	str	r1, [r7, #8]
 8004922:	607a      	str	r2, [r7, #4]
 8004924:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	6a1b      	ldr	r3, [r3, #32]
 800492a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	6a1b      	ldr	r3, [r3, #32]
 8004930:	f023 0210 	bic.w	r2, r3, #16
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	699b      	ldr	r3, [r3, #24]
 800493c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004944:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	021b      	lsls	r3, r3, #8
 800494a:	693a      	ldr	r2, [r7, #16]
 800494c:	4313      	orrs	r3, r2
 800494e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004956:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	031b      	lsls	r3, r3, #12
 800495c:	b29b      	uxth	r3, r3
 800495e:	693a      	ldr	r2, [r7, #16]
 8004960:	4313      	orrs	r3, r2
 8004962:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800496a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	011b      	lsls	r3, r3, #4
 8004970:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8004974:	697a      	ldr	r2, [r7, #20]
 8004976:	4313      	orrs	r3, r2
 8004978:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	693a      	ldr	r2, [r7, #16]
 800497e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	697a      	ldr	r2, [r7, #20]
 8004984:	621a      	str	r2, [r3, #32]
}
 8004986:	bf00      	nop
 8004988:	371c      	adds	r7, #28
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr

08004992 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004992:	b480      	push	{r7}
 8004994:	b087      	sub	sp, #28
 8004996:	af00      	add	r7, sp, #0
 8004998:	60f8      	str	r0, [r7, #12]
 800499a:	60b9      	str	r1, [r7, #8]
 800499c:	607a      	str	r2, [r7, #4]
 800499e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6a1b      	ldr	r3, [r3, #32]
 80049a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	6a1b      	ldr	r3, [r3, #32]
 80049aa:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	69db      	ldr	r3, [r3, #28]
 80049b6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	f023 0303 	bic.w	r3, r3, #3
 80049be:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80049c0:	693a      	ldr	r2, [r7, #16]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80049ce:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	011b      	lsls	r3, r3, #4
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	693a      	ldr	r2, [r7, #16]
 80049d8:	4313      	orrs	r3, r2
 80049da:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80049e2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	021b      	lsls	r3, r3, #8
 80049e8:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80049ec:	697a      	ldr	r2, [r7, #20]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	693a      	ldr	r2, [r7, #16]
 80049f6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	697a      	ldr	r2, [r7, #20]
 80049fc:	621a      	str	r2, [r3, #32]
}
 80049fe:	bf00      	nop
 8004a00:	371c      	adds	r7, #28
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr

08004a0a <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004a0a:	b480      	push	{r7}
 8004a0c:	b087      	sub	sp, #28
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	60f8      	str	r0, [r7, #12]
 8004a12:	60b9      	str	r1, [r7, #8]
 8004a14:	607a      	str	r2, [r7, #4]
 8004a16:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6a1b      	ldr	r3, [r3, #32]
 8004a1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6a1b      	ldr	r3, [r3, #32]
 8004a22:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	69db      	ldr	r3, [r3, #28]
 8004a2e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a36:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	021b      	lsls	r3, r3, #8
 8004a3c:	693a      	ldr	r2, [r7, #16]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004a48:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	031b      	lsls	r3, r3, #12
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	693a      	ldr	r2, [r7, #16]
 8004a52:	4313      	orrs	r3, r2
 8004a54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8004a5c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	031b      	lsls	r3, r3, #12
 8004a62:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8004a66:	697a      	ldr	r2, [r7, #20]
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	693a      	ldr	r2, [r7, #16]
 8004a70:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	697a      	ldr	r2, [r7, #20]
 8004a76:	621a      	str	r2, [r3, #32]
}
 8004a78:	bf00      	nop
 8004a7a:	371c      	adds	r7, #28
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr

08004a84 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b087      	sub	sp, #28
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	60b9      	str	r1, [r7, #8]
 8004a8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	f003 031f 	and.w	r3, r3, #31
 8004a96:	2201      	movs	r2, #1
 8004a98:	fa02 f303 	lsl.w	r3, r2, r3
 8004a9c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	6a1a      	ldr	r2, [r3, #32]
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	43db      	mvns	r3, r3
 8004aa6:	401a      	ands	r2, r3
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6a1a      	ldr	r2, [r3, #32]
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	f003 031f 	and.w	r3, r3, #31
 8004ab6:	6879      	ldr	r1, [r7, #4]
 8004ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8004abc:	431a      	orrs	r2, r3
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	621a      	str	r2, [r3, #32]
}
 8004ac2:	bf00      	nop
 8004ac4:	371c      	adds	r7, #28
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr
	...

08004ad0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b085      	sub	sp, #20
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d101      	bne.n	8004ae8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ae4:	2302      	movs	r3, #2
 8004ae6:	e05a      	b.n	8004b9e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2202      	movs	r2, #2
 8004af4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	68fa      	ldr	r2, [r7, #12]
 8004b16:	4313      	orrs	r3, r2
 8004b18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	68fa      	ldr	r2, [r7, #12]
 8004b20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a21      	ldr	r2, [pc, #132]	@ (8004bac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d022      	beq.n	8004b72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b34:	d01d      	beq.n	8004b72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a1d      	ldr	r2, [pc, #116]	@ (8004bb0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d018      	beq.n	8004b72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a1b      	ldr	r2, [pc, #108]	@ (8004bb4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d013      	beq.n	8004b72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a1a      	ldr	r2, [pc, #104]	@ (8004bb8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d00e      	beq.n	8004b72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a18      	ldr	r2, [pc, #96]	@ (8004bbc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d009      	beq.n	8004b72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a17      	ldr	r2, [pc, #92]	@ (8004bc0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d004      	beq.n	8004b72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a15      	ldr	r2, [pc, #84]	@ (8004bc4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d10c      	bne.n	8004b8c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	68ba      	ldr	r2, [r7, #8]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	68ba      	ldr	r2, [r7, #8]
 8004b8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004b9c:	2300      	movs	r3, #0
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3714      	adds	r7, #20
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr
 8004baa:	bf00      	nop
 8004bac:	40010000 	.word	0x40010000
 8004bb0:	40000400 	.word	0x40000400
 8004bb4:	40000800 	.word	0x40000800
 8004bb8:	40000c00 	.word	0x40000c00
 8004bbc:	40010400 	.word	0x40010400
 8004bc0:	40014000 	.word	0x40014000
 8004bc4:	40001800 	.word	0x40001800

08004bc8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b083      	sub	sp, #12
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004bd0:	bf00      	nop
 8004bd2:	370c      	adds	r7, #12
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr

08004bdc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b083      	sub	sp, #12
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004be4:	bf00      	nop
 8004be6:	370c      	adds	r7, #12
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr

08004bf0 <__cvt>:
 8004bf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004bf4:	ec57 6b10 	vmov	r6, r7, d0
 8004bf8:	2f00      	cmp	r7, #0
 8004bfa:	460c      	mov	r4, r1
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	463b      	mov	r3, r7
 8004c00:	bfbb      	ittet	lt
 8004c02:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004c06:	461f      	movlt	r7, r3
 8004c08:	2300      	movge	r3, #0
 8004c0a:	232d      	movlt	r3, #45	@ 0x2d
 8004c0c:	700b      	strb	r3, [r1, #0]
 8004c0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004c10:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004c14:	4691      	mov	r9, r2
 8004c16:	f023 0820 	bic.w	r8, r3, #32
 8004c1a:	bfbc      	itt	lt
 8004c1c:	4632      	movlt	r2, r6
 8004c1e:	4616      	movlt	r6, r2
 8004c20:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004c24:	d005      	beq.n	8004c32 <__cvt+0x42>
 8004c26:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004c2a:	d100      	bne.n	8004c2e <__cvt+0x3e>
 8004c2c:	3401      	adds	r4, #1
 8004c2e:	2102      	movs	r1, #2
 8004c30:	e000      	b.n	8004c34 <__cvt+0x44>
 8004c32:	2103      	movs	r1, #3
 8004c34:	ab03      	add	r3, sp, #12
 8004c36:	9301      	str	r3, [sp, #4]
 8004c38:	ab02      	add	r3, sp, #8
 8004c3a:	9300      	str	r3, [sp, #0]
 8004c3c:	ec47 6b10 	vmov	d0, r6, r7
 8004c40:	4653      	mov	r3, sl
 8004c42:	4622      	mov	r2, r4
 8004c44:	f000 fe3c 	bl	80058c0 <_dtoa_r>
 8004c48:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004c4c:	4605      	mov	r5, r0
 8004c4e:	d119      	bne.n	8004c84 <__cvt+0x94>
 8004c50:	f019 0f01 	tst.w	r9, #1
 8004c54:	d00e      	beq.n	8004c74 <__cvt+0x84>
 8004c56:	eb00 0904 	add.w	r9, r0, r4
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	4630      	mov	r0, r6
 8004c60:	4639      	mov	r1, r7
 8004c62:	f7fb ff31 	bl	8000ac8 <__aeabi_dcmpeq>
 8004c66:	b108      	cbz	r0, 8004c6c <__cvt+0x7c>
 8004c68:	f8cd 900c 	str.w	r9, [sp, #12]
 8004c6c:	2230      	movs	r2, #48	@ 0x30
 8004c6e:	9b03      	ldr	r3, [sp, #12]
 8004c70:	454b      	cmp	r3, r9
 8004c72:	d31e      	bcc.n	8004cb2 <__cvt+0xc2>
 8004c74:	9b03      	ldr	r3, [sp, #12]
 8004c76:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004c78:	1b5b      	subs	r3, r3, r5
 8004c7a:	4628      	mov	r0, r5
 8004c7c:	6013      	str	r3, [r2, #0]
 8004c7e:	b004      	add	sp, #16
 8004c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c84:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004c88:	eb00 0904 	add.w	r9, r0, r4
 8004c8c:	d1e5      	bne.n	8004c5a <__cvt+0x6a>
 8004c8e:	7803      	ldrb	r3, [r0, #0]
 8004c90:	2b30      	cmp	r3, #48	@ 0x30
 8004c92:	d10a      	bne.n	8004caa <__cvt+0xba>
 8004c94:	2200      	movs	r2, #0
 8004c96:	2300      	movs	r3, #0
 8004c98:	4630      	mov	r0, r6
 8004c9a:	4639      	mov	r1, r7
 8004c9c:	f7fb ff14 	bl	8000ac8 <__aeabi_dcmpeq>
 8004ca0:	b918      	cbnz	r0, 8004caa <__cvt+0xba>
 8004ca2:	f1c4 0401 	rsb	r4, r4, #1
 8004ca6:	f8ca 4000 	str.w	r4, [sl]
 8004caa:	f8da 3000 	ldr.w	r3, [sl]
 8004cae:	4499      	add	r9, r3
 8004cb0:	e7d3      	b.n	8004c5a <__cvt+0x6a>
 8004cb2:	1c59      	adds	r1, r3, #1
 8004cb4:	9103      	str	r1, [sp, #12]
 8004cb6:	701a      	strb	r2, [r3, #0]
 8004cb8:	e7d9      	b.n	8004c6e <__cvt+0x7e>

08004cba <__exponent>:
 8004cba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004cbc:	2900      	cmp	r1, #0
 8004cbe:	bfba      	itte	lt
 8004cc0:	4249      	neglt	r1, r1
 8004cc2:	232d      	movlt	r3, #45	@ 0x2d
 8004cc4:	232b      	movge	r3, #43	@ 0x2b
 8004cc6:	2909      	cmp	r1, #9
 8004cc8:	7002      	strb	r2, [r0, #0]
 8004cca:	7043      	strb	r3, [r0, #1]
 8004ccc:	dd29      	ble.n	8004d22 <__exponent+0x68>
 8004cce:	f10d 0307 	add.w	r3, sp, #7
 8004cd2:	461d      	mov	r5, r3
 8004cd4:	270a      	movs	r7, #10
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	fbb1 f6f7 	udiv	r6, r1, r7
 8004cdc:	fb07 1416 	mls	r4, r7, r6, r1
 8004ce0:	3430      	adds	r4, #48	@ 0x30
 8004ce2:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004ce6:	460c      	mov	r4, r1
 8004ce8:	2c63      	cmp	r4, #99	@ 0x63
 8004cea:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8004cee:	4631      	mov	r1, r6
 8004cf0:	dcf1      	bgt.n	8004cd6 <__exponent+0x1c>
 8004cf2:	3130      	adds	r1, #48	@ 0x30
 8004cf4:	1e94      	subs	r4, r2, #2
 8004cf6:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004cfa:	1c41      	adds	r1, r0, #1
 8004cfc:	4623      	mov	r3, r4
 8004cfe:	42ab      	cmp	r3, r5
 8004d00:	d30a      	bcc.n	8004d18 <__exponent+0x5e>
 8004d02:	f10d 0309 	add.w	r3, sp, #9
 8004d06:	1a9b      	subs	r3, r3, r2
 8004d08:	42ac      	cmp	r4, r5
 8004d0a:	bf88      	it	hi
 8004d0c:	2300      	movhi	r3, #0
 8004d0e:	3302      	adds	r3, #2
 8004d10:	4403      	add	r3, r0
 8004d12:	1a18      	subs	r0, r3, r0
 8004d14:	b003      	add	sp, #12
 8004d16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d18:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004d1c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004d20:	e7ed      	b.n	8004cfe <__exponent+0x44>
 8004d22:	2330      	movs	r3, #48	@ 0x30
 8004d24:	3130      	adds	r1, #48	@ 0x30
 8004d26:	7083      	strb	r3, [r0, #2]
 8004d28:	70c1      	strb	r1, [r0, #3]
 8004d2a:	1d03      	adds	r3, r0, #4
 8004d2c:	e7f1      	b.n	8004d12 <__exponent+0x58>
	...

08004d30 <_printf_float>:
 8004d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d34:	b08d      	sub	sp, #52	@ 0x34
 8004d36:	460c      	mov	r4, r1
 8004d38:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004d3c:	4616      	mov	r6, r2
 8004d3e:	461f      	mov	r7, r3
 8004d40:	4605      	mov	r5, r0
 8004d42:	f000 fcbb 	bl	80056bc <_localeconv_r>
 8004d46:	6803      	ldr	r3, [r0, #0]
 8004d48:	9304      	str	r3, [sp, #16]
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f7fb fa90 	bl	8000270 <strlen>
 8004d50:	2300      	movs	r3, #0
 8004d52:	930a      	str	r3, [sp, #40]	@ 0x28
 8004d54:	f8d8 3000 	ldr.w	r3, [r8]
 8004d58:	9005      	str	r0, [sp, #20]
 8004d5a:	3307      	adds	r3, #7
 8004d5c:	f023 0307 	bic.w	r3, r3, #7
 8004d60:	f103 0208 	add.w	r2, r3, #8
 8004d64:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004d68:	f8d4 b000 	ldr.w	fp, [r4]
 8004d6c:	f8c8 2000 	str.w	r2, [r8]
 8004d70:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004d74:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004d78:	9307      	str	r3, [sp, #28]
 8004d7a:	f8cd 8018 	str.w	r8, [sp, #24]
 8004d7e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004d82:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004d86:	4b9c      	ldr	r3, [pc, #624]	@ (8004ff8 <_printf_float+0x2c8>)
 8004d88:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004d8c:	f7fb fece 	bl	8000b2c <__aeabi_dcmpun>
 8004d90:	bb70      	cbnz	r0, 8004df0 <_printf_float+0xc0>
 8004d92:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004d96:	4b98      	ldr	r3, [pc, #608]	@ (8004ff8 <_printf_float+0x2c8>)
 8004d98:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004d9c:	f7fb fea8 	bl	8000af0 <__aeabi_dcmple>
 8004da0:	bb30      	cbnz	r0, 8004df0 <_printf_float+0xc0>
 8004da2:	2200      	movs	r2, #0
 8004da4:	2300      	movs	r3, #0
 8004da6:	4640      	mov	r0, r8
 8004da8:	4649      	mov	r1, r9
 8004daa:	f7fb fe97 	bl	8000adc <__aeabi_dcmplt>
 8004dae:	b110      	cbz	r0, 8004db6 <_printf_float+0x86>
 8004db0:	232d      	movs	r3, #45	@ 0x2d
 8004db2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004db6:	4a91      	ldr	r2, [pc, #580]	@ (8004ffc <_printf_float+0x2cc>)
 8004db8:	4b91      	ldr	r3, [pc, #580]	@ (8005000 <_printf_float+0x2d0>)
 8004dba:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004dbe:	bf94      	ite	ls
 8004dc0:	4690      	movls	r8, r2
 8004dc2:	4698      	movhi	r8, r3
 8004dc4:	2303      	movs	r3, #3
 8004dc6:	6123      	str	r3, [r4, #16]
 8004dc8:	f02b 0304 	bic.w	r3, fp, #4
 8004dcc:	6023      	str	r3, [r4, #0]
 8004dce:	f04f 0900 	mov.w	r9, #0
 8004dd2:	9700      	str	r7, [sp, #0]
 8004dd4:	4633      	mov	r3, r6
 8004dd6:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004dd8:	4621      	mov	r1, r4
 8004dda:	4628      	mov	r0, r5
 8004ddc:	f000 f9d2 	bl	8005184 <_printf_common>
 8004de0:	3001      	adds	r0, #1
 8004de2:	f040 808d 	bne.w	8004f00 <_printf_float+0x1d0>
 8004de6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004dea:	b00d      	add	sp, #52	@ 0x34
 8004dec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004df0:	4642      	mov	r2, r8
 8004df2:	464b      	mov	r3, r9
 8004df4:	4640      	mov	r0, r8
 8004df6:	4649      	mov	r1, r9
 8004df8:	f7fb fe98 	bl	8000b2c <__aeabi_dcmpun>
 8004dfc:	b140      	cbz	r0, 8004e10 <_printf_float+0xe0>
 8004dfe:	464b      	mov	r3, r9
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	bfbc      	itt	lt
 8004e04:	232d      	movlt	r3, #45	@ 0x2d
 8004e06:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004e0a:	4a7e      	ldr	r2, [pc, #504]	@ (8005004 <_printf_float+0x2d4>)
 8004e0c:	4b7e      	ldr	r3, [pc, #504]	@ (8005008 <_printf_float+0x2d8>)
 8004e0e:	e7d4      	b.n	8004dba <_printf_float+0x8a>
 8004e10:	6863      	ldr	r3, [r4, #4]
 8004e12:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004e16:	9206      	str	r2, [sp, #24]
 8004e18:	1c5a      	adds	r2, r3, #1
 8004e1a:	d13b      	bne.n	8004e94 <_printf_float+0x164>
 8004e1c:	2306      	movs	r3, #6
 8004e1e:	6063      	str	r3, [r4, #4]
 8004e20:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004e24:	2300      	movs	r3, #0
 8004e26:	6022      	str	r2, [r4, #0]
 8004e28:	9303      	str	r3, [sp, #12]
 8004e2a:	ab0a      	add	r3, sp, #40	@ 0x28
 8004e2c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004e30:	ab09      	add	r3, sp, #36	@ 0x24
 8004e32:	9300      	str	r3, [sp, #0]
 8004e34:	6861      	ldr	r1, [r4, #4]
 8004e36:	ec49 8b10 	vmov	d0, r8, r9
 8004e3a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004e3e:	4628      	mov	r0, r5
 8004e40:	f7ff fed6 	bl	8004bf0 <__cvt>
 8004e44:	9b06      	ldr	r3, [sp, #24]
 8004e46:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004e48:	2b47      	cmp	r3, #71	@ 0x47
 8004e4a:	4680      	mov	r8, r0
 8004e4c:	d129      	bne.n	8004ea2 <_printf_float+0x172>
 8004e4e:	1cc8      	adds	r0, r1, #3
 8004e50:	db02      	blt.n	8004e58 <_printf_float+0x128>
 8004e52:	6863      	ldr	r3, [r4, #4]
 8004e54:	4299      	cmp	r1, r3
 8004e56:	dd41      	ble.n	8004edc <_printf_float+0x1ac>
 8004e58:	f1aa 0a02 	sub.w	sl, sl, #2
 8004e5c:	fa5f fa8a 	uxtb.w	sl, sl
 8004e60:	3901      	subs	r1, #1
 8004e62:	4652      	mov	r2, sl
 8004e64:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004e68:	9109      	str	r1, [sp, #36]	@ 0x24
 8004e6a:	f7ff ff26 	bl	8004cba <__exponent>
 8004e6e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004e70:	1813      	adds	r3, r2, r0
 8004e72:	2a01      	cmp	r2, #1
 8004e74:	4681      	mov	r9, r0
 8004e76:	6123      	str	r3, [r4, #16]
 8004e78:	dc02      	bgt.n	8004e80 <_printf_float+0x150>
 8004e7a:	6822      	ldr	r2, [r4, #0]
 8004e7c:	07d2      	lsls	r2, r2, #31
 8004e7e:	d501      	bpl.n	8004e84 <_printf_float+0x154>
 8004e80:	3301      	adds	r3, #1
 8004e82:	6123      	str	r3, [r4, #16]
 8004e84:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d0a2      	beq.n	8004dd2 <_printf_float+0xa2>
 8004e8c:	232d      	movs	r3, #45	@ 0x2d
 8004e8e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004e92:	e79e      	b.n	8004dd2 <_printf_float+0xa2>
 8004e94:	9a06      	ldr	r2, [sp, #24]
 8004e96:	2a47      	cmp	r2, #71	@ 0x47
 8004e98:	d1c2      	bne.n	8004e20 <_printf_float+0xf0>
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d1c0      	bne.n	8004e20 <_printf_float+0xf0>
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e7bd      	b.n	8004e1e <_printf_float+0xee>
 8004ea2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004ea6:	d9db      	bls.n	8004e60 <_printf_float+0x130>
 8004ea8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004eac:	d118      	bne.n	8004ee0 <_printf_float+0x1b0>
 8004eae:	2900      	cmp	r1, #0
 8004eb0:	6863      	ldr	r3, [r4, #4]
 8004eb2:	dd0b      	ble.n	8004ecc <_printf_float+0x19c>
 8004eb4:	6121      	str	r1, [r4, #16]
 8004eb6:	b913      	cbnz	r3, 8004ebe <_printf_float+0x18e>
 8004eb8:	6822      	ldr	r2, [r4, #0]
 8004eba:	07d0      	lsls	r0, r2, #31
 8004ebc:	d502      	bpl.n	8004ec4 <_printf_float+0x194>
 8004ebe:	3301      	adds	r3, #1
 8004ec0:	440b      	add	r3, r1
 8004ec2:	6123      	str	r3, [r4, #16]
 8004ec4:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004ec6:	f04f 0900 	mov.w	r9, #0
 8004eca:	e7db      	b.n	8004e84 <_printf_float+0x154>
 8004ecc:	b913      	cbnz	r3, 8004ed4 <_printf_float+0x1a4>
 8004ece:	6822      	ldr	r2, [r4, #0]
 8004ed0:	07d2      	lsls	r2, r2, #31
 8004ed2:	d501      	bpl.n	8004ed8 <_printf_float+0x1a8>
 8004ed4:	3302      	adds	r3, #2
 8004ed6:	e7f4      	b.n	8004ec2 <_printf_float+0x192>
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e7f2      	b.n	8004ec2 <_printf_float+0x192>
 8004edc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004ee0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004ee2:	4299      	cmp	r1, r3
 8004ee4:	db05      	blt.n	8004ef2 <_printf_float+0x1c2>
 8004ee6:	6823      	ldr	r3, [r4, #0]
 8004ee8:	6121      	str	r1, [r4, #16]
 8004eea:	07d8      	lsls	r0, r3, #31
 8004eec:	d5ea      	bpl.n	8004ec4 <_printf_float+0x194>
 8004eee:	1c4b      	adds	r3, r1, #1
 8004ef0:	e7e7      	b.n	8004ec2 <_printf_float+0x192>
 8004ef2:	2900      	cmp	r1, #0
 8004ef4:	bfd4      	ite	le
 8004ef6:	f1c1 0202 	rsble	r2, r1, #2
 8004efa:	2201      	movgt	r2, #1
 8004efc:	4413      	add	r3, r2
 8004efe:	e7e0      	b.n	8004ec2 <_printf_float+0x192>
 8004f00:	6823      	ldr	r3, [r4, #0]
 8004f02:	055a      	lsls	r2, r3, #21
 8004f04:	d407      	bmi.n	8004f16 <_printf_float+0x1e6>
 8004f06:	6923      	ldr	r3, [r4, #16]
 8004f08:	4642      	mov	r2, r8
 8004f0a:	4631      	mov	r1, r6
 8004f0c:	4628      	mov	r0, r5
 8004f0e:	47b8      	blx	r7
 8004f10:	3001      	adds	r0, #1
 8004f12:	d12b      	bne.n	8004f6c <_printf_float+0x23c>
 8004f14:	e767      	b.n	8004de6 <_printf_float+0xb6>
 8004f16:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004f1a:	f240 80dd 	bls.w	80050d8 <_printf_float+0x3a8>
 8004f1e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004f22:	2200      	movs	r2, #0
 8004f24:	2300      	movs	r3, #0
 8004f26:	f7fb fdcf 	bl	8000ac8 <__aeabi_dcmpeq>
 8004f2a:	2800      	cmp	r0, #0
 8004f2c:	d033      	beq.n	8004f96 <_printf_float+0x266>
 8004f2e:	4a37      	ldr	r2, [pc, #220]	@ (800500c <_printf_float+0x2dc>)
 8004f30:	2301      	movs	r3, #1
 8004f32:	4631      	mov	r1, r6
 8004f34:	4628      	mov	r0, r5
 8004f36:	47b8      	blx	r7
 8004f38:	3001      	adds	r0, #1
 8004f3a:	f43f af54 	beq.w	8004de6 <_printf_float+0xb6>
 8004f3e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004f42:	4543      	cmp	r3, r8
 8004f44:	db02      	blt.n	8004f4c <_printf_float+0x21c>
 8004f46:	6823      	ldr	r3, [r4, #0]
 8004f48:	07d8      	lsls	r0, r3, #31
 8004f4a:	d50f      	bpl.n	8004f6c <_printf_float+0x23c>
 8004f4c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f50:	4631      	mov	r1, r6
 8004f52:	4628      	mov	r0, r5
 8004f54:	47b8      	blx	r7
 8004f56:	3001      	adds	r0, #1
 8004f58:	f43f af45 	beq.w	8004de6 <_printf_float+0xb6>
 8004f5c:	f04f 0900 	mov.w	r9, #0
 8004f60:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8004f64:	f104 0a1a 	add.w	sl, r4, #26
 8004f68:	45c8      	cmp	r8, r9
 8004f6a:	dc09      	bgt.n	8004f80 <_printf_float+0x250>
 8004f6c:	6823      	ldr	r3, [r4, #0]
 8004f6e:	079b      	lsls	r3, r3, #30
 8004f70:	f100 8103 	bmi.w	800517a <_printf_float+0x44a>
 8004f74:	68e0      	ldr	r0, [r4, #12]
 8004f76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004f78:	4298      	cmp	r0, r3
 8004f7a:	bfb8      	it	lt
 8004f7c:	4618      	movlt	r0, r3
 8004f7e:	e734      	b.n	8004dea <_printf_float+0xba>
 8004f80:	2301      	movs	r3, #1
 8004f82:	4652      	mov	r2, sl
 8004f84:	4631      	mov	r1, r6
 8004f86:	4628      	mov	r0, r5
 8004f88:	47b8      	blx	r7
 8004f8a:	3001      	adds	r0, #1
 8004f8c:	f43f af2b 	beq.w	8004de6 <_printf_float+0xb6>
 8004f90:	f109 0901 	add.w	r9, r9, #1
 8004f94:	e7e8      	b.n	8004f68 <_printf_float+0x238>
 8004f96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	dc39      	bgt.n	8005010 <_printf_float+0x2e0>
 8004f9c:	4a1b      	ldr	r2, [pc, #108]	@ (800500c <_printf_float+0x2dc>)
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	4631      	mov	r1, r6
 8004fa2:	4628      	mov	r0, r5
 8004fa4:	47b8      	blx	r7
 8004fa6:	3001      	adds	r0, #1
 8004fa8:	f43f af1d 	beq.w	8004de6 <_printf_float+0xb6>
 8004fac:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004fb0:	ea59 0303 	orrs.w	r3, r9, r3
 8004fb4:	d102      	bne.n	8004fbc <_printf_float+0x28c>
 8004fb6:	6823      	ldr	r3, [r4, #0]
 8004fb8:	07d9      	lsls	r1, r3, #31
 8004fba:	d5d7      	bpl.n	8004f6c <_printf_float+0x23c>
 8004fbc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004fc0:	4631      	mov	r1, r6
 8004fc2:	4628      	mov	r0, r5
 8004fc4:	47b8      	blx	r7
 8004fc6:	3001      	adds	r0, #1
 8004fc8:	f43f af0d 	beq.w	8004de6 <_printf_float+0xb6>
 8004fcc:	f04f 0a00 	mov.w	sl, #0
 8004fd0:	f104 0b1a 	add.w	fp, r4, #26
 8004fd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004fd6:	425b      	negs	r3, r3
 8004fd8:	4553      	cmp	r3, sl
 8004fda:	dc01      	bgt.n	8004fe0 <_printf_float+0x2b0>
 8004fdc:	464b      	mov	r3, r9
 8004fde:	e793      	b.n	8004f08 <_printf_float+0x1d8>
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	465a      	mov	r2, fp
 8004fe4:	4631      	mov	r1, r6
 8004fe6:	4628      	mov	r0, r5
 8004fe8:	47b8      	blx	r7
 8004fea:	3001      	adds	r0, #1
 8004fec:	f43f aefb 	beq.w	8004de6 <_printf_float+0xb6>
 8004ff0:	f10a 0a01 	add.w	sl, sl, #1
 8004ff4:	e7ee      	b.n	8004fd4 <_printf_float+0x2a4>
 8004ff6:	bf00      	nop
 8004ff8:	7fefffff 	.word	0x7fefffff
 8004ffc:	08007520 	.word	0x08007520
 8005000:	08007524 	.word	0x08007524
 8005004:	08007528 	.word	0x08007528
 8005008:	0800752c 	.word	0x0800752c
 800500c:	08007530 	.word	0x08007530
 8005010:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005012:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005016:	4553      	cmp	r3, sl
 8005018:	bfa8      	it	ge
 800501a:	4653      	movge	r3, sl
 800501c:	2b00      	cmp	r3, #0
 800501e:	4699      	mov	r9, r3
 8005020:	dc36      	bgt.n	8005090 <_printf_float+0x360>
 8005022:	f04f 0b00 	mov.w	fp, #0
 8005026:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800502a:	f104 021a 	add.w	r2, r4, #26
 800502e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005030:	9306      	str	r3, [sp, #24]
 8005032:	eba3 0309 	sub.w	r3, r3, r9
 8005036:	455b      	cmp	r3, fp
 8005038:	dc31      	bgt.n	800509e <_printf_float+0x36e>
 800503a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800503c:	459a      	cmp	sl, r3
 800503e:	dc3a      	bgt.n	80050b6 <_printf_float+0x386>
 8005040:	6823      	ldr	r3, [r4, #0]
 8005042:	07da      	lsls	r2, r3, #31
 8005044:	d437      	bmi.n	80050b6 <_printf_float+0x386>
 8005046:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005048:	ebaa 0903 	sub.w	r9, sl, r3
 800504c:	9b06      	ldr	r3, [sp, #24]
 800504e:	ebaa 0303 	sub.w	r3, sl, r3
 8005052:	4599      	cmp	r9, r3
 8005054:	bfa8      	it	ge
 8005056:	4699      	movge	r9, r3
 8005058:	f1b9 0f00 	cmp.w	r9, #0
 800505c:	dc33      	bgt.n	80050c6 <_printf_float+0x396>
 800505e:	f04f 0800 	mov.w	r8, #0
 8005062:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005066:	f104 0b1a 	add.w	fp, r4, #26
 800506a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800506c:	ebaa 0303 	sub.w	r3, sl, r3
 8005070:	eba3 0309 	sub.w	r3, r3, r9
 8005074:	4543      	cmp	r3, r8
 8005076:	f77f af79 	ble.w	8004f6c <_printf_float+0x23c>
 800507a:	2301      	movs	r3, #1
 800507c:	465a      	mov	r2, fp
 800507e:	4631      	mov	r1, r6
 8005080:	4628      	mov	r0, r5
 8005082:	47b8      	blx	r7
 8005084:	3001      	adds	r0, #1
 8005086:	f43f aeae 	beq.w	8004de6 <_printf_float+0xb6>
 800508a:	f108 0801 	add.w	r8, r8, #1
 800508e:	e7ec      	b.n	800506a <_printf_float+0x33a>
 8005090:	4642      	mov	r2, r8
 8005092:	4631      	mov	r1, r6
 8005094:	4628      	mov	r0, r5
 8005096:	47b8      	blx	r7
 8005098:	3001      	adds	r0, #1
 800509a:	d1c2      	bne.n	8005022 <_printf_float+0x2f2>
 800509c:	e6a3      	b.n	8004de6 <_printf_float+0xb6>
 800509e:	2301      	movs	r3, #1
 80050a0:	4631      	mov	r1, r6
 80050a2:	4628      	mov	r0, r5
 80050a4:	9206      	str	r2, [sp, #24]
 80050a6:	47b8      	blx	r7
 80050a8:	3001      	adds	r0, #1
 80050aa:	f43f ae9c 	beq.w	8004de6 <_printf_float+0xb6>
 80050ae:	9a06      	ldr	r2, [sp, #24]
 80050b0:	f10b 0b01 	add.w	fp, fp, #1
 80050b4:	e7bb      	b.n	800502e <_printf_float+0x2fe>
 80050b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80050ba:	4631      	mov	r1, r6
 80050bc:	4628      	mov	r0, r5
 80050be:	47b8      	blx	r7
 80050c0:	3001      	adds	r0, #1
 80050c2:	d1c0      	bne.n	8005046 <_printf_float+0x316>
 80050c4:	e68f      	b.n	8004de6 <_printf_float+0xb6>
 80050c6:	9a06      	ldr	r2, [sp, #24]
 80050c8:	464b      	mov	r3, r9
 80050ca:	4442      	add	r2, r8
 80050cc:	4631      	mov	r1, r6
 80050ce:	4628      	mov	r0, r5
 80050d0:	47b8      	blx	r7
 80050d2:	3001      	adds	r0, #1
 80050d4:	d1c3      	bne.n	800505e <_printf_float+0x32e>
 80050d6:	e686      	b.n	8004de6 <_printf_float+0xb6>
 80050d8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80050dc:	f1ba 0f01 	cmp.w	sl, #1
 80050e0:	dc01      	bgt.n	80050e6 <_printf_float+0x3b6>
 80050e2:	07db      	lsls	r3, r3, #31
 80050e4:	d536      	bpl.n	8005154 <_printf_float+0x424>
 80050e6:	2301      	movs	r3, #1
 80050e8:	4642      	mov	r2, r8
 80050ea:	4631      	mov	r1, r6
 80050ec:	4628      	mov	r0, r5
 80050ee:	47b8      	blx	r7
 80050f0:	3001      	adds	r0, #1
 80050f2:	f43f ae78 	beq.w	8004de6 <_printf_float+0xb6>
 80050f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80050fa:	4631      	mov	r1, r6
 80050fc:	4628      	mov	r0, r5
 80050fe:	47b8      	blx	r7
 8005100:	3001      	adds	r0, #1
 8005102:	f43f ae70 	beq.w	8004de6 <_printf_float+0xb6>
 8005106:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800510a:	2200      	movs	r2, #0
 800510c:	2300      	movs	r3, #0
 800510e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8005112:	f7fb fcd9 	bl	8000ac8 <__aeabi_dcmpeq>
 8005116:	b9c0      	cbnz	r0, 800514a <_printf_float+0x41a>
 8005118:	4653      	mov	r3, sl
 800511a:	f108 0201 	add.w	r2, r8, #1
 800511e:	4631      	mov	r1, r6
 8005120:	4628      	mov	r0, r5
 8005122:	47b8      	blx	r7
 8005124:	3001      	adds	r0, #1
 8005126:	d10c      	bne.n	8005142 <_printf_float+0x412>
 8005128:	e65d      	b.n	8004de6 <_printf_float+0xb6>
 800512a:	2301      	movs	r3, #1
 800512c:	465a      	mov	r2, fp
 800512e:	4631      	mov	r1, r6
 8005130:	4628      	mov	r0, r5
 8005132:	47b8      	blx	r7
 8005134:	3001      	adds	r0, #1
 8005136:	f43f ae56 	beq.w	8004de6 <_printf_float+0xb6>
 800513a:	f108 0801 	add.w	r8, r8, #1
 800513e:	45d0      	cmp	r8, sl
 8005140:	dbf3      	blt.n	800512a <_printf_float+0x3fa>
 8005142:	464b      	mov	r3, r9
 8005144:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005148:	e6df      	b.n	8004f0a <_printf_float+0x1da>
 800514a:	f04f 0800 	mov.w	r8, #0
 800514e:	f104 0b1a 	add.w	fp, r4, #26
 8005152:	e7f4      	b.n	800513e <_printf_float+0x40e>
 8005154:	2301      	movs	r3, #1
 8005156:	4642      	mov	r2, r8
 8005158:	e7e1      	b.n	800511e <_printf_float+0x3ee>
 800515a:	2301      	movs	r3, #1
 800515c:	464a      	mov	r2, r9
 800515e:	4631      	mov	r1, r6
 8005160:	4628      	mov	r0, r5
 8005162:	47b8      	blx	r7
 8005164:	3001      	adds	r0, #1
 8005166:	f43f ae3e 	beq.w	8004de6 <_printf_float+0xb6>
 800516a:	f108 0801 	add.w	r8, r8, #1
 800516e:	68e3      	ldr	r3, [r4, #12]
 8005170:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005172:	1a5b      	subs	r3, r3, r1
 8005174:	4543      	cmp	r3, r8
 8005176:	dcf0      	bgt.n	800515a <_printf_float+0x42a>
 8005178:	e6fc      	b.n	8004f74 <_printf_float+0x244>
 800517a:	f04f 0800 	mov.w	r8, #0
 800517e:	f104 0919 	add.w	r9, r4, #25
 8005182:	e7f4      	b.n	800516e <_printf_float+0x43e>

08005184 <_printf_common>:
 8005184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005188:	4616      	mov	r6, r2
 800518a:	4698      	mov	r8, r3
 800518c:	688a      	ldr	r2, [r1, #8]
 800518e:	690b      	ldr	r3, [r1, #16]
 8005190:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005194:	4293      	cmp	r3, r2
 8005196:	bfb8      	it	lt
 8005198:	4613      	movlt	r3, r2
 800519a:	6033      	str	r3, [r6, #0]
 800519c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80051a0:	4607      	mov	r7, r0
 80051a2:	460c      	mov	r4, r1
 80051a4:	b10a      	cbz	r2, 80051aa <_printf_common+0x26>
 80051a6:	3301      	adds	r3, #1
 80051a8:	6033      	str	r3, [r6, #0]
 80051aa:	6823      	ldr	r3, [r4, #0]
 80051ac:	0699      	lsls	r1, r3, #26
 80051ae:	bf42      	ittt	mi
 80051b0:	6833      	ldrmi	r3, [r6, #0]
 80051b2:	3302      	addmi	r3, #2
 80051b4:	6033      	strmi	r3, [r6, #0]
 80051b6:	6825      	ldr	r5, [r4, #0]
 80051b8:	f015 0506 	ands.w	r5, r5, #6
 80051bc:	d106      	bne.n	80051cc <_printf_common+0x48>
 80051be:	f104 0a19 	add.w	sl, r4, #25
 80051c2:	68e3      	ldr	r3, [r4, #12]
 80051c4:	6832      	ldr	r2, [r6, #0]
 80051c6:	1a9b      	subs	r3, r3, r2
 80051c8:	42ab      	cmp	r3, r5
 80051ca:	dc26      	bgt.n	800521a <_printf_common+0x96>
 80051cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80051d0:	6822      	ldr	r2, [r4, #0]
 80051d2:	3b00      	subs	r3, #0
 80051d4:	bf18      	it	ne
 80051d6:	2301      	movne	r3, #1
 80051d8:	0692      	lsls	r2, r2, #26
 80051da:	d42b      	bmi.n	8005234 <_printf_common+0xb0>
 80051dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80051e0:	4641      	mov	r1, r8
 80051e2:	4638      	mov	r0, r7
 80051e4:	47c8      	blx	r9
 80051e6:	3001      	adds	r0, #1
 80051e8:	d01e      	beq.n	8005228 <_printf_common+0xa4>
 80051ea:	6823      	ldr	r3, [r4, #0]
 80051ec:	6922      	ldr	r2, [r4, #16]
 80051ee:	f003 0306 	and.w	r3, r3, #6
 80051f2:	2b04      	cmp	r3, #4
 80051f4:	bf02      	ittt	eq
 80051f6:	68e5      	ldreq	r5, [r4, #12]
 80051f8:	6833      	ldreq	r3, [r6, #0]
 80051fa:	1aed      	subeq	r5, r5, r3
 80051fc:	68a3      	ldr	r3, [r4, #8]
 80051fe:	bf0c      	ite	eq
 8005200:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005204:	2500      	movne	r5, #0
 8005206:	4293      	cmp	r3, r2
 8005208:	bfc4      	itt	gt
 800520a:	1a9b      	subgt	r3, r3, r2
 800520c:	18ed      	addgt	r5, r5, r3
 800520e:	2600      	movs	r6, #0
 8005210:	341a      	adds	r4, #26
 8005212:	42b5      	cmp	r5, r6
 8005214:	d11a      	bne.n	800524c <_printf_common+0xc8>
 8005216:	2000      	movs	r0, #0
 8005218:	e008      	b.n	800522c <_printf_common+0xa8>
 800521a:	2301      	movs	r3, #1
 800521c:	4652      	mov	r2, sl
 800521e:	4641      	mov	r1, r8
 8005220:	4638      	mov	r0, r7
 8005222:	47c8      	blx	r9
 8005224:	3001      	adds	r0, #1
 8005226:	d103      	bne.n	8005230 <_printf_common+0xac>
 8005228:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800522c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005230:	3501      	adds	r5, #1
 8005232:	e7c6      	b.n	80051c2 <_printf_common+0x3e>
 8005234:	18e1      	adds	r1, r4, r3
 8005236:	1c5a      	adds	r2, r3, #1
 8005238:	2030      	movs	r0, #48	@ 0x30
 800523a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800523e:	4422      	add	r2, r4
 8005240:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005244:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005248:	3302      	adds	r3, #2
 800524a:	e7c7      	b.n	80051dc <_printf_common+0x58>
 800524c:	2301      	movs	r3, #1
 800524e:	4622      	mov	r2, r4
 8005250:	4641      	mov	r1, r8
 8005252:	4638      	mov	r0, r7
 8005254:	47c8      	blx	r9
 8005256:	3001      	adds	r0, #1
 8005258:	d0e6      	beq.n	8005228 <_printf_common+0xa4>
 800525a:	3601      	adds	r6, #1
 800525c:	e7d9      	b.n	8005212 <_printf_common+0x8e>
	...

08005260 <_printf_i>:
 8005260:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005264:	7e0f      	ldrb	r7, [r1, #24]
 8005266:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005268:	2f78      	cmp	r7, #120	@ 0x78
 800526a:	4691      	mov	r9, r2
 800526c:	4680      	mov	r8, r0
 800526e:	460c      	mov	r4, r1
 8005270:	469a      	mov	sl, r3
 8005272:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005276:	d807      	bhi.n	8005288 <_printf_i+0x28>
 8005278:	2f62      	cmp	r7, #98	@ 0x62
 800527a:	d80a      	bhi.n	8005292 <_printf_i+0x32>
 800527c:	2f00      	cmp	r7, #0
 800527e:	f000 80d2 	beq.w	8005426 <_printf_i+0x1c6>
 8005282:	2f58      	cmp	r7, #88	@ 0x58
 8005284:	f000 80b9 	beq.w	80053fa <_printf_i+0x19a>
 8005288:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800528c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005290:	e03a      	b.n	8005308 <_printf_i+0xa8>
 8005292:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005296:	2b15      	cmp	r3, #21
 8005298:	d8f6      	bhi.n	8005288 <_printf_i+0x28>
 800529a:	a101      	add	r1, pc, #4	@ (adr r1, 80052a0 <_printf_i+0x40>)
 800529c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80052a0:	080052f9 	.word	0x080052f9
 80052a4:	0800530d 	.word	0x0800530d
 80052a8:	08005289 	.word	0x08005289
 80052ac:	08005289 	.word	0x08005289
 80052b0:	08005289 	.word	0x08005289
 80052b4:	08005289 	.word	0x08005289
 80052b8:	0800530d 	.word	0x0800530d
 80052bc:	08005289 	.word	0x08005289
 80052c0:	08005289 	.word	0x08005289
 80052c4:	08005289 	.word	0x08005289
 80052c8:	08005289 	.word	0x08005289
 80052cc:	0800540d 	.word	0x0800540d
 80052d0:	08005337 	.word	0x08005337
 80052d4:	080053c7 	.word	0x080053c7
 80052d8:	08005289 	.word	0x08005289
 80052dc:	08005289 	.word	0x08005289
 80052e0:	0800542f 	.word	0x0800542f
 80052e4:	08005289 	.word	0x08005289
 80052e8:	08005337 	.word	0x08005337
 80052ec:	08005289 	.word	0x08005289
 80052f0:	08005289 	.word	0x08005289
 80052f4:	080053cf 	.word	0x080053cf
 80052f8:	6833      	ldr	r3, [r6, #0]
 80052fa:	1d1a      	adds	r2, r3, #4
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	6032      	str	r2, [r6, #0]
 8005300:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005304:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005308:	2301      	movs	r3, #1
 800530a:	e09d      	b.n	8005448 <_printf_i+0x1e8>
 800530c:	6833      	ldr	r3, [r6, #0]
 800530e:	6820      	ldr	r0, [r4, #0]
 8005310:	1d19      	adds	r1, r3, #4
 8005312:	6031      	str	r1, [r6, #0]
 8005314:	0606      	lsls	r6, r0, #24
 8005316:	d501      	bpl.n	800531c <_printf_i+0xbc>
 8005318:	681d      	ldr	r5, [r3, #0]
 800531a:	e003      	b.n	8005324 <_printf_i+0xc4>
 800531c:	0645      	lsls	r5, r0, #25
 800531e:	d5fb      	bpl.n	8005318 <_printf_i+0xb8>
 8005320:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005324:	2d00      	cmp	r5, #0
 8005326:	da03      	bge.n	8005330 <_printf_i+0xd0>
 8005328:	232d      	movs	r3, #45	@ 0x2d
 800532a:	426d      	negs	r5, r5
 800532c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005330:	4859      	ldr	r0, [pc, #356]	@ (8005498 <_printf_i+0x238>)
 8005332:	230a      	movs	r3, #10
 8005334:	e011      	b.n	800535a <_printf_i+0xfa>
 8005336:	6821      	ldr	r1, [r4, #0]
 8005338:	6833      	ldr	r3, [r6, #0]
 800533a:	0608      	lsls	r0, r1, #24
 800533c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005340:	d402      	bmi.n	8005348 <_printf_i+0xe8>
 8005342:	0649      	lsls	r1, r1, #25
 8005344:	bf48      	it	mi
 8005346:	b2ad      	uxthmi	r5, r5
 8005348:	2f6f      	cmp	r7, #111	@ 0x6f
 800534a:	4853      	ldr	r0, [pc, #332]	@ (8005498 <_printf_i+0x238>)
 800534c:	6033      	str	r3, [r6, #0]
 800534e:	bf14      	ite	ne
 8005350:	230a      	movne	r3, #10
 8005352:	2308      	moveq	r3, #8
 8005354:	2100      	movs	r1, #0
 8005356:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800535a:	6866      	ldr	r6, [r4, #4]
 800535c:	60a6      	str	r6, [r4, #8]
 800535e:	2e00      	cmp	r6, #0
 8005360:	bfa2      	ittt	ge
 8005362:	6821      	ldrge	r1, [r4, #0]
 8005364:	f021 0104 	bicge.w	r1, r1, #4
 8005368:	6021      	strge	r1, [r4, #0]
 800536a:	b90d      	cbnz	r5, 8005370 <_printf_i+0x110>
 800536c:	2e00      	cmp	r6, #0
 800536e:	d04b      	beq.n	8005408 <_printf_i+0x1a8>
 8005370:	4616      	mov	r6, r2
 8005372:	fbb5 f1f3 	udiv	r1, r5, r3
 8005376:	fb03 5711 	mls	r7, r3, r1, r5
 800537a:	5dc7      	ldrb	r7, [r0, r7]
 800537c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005380:	462f      	mov	r7, r5
 8005382:	42bb      	cmp	r3, r7
 8005384:	460d      	mov	r5, r1
 8005386:	d9f4      	bls.n	8005372 <_printf_i+0x112>
 8005388:	2b08      	cmp	r3, #8
 800538a:	d10b      	bne.n	80053a4 <_printf_i+0x144>
 800538c:	6823      	ldr	r3, [r4, #0]
 800538e:	07df      	lsls	r7, r3, #31
 8005390:	d508      	bpl.n	80053a4 <_printf_i+0x144>
 8005392:	6923      	ldr	r3, [r4, #16]
 8005394:	6861      	ldr	r1, [r4, #4]
 8005396:	4299      	cmp	r1, r3
 8005398:	bfde      	ittt	le
 800539a:	2330      	movle	r3, #48	@ 0x30
 800539c:	f806 3c01 	strble.w	r3, [r6, #-1]
 80053a0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80053a4:	1b92      	subs	r2, r2, r6
 80053a6:	6122      	str	r2, [r4, #16]
 80053a8:	f8cd a000 	str.w	sl, [sp]
 80053ac:	464b      	mov	r3, r9
 80053ae:	aa03      	add	r2, sp, #12
 80053b0:	4621      	mov	r1, r4
 80053b2:	4640      	mov	r0, r8
 80053b4:	f7ff fee6 	bl	8005184 <_printf_common>
 80053b8:	3001      	adds	r0, #1
 80053ba:	d14a      	bne.n	8005452 <_printf_i+0x1f2>
 80053bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80053c0:	b004      	add	sp, #16
 80053c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053c6:	6823      	ldr	r3, [r4, #0]
 80053c8:	f043 0320 	orr.w	r3, r3, #32
 80053cc:	6023      	str	r3, [r4, #0]
 80053ce:	4833      	ldr	r0, [pc, #204]	@ (800549c <_printf_i+0x23c>)
 80053d0:	2778      	movs	r7, #120	@ 0x78
 80053d2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80053d6:	6823      	ldr	r3, [r4, #0]
 80053d8:	6831      	ldr	r1, [r6, #0]
 80053da:	061f      	lsls	r7, r3, #24
 80053dc:	f851 5b04 	ldr.w	r5, [r1], #4
 80053e0:	d402      	bmi.n	80053e8 <_printf_i+0x188>
 80053e2:	065f      	lsls	r7, r3, #25
 80053e4:	bf48      	it	mi
 80053e6:	b2ad      	uxthmi	r5, r5
 80053e8:	6031      	str	r1, [r6, #0]
 80053ea:	07d9      	lsls	r1, r3, #31
 80053ec:	bf44      	itt	mi
 80053ee:	f043 0320 	orrmi.w	r3, r3, #32
 80053f2:	6023      	strmi	r3, [r4, #0]
 80053f4:	b11d      	cbz	r5, 80053fe <_printf_i+0x19e>
 80053f6:	2310      	movs	r3, #16
 80053f8:	e7ac      	b.n	8005354 <_printf_i+0xf4>
 80053fa:	4827      	ldr	r0, [pc, #156]	@ (8005498 <_printf_i+0x238>)
 80053fc:	e7e9      	b.n	80053d2 <_printf_i+0x172>
 80053fe:	6823      	ldr	r3, [r4, #0]
 8005400:	f023 0320 	bic.w	r3, r3, #32
 8005404:	6023      	str	r3, [r4, #0]
 8005406:	e7f6      	b.n	80053f6 <_printf_i+0x196>
 8005408:	4616      	mov	r6, r2
 800540a:	e7bd      	b.n	8005388 <_printf_i+0x128>
 800540c:	6833      	ldr	r3, [r6, #0]
 800540e:	6825      	ldr	r5, [r4, #0]
 8005410:	6961      	ldr	r1, [r4, #20]
 8005412:	1d18      	adds	r0, r3, #4
 8005414:	6030      	str	r0, [r6, #0]
 8005416:	062e      	lsls	r6, r5, #24
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	d501      	bpl.n	8005420 <_printf_i+0x1c0>
 800541c:	6019      	str	r1, [r3, #0]
 800541e:	e002      	b.n	8005426 <_printf_i+0x1c6>
 8005420:	0668      	lsls	r0, r5, #25
 8005422:	d5fb      	bpl.n	800541c <_printf_i+0x1bc>
 8005424:	8019      	strh	r1, [r3, #0]
 8005426:	2300      	movs	r3, #0
 8005428:	6123      	str	r3, [r4, #16]
 800542a:	4616      	mov	r6, r2
 800542c:	e7bc      	b.n	80053a8 <_printf_i+0x148>
 800542e:	6833      	ldr	r3, [r6, #0]
 8005430:	1d1a      	adds	r2, r3, #4
 8005432:	6032      	str	r2, [r6, #0]
 8005434:	681e      	ldr	r6, [r3, #0]
 8005436:	6862      	ldr	r2, [r4, #4]
 8005438:	2100      	movs	r1, #0
 800543a:	4630      	mov	r0, r6
 800543c:	f7fa fec8 	bl	80001d0 <memchr>
 8005440:	b108      	cbz	r0, 8005446 <_printf_i+0x1e6>
 8005442:	1b80      	subs	r0, r0, r6
 8005444:	6060      	str	r0, [r4, #4]
 8005446:	6863      	ldr	r3, [r4, #4]
 8005448:	6123      	str	r3, [r4, #16]
 800544a:	2300      	movs	r3, #0
 800544c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005450:	e7aa      	b.n	80053a8 <_printf_i+0x148>
 8005452:	6923      	ldr	r3, [r4, #16]
 8005454:	4632      	mov	r2, r6
 8005456:	4649      	mov	r1, r9
 8005458:	4640      	mov	r0, r8
 800545a:	47d0      	blx	sl
 800545c:	3001      	adds	r0, #1
 800545e:	d0ad      	beq.n	80053bc <_printf_i+0x15c>
 8005460:	6823      	ldr	r3, [r4, #0]
 8005462:	079b      	lsls	r3, r3, #30
 8005464:	d413      	bmi.n	800548e <_printf_i+0x22e>
 8005466:	68e0      	ldr	r0, [r4, #12]
 8005468:	9b03      	ldr	r3, [sp, #12]
 800546a:	4298      	cmp	r0, r3
 800546c:	bfb8      	it	lt
 800546e:	4618      	movlt	r0, r3
 8005470:	e7a6      	b.n	80053c0 <_printf_i+0x160>
 8005472:	2301      	movs	r3, #1
 8005474:	4632      	mov	r2, r6
 8005476:	4649      	mov	r1, r9
 8005478:	4640      	mov	r0, r8
 800547a:	47d0      	blx	sl
 800547c:	3001      	adds	r0, #1
 800547e:	d09d      	beq.n	80053bc <_printf_i+0x15c>
 8005480:	3501      	adds	r5, #1
 8005482:	68e3      	ldr	r3, [r4, #12]
 8005484:	9903      	ldr	r1, [sp, #12]
 8005486:	1a5b      	subs	r3, r3, r1
 8005488:	42ab      	cmp	r3, r5
 800548a:	dcf2      	bgt.n	8005472 <_printf_i+0x212>
 800548c:	e7eb      	b.n	8005466 <_printf_i+0x206>
 800548e:	2500      	movs	r5, #0
 8005490:	f104 0619 	add.w	r6, r4, #25
 8005494:	e7f5      	b.n	8005482 <_printf_i+0x222>
 8005496:	bf00      	nop
 8005498:	08007532 	.word	0x08007532
 800549c:	08007543 	.word	0x08007543

080054a0 <std>:
 80054a0:	2300      	movs	r3, #0
 80054a2:	b510      	push	{r4, lr}
 80054a4:	4604      	mov	r4, r0
 80054a6:	e9c0 3300 	strd	r3, r3, [r0]
 80054aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80054ae:	6083      	str	r3, [r0, #8]
 80054b0:	8181      	strh	r1, [r0, #12]
 80054b2:	6643      	str	r3, [r0, #100]	@ 0x64
 80054b4:	81c2      	strh	r2, [r0, #14]
 80054b6:	6183      	str	r3, [r0, #24]
 80054b8:	4619      	mov	r1, r3
 80054ba:	2208      	movs	r2, #8
 80054bc:	305c      	adds	r0, #92	@ 0x5c
 80054be:	f000 f8f4 	bl	80056aa <memset>
 80054c2:	4b0d      	ldr	r3, [pc, #52]	@ (80054f8 <std+0x58>)
 80054c4:	6263      	str	r3, [r4, #36]	@ 0x24
 80054c6:	4b0d      	ldr	r3, [pc, #52]	@ (80054fc <std+0x5c>)
 80054c8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80054ca:	4b0d      	ldr	r3, [pc, #52]	@ (8005500 <std+0x60>)
 80054cc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80054ce:	4b0d      	ldr	r3, [pc, #52]	@ (8005504 <std+0x64>)
 80054d0:	6323      	str	r3, [r4, #48]	@ 0x30
 80054d2:	4b0d      	ldr	r3, [pc, #52]	@ (8005508 <std+0x68>)
 80054d4:	6224      	str	r4, [r4, #32]
 80054d6:	429c      	cmp	r4, r3
 80054d8:	d006      	beq.n	80054e8 <std+0x48>
 80054da:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80054de:	4294      	cmp	r4, r2
 80054e0:	d002      	beq.n	80054e8 <std+0x48>
 80054e2:	33d0      	adds	r3, #208	@ 0xd0
 80054e4:	429c      	cmp	r4, r3
 80054e6:	d105      	bne.n	80054f4 <std+0x54>
 80054e8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80054ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054f0:	f000 b958 	b.w	80057a4 <__retarget_lock_init_recursive>
 80054f4:	bd10      	pop	{r4, pc}
 80054f6:	bf00      	nop
 80054f8:	08005625 	.word	0x08005625
 80054fc:	08005647 	.word	0x08005647
 8005500:	0800567f 	.word	0x0800567f
 8005504:	080056a3 	.word	0x080056a3
 8005508:	20000340 	.word	0x20000340

0800550c <stdio_exit_handler>:
 800550c:	4a02      	ldr	r2, [pc, #8]	@ (8005518 <stdio_exit_handler+0xc>)
 800550e:	4903      	ldr	r1, [pc, #12]	@ (800551c <stdio_exit_handler+0x10>)
 8005510:	4803      	ldr	r0, [pc, #12]	@ (8005520 <stdio_exit_handler+0x14>)
 8005512:	f000 b869 	b.w	80055e8 <_fwalk_sglue>
 8005516:	bf00      	nop
 8005518:	2000000c 	.word	0x2000000c
 800551c:	08006e55 	.word	0x08006e55
 8005520:	2000001c 	.word	0x2000001c

08005524 <cleanup_stdio>:
 8005524:	6841      	ldr	r1, [r0, #4]
 8005526:	4b0c      	ldr	r3, [pc, #48]	@ (8005558 <cleanup_stdio+0x34>)
 8005528:	4299      	cmp	r1, r3
 800552a:	b510      	push	{r4, lr}
 800552c:	4604      	mov	r4, r0
 800552e:	d001      	beq.n	8005534 <cleanup_stdio+0x10>
 8005530:	f001 fc90 	bl	8006e54 <_fflush_r>
 8005534:	68a1      	ldr	r1, [r4, #8]
 8005536:	4b09      	ldr	r3, [pc, #36]	@ (800555c <cleanup_stdio+0x38>)
 8005538:	4299      	cmp	r1, r3
 800553a:	d002      	beq.n	8005542 <cleanup_stdio+0x1e>
 800553c:	4620      	mov	r0, r4
 800553e:	f001 fc89 	bl	8006e54 <_fflush_r>
 8005542:	68e1      	ldr	r1, [r4, #12]
 8005544:	4b06      	ldr	r3, [pc, #24]	@ (8005560 <cleanup_stdio+0x3c>)
 8005546:	4299      	cmp	r1, r3
 8005548:	d004      	beq.n	8005554 <cleanup_stdio+0x30>
 800554a:	4620      	mov	r0, r4
 800554c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005550:	f001 bc80 	b.w	8006e54 <_fflush_r>
 8005554:	bd10      	pop	{r4, pc}
 8005556:	bf00      	nop
 8005558:	20000340 	.word	0x20000340
 800555c:	200003a8 	.word	0x200003a8
 8005560:	20000410 	.word	0x20000410

08005564 <global_stdio_init.part.0>:
 8005564:	b510      	push	{r4, lr}
 8005566:	4b0b      	ldr	r3, [pc, #44]	@ (8005594 <global_stdio_init.part.0+0x30>)
 8005568:	4c0b      	ldr	r4, [pc, #44]	@ (8005598 <global_stdio_init.part.0+0x34>)
 800556a:	4a0c      	ldr	r2, [pc, #48]	@ (800559c <global_stdio_init.part.0+0x38>)
 800556c:	601a      	str	r2, [r3, #0]
 800556e:	4620      	mov	r0, r4
 8005570:	2200      	movs	r2, #0
 8005572:	2104      	movs	r1, #4
 8005574:	f7ff ff94 	bl	80054a0 <std>
 8005578:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800557c:	2201      	movs	r2, #1
 800557e:	2109      	movs	r1, #9
 8005580:	f7ff ff8e 	bl	80054a0 <std>
 8005584:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005588:	2202      	movs	r2, #2
 800558a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800558e:	2112      	movs	r1, #18
 8005590:	f7ff bf86 	b.w	80054a0 <std>
 8005594:	20000478 	.word	0x20000478
 8005598:	20000340 	.word	0x20000340
 800559c:	0800550d 	.word	0x0800550d

080055a0 <__sfp_lock_acquire>:
 80055a0:	4801      	ldr	r0, [pc, #4]	@ (80055a8 <__sfp_lock_acquire+0x8>)
 80055a2:	f000 b900 	b.w	80057a6 <__retarget_lock_acquire_recursive>
 80055a6:	bf00      	nop
 80055a8:	20000481 	.word	0x20000481

080055ac <__sfp_lock_release>:
 80055ac:	4801      	ldr	r0, [pc, #4]	@ (80055b4 <__sfp_lock_release+0x8>)
 80055ae:	f000 b8fb 	b.w	80057a8 <__retarget_lock_release_recursive>
 80055b2:	bf00      	nop
 80055b4:	20000481 	.word	0x20000481

080055b8 <__sinit>:
 80055b8:	b510      	push	{r4, lr}
 80055ba:	4604      	mov	r4, r0
 80055bc:	f7ff fff0 	bl	80055a0 <__sfp_lock_acquire>
 80055c0:	6a23      	ldr	r3, [r4, #32]
 80055c2:	b11b      	cbz	r3, 80055cc <__sinit+0x14>
 80055c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055c8:	f7ff bff0 	b.w	80055ac <__sfp_lock_release>
 80055cc:	4b04      	ldr	r3, [pc, #16]	@ (80055e0 <__sinit+0x28>)
 80055ce:	6223      	str	r3, [r4, #32]
 80055d0:	4b04      	ldr	r3, [pc, #16]	@ (80055e4 <__sinit+0x2c>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d1f5      	bne.n	80055c4 <__sinit+0xc>
 80055d8:	f7ff ffc4 	bl	8005564 <global_stdio_init.part.0>
 80055dc:	e7f2      	b.n	80055c4 <__sinit+0xc>
 80055de:	bf00      	nop
 80055e0:	08005525 	.word	0x08005525
 80055e4:	20000478 	.word	0x20000478

080055e8 <_fwalk_sglue>:
 80055e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055ec:	4607      	mov	r7, r0
 80055ee:	4688      	mov	r8, r1
 80055f0:	4614      	mov	r4, r2
 80055f2:	2600      	movs	r6, #0
 80055f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80055f8:	f1b9 0901 	subs.w	r9, r9, #1
 80055fc:	d505      	bpl.n	800560a <_fwalk_sglue+0x22>
 80055fe:	6824      	ldr	r4, [r4, #0]
 8005600:	2c00      	cmp	r4, #0
 8005602:	d1f7      	bne.n	80055f4 <_fwalk_sglue+0xc>
 8005604:	4630      	mov	r0, r6
 8005606:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800560a:	89ab      	ldrh	r3, [r5, #12]
 800560c:	2b01      	cmp	r3, #1
 800560e:	d907      	bls.n	8005620 <_fwalk_sglue+0x38>
 8005610:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005614:	3301      	adds	r3, #1
 8005616:	d003      	beq.n	8005620 <_fwalk_sglue+0x38>
 8005618:	4629      	mov	r1, r5
 800561a:	4638      	mov	r0, r7
 800561c:	47c0      	blx	r8
 800561e:	4306      	orrs	r6, r0
 8005620:	3568      	adds	r5, #104	@ 0x68
 8005622:	e7e9      	b.n	80055f8 <_fwalk_sglue+0x10>

08005624 <__sread>:
 8005624:	b510      	push	{r4, lr}
 8005626:	460c      	mov	r4, r1
 8005628:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800562c:	f000 f86c 	bl	8005708 <_read_r>
 8005630:	2800      	cmp	r0, #0
 8005632:	bfab      	itete	ge
 8005634:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005636:	89a3      	ldrhlt	r3, [r4, #12]
 8005638:	181b      	addge	r3, r3, r0
 800563a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800563e:	bfac      	ite	ge
 8005640:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005642:	81a3      	strhlt	r3, [r4, #12]
 8005644:	bd10      	pop	{r4, pc}

08005646 <__swrite>:
 8005646:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800564a:	461f      	mov	r7, r3
 800564c:	898b      	ldrh	r3, [r1, #12]
 800564e:	05db      	lsls	r3, r3, #23
 8005650:	4605      	mov	r5, r0
 8005652:	460c      	mov	r4, r1
 8005654:	4616      	mov	r6, r2
 8005656:	d505      	bpl.n	8005664 <__swrite+0x1e>
 8005658:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800565c:	2302      	movs	r3, #2
 800565e:	2200      	movs	r2, #0
 8005660:	f000 f840 	bl	80056e4 <_lseek_r>
 8005664:	89a3      	ldrh	r3, [r4, #12]
 8005666:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800566a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800566e:	81a3      	strh	r3, [r4, #12]
 8005670:	4632      	mov	r2, r6
 8005672:	463b      	mov	r3, r7
 8005674:	4628      	mov	r0, r5
 8005676:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800567a:	f000 b857 	b.w	800572c <_write_r>

0800567e <__sseek>:
 800567e:	b510      	push	{r4, lr}
 8005680:	460c      	mov	r4, r1
 8005682:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005686:	f000 f82d 	bl	80056e4 <_lseek_r>
 800568a:	1c43      	adds	r3, r0, #1
 800568c:	89a3      	ldrh	r3, [r4, #12]
 800568e:	bf15      	itete	ne
 8005690:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005692:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005696:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800569a:	81a3      	strheq	r3, [r4, #12]
 800569c:	bf18      	it	ne
 800569e:	81a3      	strhne	r3, [r4, #12]
 80056a0:	bd10      	pop	{r4, pc}

080056a2 <__sclose>:
 80056a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056a6:	f000 b80d 	b.w	80056c4 <_close_r>

080056aa <memset>:
 80056aa:	4402      	add	r2, r0
 80056ac:	4603      	mov	r3, r0
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d100      	bne.n	80056b4 <memset+0xa>
 80056b2:	4770      	bx	lr
 80056b4:	f803 1b01 	strb.w	r1, [r3], #1
 80056b8:	e7f9      	b.n	80056ae <memset+0x4>
	...

080056bc <_localeconv_r>:
 80056bc:	4800      	ldr	r0, [pc, #0]	@ (80056c0 <_localeconv_r+0x4>)
 80056be:	4770      	bx	lr
 80056c0:	20000158 	.word	0x20000158

080056c4 <_close_r>:
 80056c4:	b538      	push	{r3, r4, r5, lr}
 80056c6:	4d06      	ldr	r5, [pc, #24]	@ (80056e0 <_close_r+0x1c>)
 80056c8:	2300      	movs	r3, #0
 80056ca:	4604      	mov	r4, r0
 80056cc:	4608      	mov	r0, r1
 80056ce:	602b      	str	r3, [r5, #0]
 80056d0:	f7fc f990 	bl	80019f4 <_close>
 80056d4:	1c43      	adds	r3, r0, #1
 80056d6:	d102      	bne.n	80056de <_close_r+0x1a>
 80056d8:	682b      	ldr	r3, [r5, #0]
 80056da:	b103      	cbz	r3, 80056de <_close_r+0x1a>
 80056dc:	6023      	str	r3, [r4, #0]
 80056de:	bd38      	pop	{r3, r4, r5, pc}
 80056e0:	2000047c 	.word	0x2000047c

080056e4 <_lseek_r>:
 80056e4:	b538      	push	{r3, r4, r5, lr}
 80056e6:	4d07      	ldr	r5, [pc, #28]	@ (8005704 <_lseek_r+0x20>)
 80056e8:	4604      	mov	r4, r0
 80056ea:	4608      	mov	r0, r1
 80056ec:	4611      	mov	r1, r2
 80056ee:	2200      	movs	r2, #0
 80056f0:	602a      	str	r2, [r5, #0]
 80056f2:	461a      	mov	r2, r3
 80056f4:	f7fc f9a5 	bl	8001a42 <_lseek>
 80056f8:	1c43      	adds	r3, r0, #1
 80056fa:	d102      	bne.n	8005702 <_lseek_r+0x1e>
 80056fc:	682b      	ldr	r3, [r5, #0]
 80056fe:	b103      	cbz	r3, 8005702 <_lseek_r+0x1e>
 8005700:	6023      	str	r3, [r4, #0]
 8005702:	bd38      	pop	{r3, r4, r5, pc}
 8005704:	2000047c 	.word	0x2000047c

08005708 <_read_r>:
 8005708:	b538      	push	{r3, r4, r5, lr}
 800570a:	4d07      	ldr	r5, [pc, #28]	@ (8005728 <_read_r+0x20>)
 800570c:	4604      	mov	r4, r0
 800570e:	4608      	mov	r0, r1
 8005710:	4611      	mov	r1, r2
 8005712:	2200      	movs	r2, #0
 8005714:	602a      	str	r2, [r5, #0]
 8005716:	461a      	mov	r2, r3
 8005718:	f7fc f933 	bl	8001982 <_read>
 800571c:	1c43      	adds	r3, r0, #1
 800571e:	d102      	bne.n	8005726 <_read_r+0x1e>
 8005720:	682b      	ldr	r3, [r5, #0]
 8005722:	b103      	cbz	r3, 8005726 <_read_r+0x1e>
 8005724:	6023      	str	r3, [r4, #0]
 8005726:	bd38      	pop	{r3, r4, r5, pc}
 8005728:	2000047c 	.word	0x2000047c

0800572c <_write_r>:
 800572c:	b538      	push	{r3, r4, r5, lr}
 800572e:	4d07      	ldr	r5, [pc, #28]	@ (800574c <_write_r+0x20>)
 8005730:	4604      	mov	r4, r0
 8005732:	4608      	mov	r0, r1
 8005734:	4611      	mov	r1, r2
 8005736:	2200      	movs	r2, #0
 8005738:	602a      	str	r2, [r5, #0]
 800573a:	461a      	mov	r2, r3
 800573c:	f7fc f93e 	bl	80019bc <_write>
 8005740:	1c43      	adds	r3, r0, #1
 8005742:	d102      	bne.n	800574a <_write_r+0x1e>
 8005744:	682b      	ldr	r3, [r5, #0]
 8005746:	b103      	cbz	r3, 800574a <_write_r+0x1e>
 8005748:	6023      	str	r3, [r4, #0]
 800574a:	bd38      	pop	{r3, r4, r5, pc}
 800574c:	2000047c 	.word	0x2000047c

08005750 <__errno>:
 8005750:	4b01      	ldr	r3, [pc, #4]	@ (8005758 <__errno+0x8>)
 8005752:	6818      	ldr	r0, [r3, #0]
 8005754:	4770      	bx	lr
 8005756:	bf00      	nop
 8005758:	20000018 	.word	0x20000018

0800575c <__libc_init_array>:
 800575c:	b570      	push	{r4, r5, r6, lr}
 800575e:	4d0d      	ldr	r5, [pc, #52]	@ (8005794 <__libc_init_array+0x38>)
 8005760:	4c0d      	ldr	r4, [pc, #52]	@ (8005798 <__libc_init_array+0x3c>)
 8005762:	1b64      	subs	r4, r4, r5
 8005764:	10a4      	asrs	r4, r4, #2
 8005766:	2600      	movs	r6, #0
 8005768:	42a6      	cmp	r6, r4
 800576a:	d109      	bne.n	8005780 <__libc_init_array+0x24>
 800576c:	4d0b      	ldr	r5, [pc, #44]	@ (800579c <__libc_init_array+0x40>)
 800576e:	4c0c      	ldr	r4, [pc, #48]	@ (80057a0 <__libc_init_array+0x44>)
 8005770:	f001 febe 	bl	80074f0 <_init>
 8005774:	1b64      	subs	r4, r4, r5
 8005776:	10a4      	asrs	r4, r4, #2
 8005778:	2600      	movs	r6, #0
 800577a:	42a6      	cmp	r6, r4
 800577c:	d105      	bne.n	800578a <__libc_init_array+0x2e>
 800577e:	bd70      	pop	{r4, r5, r6, pc}
 8005780:	f855 3b04 	ldr.w	r3, [r5], #4
 8005784:	4798      	blx	r3
 8005786:	3601      	adds	r6, #1
 8005788:	e7ee      	b.n	8005768 <__libc_init_array+0xc>
 800578a:	f855 3b04 	ldr.w	r3, [r5], #4
 800578e:	4798      	blx	r3
 8005790:	3601      	adds	r6, #1
 8005792:	e7f2      	b.n	800577a <__libc_init_array+0x1e>
 8005794:	08007898 	.word	0x08007898
 8005798:	08007898 	.word	0x08007898
 800579c:	08007898 	.word	0x08007898
 80057a0:	0800789c 	.word	0x0800789c

080057a4 <__retarget_lock_init_recursive>:
 80057a4:	4770      	bx	lr

080057a6 <__retarget_lock_acquire_recursive>:
 80057a6:	4770      	bx	lr

080057a8 <__retarget_lock_release_recursive>:
 80057a8:	4770      	bx	lr

080057aa <quorem>:
 80057aa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057ae:	6903      	ldr	r3, [r0, #16]
 80057b0:	690c      	ldr	r4, [r1, #16]
 80057b2:	42a3      	cmp	r3, r4
 80057b4:	4607      	mov	r7, r0
 80057b6:	db7e      	blt.n	80058b6 <quorem+0x10c>
 80057b8:	3c01      	subs	r4, #1
 80057ba:	f101 0814 	add.w	r8, r1, #20
 80057be:	00a3      	lsls	r3, r4, #2
 80057c0:	f100 0514 	add.w	r5, r0, #20
 80057c4:	9300      	str	r3, [sp, #0]
 80057c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80057ca:	9301      	str	r3, [sp, #4]
 80057cc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80057d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80057d4:	3301      	adds	r3, #1
 80057d6:	429a      	cmp	r2, r3
 80057d8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80057dc:	fbb2 f6f3 	udiv	r6, r2, r3
 80057e0:	d32e      	bcc.n	8005840 <quorem+0x96>
 80057e2:	f04f 0a00 	mov.w	sl, #0
 80057e6:	46c4      	mov	ip, r8
 80057e8:	46ae      	mov	lr, r5
 80057ea:	46d3      	mov	fp, sl
 80057ec:	f85c 3b04 	ldr.w	r3, [ip], #4
 80057f0:	b298      	uxth	r0, r3
 80057f2:	fb06 a000 	mla	r0, r6, r0, sl
 80057f6:	0c02      	lsrs	r2, r0, #16
 80057f8:	0c1b      	lsrs	r3, r3, #16
 80057fa:	fb06 2303 	mla	r3, r6, r3, r2
 80057fe:	f8de 2000 	ldr.w	r2, [lr]
 8005802:	b280      	uxth	r0, r0
 8005804:	b292      	uxth	r2, r2
 8005806:	1a12      	subs	r2, r2, r0
 8005808:	445a      	add	r2, fp
 800580a:	f8de 0000 	ldr.w	r0, [lr]
 800580e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005812:	b29b      	uxth	r3, r3
 8005814:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005818:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800581c:	b292      	uxth	r2, r2
 800581e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005822:	45e1      	cmp	r9, ip
 8005824:	f84e 2b04 	str.w	r2, [lr], #4
 8005828:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800582c:	d2de      	bcs.n	80057ec <quorem+0x42>
 800582e:	9b00      	ldr	r3, [sp, #0]
 8005830:	58eb      	ldr	r3, [r5, r3]
 8005832:	b92b      	cbnz	r3, 8005840 <quorem+0x96>
 8005834:	9b01      	ldr	r3, [sp, #4]
 8005836:	3b04      	subs	r3, #4
 8005838:	429d      	cmp	r5, r3
 800583a:	461a      	mov	r2, r3
 800583c:	d32f      	bcc.n	800589e <quorem+0xf4>
 800583e:	613c      	str	r4, [r7, #16]
 8005840:	4638      	mov	r0, r7
 8005842:	f001 f97b 	bl	8006b3c <__mcmp>
 8005846:	2800      	cmp	r0, #0
 8005848:	db25      	blt.n	8005896 <quorem+0xec>
 800584a:	4629      	mov	r1, r5
 800584c:	2000      	movs	r0, #0
 800584e:	f858 2b04 	ldr.w	r2, [r8], #4
 8005852:	f8d1 c000 	ldr.w	ip, [r1]
 8005856:	fa1f fe82 	uxth.w	lr, r2
 800585a:	fa1f f38c 	uxth.w	r3, ip
 800585e:	eba3 030e 	sub.w	r3, r3, lr
 8005862:	4403      	add	r3, r0
 8005864:	0c12      	lsrs	r2, r2, #16
 8005866:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800586a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800586e:	b29b      	uxth	r3, r3
 8005870:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005874:	45c1      	cmp	r9, r8
 8005876:	f841 3b04 	str.w	r3, [r1], #4
 800587a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800587e:	d2e6      	bcs.n	800584e <quorem+0xa4>
 8005880:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005884:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005888:	b922      	cbnz	r2, 8005894 <quorem+0xea>
 800588a:	3b04      	subs	r3, #4
 800588c:	429d      	cmp	r5, r3
 800588e:	461a      	mov	r2, r3
 8005890:	d30b      	bcc.n	80058aa <quorem+0x100>
 8005892:	613c      	str	r4, [r7, #16]
 8005894:	3601      	adds	r6, #1
 8005896:	4630      	mov	r0, r6
 8005898:	b003      	add	sp, #12
 800589a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800589e:	6812      	ldr	r2, [r2, #0]
 80058a0:	3b04      	subs	r3, #4
 80058a2:	2a00      	cmp	r2, #0
 80058a4:	d1cb      	bne.n	800583e <quorem+0x94>
 80058a6:	3c01      	subs	r4, #1
 80058a8:	e7c6      	b.n	8005838 <quorem+0x8e>
 80058aa:	6812      	ldr	r2, [r2, #0]
 80058ac:	3b04      	subs	r3, #4
 80058ae:	2a00      	cmp	r2, #0
 80058b0:	d1ef      	bne.n	8005892 <quorem+0xe8>
 80058b2:	3c01      	subs	r4, #1
 80058b4:	e7ea      	b.n	800588c <quorem+0xe2>
 80058b6:	2000      	movs	r0, #0
 80058b8:	e7ee      	b.n	8005898 <quorem+0xee>
 80058ba:	0000      	movs	r0, r0
 80058bc:	0000      	movs	r0, r0
	...

080058c0 <_dtoa_r>:
 80058c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058c4:	69c7      	ldr	r7, [r0, #28]
 80058c6:	b099      	sub	sp, #100	@ 0x64
 80058c8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80058cc:	ec55 4b10 	vmov	r4, r5, d0
 80058d0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80058d2:	9109      	str	r1, [sp, #36]	@ 0x24
 80058d4:	4683      	mov	fp, r0
 80058d6:	920e      	str	r2, [sp, #56]	@ 0x38
 80058d8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80058da:	b97f      	cbnz	r7, 80058fc <_dtoa_r+0x3c>
 80058dc:	2010      	movs	r0, #16
 80058de:	f000 fdfd 	bl	80064dc <malloc>
 80058e2:	4602      	mov	r2, r0
 80058e4:	f8cb 001c 	str.w	r0, [fp, #28]
 80058e8:	b920      	cbnz	r0, 80058f4 <_dtoa_r+0x34>
 80058ea:	4ba7      	ldr	r3, [pc, #668]	@ (8005b88 <_dtoa_r+0x2c8>)
 80058ec:	21ef      	movs	r1, #239	@ 0xef
 80058ee:	48a7      	ldr	r0, [pc, #668]	@ (8005b8c <_dtoa_r+0x2cc>)
 80058f0:	f001 faf6 	bl	8006ee0 <__assert_func>
 80058f4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80058f8:	6007      	str	r7, [r0, #0]
 80058fa:	60c7      	str	r7, [r0, #12]
 80058fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005900:	6819      	ldr	r1, [r3, #0]
 8005902:	b159      	cbz	r1, 800591c <_dtoa_r+0x5c>
 8005904:	685a      	ldr	r2, [r3, #4]
 8005906:	604a      	str	r2, [r1, #4]
 8005908:	2301      	movs	r3, #1
 800590a:	4093      	lsls	r3, r2
 800590c:	608b      	str	r3, [r1, #8]
 800590e:	4658      	mov	r0, fp
 8005910:	f000 feda 	bl	80066c8 <_Bfree>
 8005914:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005918:	2200      	movs	r2, #0
 800591a:	601a      	str	r2, [r3, #0]
 800591c:	1e2b      	subs	r3, r5, #0
 800591e:	bfb9      	ittee	lt
 8005920:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005924:	9303      	strlt	r3, [sp, #12]
 8005926:	2300      	movge	r3, #0
 8005928:	6033      	strge	r3, [r6, #0]
 800592a:	9f03      	ldr	r7, [sp, #12]
 800592c:	4b98      	ldr	r3, [pc, #608]	@ (8005b90 <_dtoa_r+0x2d0>)
 800592e:	bfbc      	itt	lt
 8005930:	2201      	movlt	r2, #1
 8005932:	6032      	strlt	r2, [r6, #0]
 8005934:	43bb      	bics	r3, r7
 8005936:	d112      	bne.n	800595e <_dtoa_r+0x9e>
 8005938:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800593a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800593e:	6013      	str	r3, [r2, #0]
 8005940:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005944:	4323      	orrs	r3, r4
 8005946:	f000 854d 	beq.w	80063e4 <_dtoa_r+0xb24>
 800594a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800594c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8005ba4 <_dtoa_r+0x2e4>
 8005950:	2b00      	cmp	r3, #0
 8005952:	f000 854f 	beq.w	80063f4 <_dtoa_r+0xb34>
 8005956:	f10a 0303 	add.w	r3, sl, #3
 800595a:	f000 bd49 	b.w	80063f0 <_dtoa_r+0xb30>
 800595e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005962:	2200      	movs	r2, #0
 8005964:	ec51 0b17 	vmov	r0, r1, d7
 8005968:	2300      	movs	r3, #0
 800596a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800596e:	f7fb f8ab 	bl	8000ac8 <__aeabi_dcmpeq>
 8005972:	4680      	mov	r8, r0
 8005974:	b158      	cbz	r0, 800598e <_dtoa_r+0xce>
 8005976:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005978:	2301      	movs	r3, #1
 800597a:	6013      	str	r3, [r2, #0]
 800597c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800597e:	b113      	cbz	r3, 8005986 <_dtoa_r+0xc6>
 8005980:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005982:	4b84      	ldr	r3, [pc, #528]	@ (8005b94 <_dtoa_r+0x2d4>)
 8005984:	6013      	str	r3, [r2, #0]
 8005986:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8005ba8 <_dtoa_r+0x2e8>
 800598a:	f000 bd33 	b.w	80063f4 <_dtoa_r+0xb34>
 800598e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8005992:	aa16      	add	r2, sp, #88	@ 0x58
 8005994:	a917      	add	r1, sp, #92	@ 0x5c
 8005996:	4658      	mov	r0, fp
 8005998:	f001 f980 	bl	8006c9c <__d2b>
 800599c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80059a0:	4681      	mov	r9, r0
 80059a2:	2e00      	cmp	r6, #0
 80059a4:	d077      	beq.n	8005a96 <_dtoa_r+0x1d6>
 80059a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80059a8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80059ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80059b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80059b4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80059b8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80059bc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80059c0:	4619      	mov	r1, r3
 80059c2:	2200      	movs	r2, #0
 80059c4:	4b74      	ldr	r3, [pc, #464]	@ (8005b98 <_dtoa_r+0x2d8>)
 80059c6:	f7fa fc5f 	bl	8000288 <__aeabi_dsub>
 80059ca:	a369      	add	r3, pc, #420	@ (adr r3, 8005b70 <_dtoa_r+0x2b0>)
 80059cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059d0:	f7fa fe12 	bl	80005f8 <__aeabi_dmul>
 80059d4:	a368      	add	r3, pc, #416	@ (adr r3, 8005b78 <_dtoa_r+0x2b8>)
 80059d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059da:	f7fa fc57 	bl	800028c <__adddf3>
 80059de:	4604      	mov	r4, r0
 80059e0:	4630      	mov	r0, r6
 80059e2:	460d      	mov	r5, r1
 80059e4:	f7fa fd9e 	bl	8000524 <__aeabi_i2d>
 80059e8:	a365      	add	r3, pc, #404	@ (adr r3, 8005b80 <_dtoa_r+0x2c0>)
 80059ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ee:	f7fa fe03 	bl	80005f8 <__aeabi_dmul>
 80059f2:	4602      	mov	r2, r0
 80059f4:	460b      	mov	r3, r1
 80059f6:	4620      	mov	r0, r4
 80059f8:	4629      	mov	r1, r5
 80059fa:	f7fa fc47 	bl	800028c <__adddf3>
 80059fe:	4604      	mov	r4, r0
 8005a00:	460d      	mov	r5, r1
 8005a02:	f7fb f8a9 	bl	8000b58 <__aeabi_d2iz>
 8005a06:	2200      	movs	r2, #0
 8005a08:	4607      	mov	r7, r0
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	4620      	mov	r0, r4
 8005a0e:	4629      	mov	r1, r5
 8005a10:	f7fb f864 	bl	8000adc <__aeabi_dcmplt>
 8005a14:	b140      	cbz	r0, 8005a28 <_dtoa_r+0x168>
 8005a16:	4638      	mov	r0, r7
 8005a18:	f7fa fd84 	bl	8000524 <__aeabi_i2d>
 8005a1c:	4622      	mov	r2, r4
 8005a1e:	462b      	mov	r3, r5
 8005a20:	f7fb f852 	bl	8000ac8 <__aeabi_dcmpeq>
 8005a24:	b900      	cbnz	r0, 8005a28 <_dtoa_r+0x168>
 8005a26:	3f01      	subs	r7, #1
 8005a28:	2f16      	cmp	r7, #22
 8005a2a:	d851      	bhi.n	8005ad0 <_dtoa_r+0x210>
 8005a2c:	4b5b      	ldr	r3, [pc, #364]	@ (8005b9c <_dtoa_r+0x2dc>)
 8005a2e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a36:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005a3a:	f7fb f84f 	bl	8000adc <__aeabi_dcmplt>
 8005a3e:	2800      	cmp	r0, #0
 8005a40:	d048      	beq.n	8005ad4 <_dtoa_r+0x214>
 8005a42:	3f01      	subs	r7, #1
 8005a44:	2300      	movs	r3, #0
 8005a46:	9312      	str	r3, [sp, #72]	@ 0x48
 8005a48:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005a4a:	1b9b      	subs	r3, r3, r6
 8005a4c:	1e5a      	subs	r2, r3, #1
 8005a4e:	bf44      	itt	mi
 8005a50:	f1c3 0801 	rsbmi	r8, r3, #1
 8005a54:	2300      	movmi	r3, #0
 8005a56:	9208      	str	r2, [sp, #32]
 8005a58:	bf54      	ite	pl
 8005a5a:	f04f 0800 	movpl.w	r8, #0
 8005a5e:	9308      	strmi	r3, [sp, #32]
 8005a60:	2f00      	cmp	r7, #0
 8005a62:	db39      	blt.n	8005ad8 <_dtoa_r+0x218>
 8005a64:	9b08      	ldr	r3, [sp, #32]
 8005a66:	970f      	str	r7, [sp, #60]	@ 0x3c
 8005a68:	443b      	add	r3, r7
 8005a6a:	9308      	str	r3, [sp, #32]
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005a70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a72:	2b09      	cmp	r3, #9
 8005a74:	d864      	bhi.n	8005b40 <_dtoa_r+0x280>
 8005a76:	2b05      	cmp	r3, #5
 8005a78:	bfc4      	itt	gt
 8005a7a:	3b04      	subgt	r3, #4
 8005a7c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8005a7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a80:	f1a3 0302 	sub.w	r3, r3, #2
 8005a84:	bfcc      	ite	gt
 8005a86:	2400      	movgt	r4, #0
 8005a88:	2401      	movle	r4, #1
 8005a8a:	2b03      	cmp	r3, #3
 8005a8c:	d863      	bhi.n	8005b56 <_dtoa_r+0x296>
 8005a8e:	e8df f003 	tbb	[pc, r3]
 8005a92:	372a      	.short	0x372a
 8005a94:	5535      	.short	0x5535
 8005a96:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8005a9a:	441e      	add	r6, r3
 8005a9c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005aa0:	2b20      	cmp	r3, #32
 8005aa2:	bfc1      	itttt	gt
 8005aa4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005aa8:	409f      	lslgt	r7, r3
 8005aaa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005aae:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005ab2:	bfd6      	itet	le
 8005ab4:	f1c3 0320 	rsble	r3, r3, #32
 8005ab8:	ea47 0003 	orrgt.w	r0, r7, r3
 8005abc:	fa04 f003 	lslle.w	r0, r4, r3
 8005ac0:	f7fa fd20 	bl	8000504 <__aeabi_ui2d>
 8005ac4:	2201      	movs	r2, #1
 8005ac6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005aca:	3e01      	subs	r6, #1
 8005acc:	9214      	str	r2, [sp, #80]	@ 0x50
 8005ace:	e777      	b.n	80059c0 <_dtoa_r+0x100>
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	e7b8      	b.n	8005a46 <_dtoa_r+0x186>
 8005ad4:	9012      	str	r0, [sp, #72]	@ 0x48
 8005ad6:	e7b7      	b.n	8005a48 <_dtoa_r+0x188>
 8005ad8:	427b      	negs	r3, r7
 8005ada:	930a      	str	r3, [sp, #40]	@ 0x28
 8005adc:	2300      	movs	r3, #0
 8005ade:	eba8 0807 	sub.w	r8, r8, r7
 8005ae2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005ae4:	e7c4      	b.n	8005a70 <_dtoa_r+0x1b0>
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005aea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	dc35      	bgt.n	8005b5c <_dtoa_r+0x29c>
 8005af0:	2301      	movs	r3, #1
 8005af2:	9300      	str	r3, [sp, #0]
 8005af4:	9307      	str	r3, [sp, #28]
 8005af6:	461a      	mov	r2, r3
 8005af8:	920e      	str	r2, [sp, #56]	@ 0x38
 8005afa:	e00b      	b.n	8005b14 <_dtoa_r+0x254>
 8005afc:	2301      	movs	r3, #1
 8005afe:	e7f3      	b.n	8005ae8 <_dtoa_r+0x228>
 8005b00:	2300      	movs	r3, #0
 8005b02:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005b04:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005b06:	18fb      	adds	r3, r7, r3
 8005b08:	9300      	str	r3, [sp, #0]
 8005b0a:	3301      	adds	r3, #1
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	9307      	str	r3, [sp, #28]
 8005b10:	bfb8      	it	lt
 8005b12:	2301      	movlt	r3, #1
 8005b14:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005b18:	2100      	movs	r1, #0
 8005b1a:	2204      	movs	r2, #4
 8005b1c:	f102 0514 	add.w	r5, r2, #20
 8005b20:	429d      	cmp	r5, r3
 8005b22:	d91f      	bls.n	8005b64 <_dtoa_r+0x2a4>
 8005b24:	6041      	str	r1, [r0, #4]
 8005b26:	4658      	mov	r0, fp
 8005b28:	f000 fd8e 	bl	8006648 <_Balloc>
 8005b2c:	4682      	mov	sl, r0
 8005b2e:	2800      	cmp	r0, #0
 8005b30:	d13c      	bne.n	8005bac <_dtoa_r+0x2ec>
 8005b32:	4b1b      	ldr	r3, [pc, #108]	@ (8005ba0 <_dtoa_r+0x2e0>)
 8005b34:	4602      	mov	r2, r0
 8005b36:	f240 11af 	movw	r1, #431	@ 0x1af
 8005b3a:	e6d8      	b.n	80058ee <_dtoa_r+0x2e>
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	e7e0      	b.n	8005b02 <_dtoa_r+0x242>
 8005b40:	2401      	movs	r4, #1
 8005b42:	2300      	movs	r3, #0
 8005b44:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b46:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005b48:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005b4c:	9300      	str	r3, [sp, #0]
 8005b4e:	9307      	str	r3, [sp, #28]
 8005b50:	2200      	movs	r2, #0
 8005b52:	2312      	movs	r3, #18
 8005b54:	e7d0      	b.n	8005af8 <_dtoa_r+0x238>
 8005b56:	2301      	movs	r3, #1
 8005b58:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005b5a:	e7f5      	b.n	8005b48 <_dtoa_r+0x288>
 8005b5c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005b5e:	9300      	str	r3, [sp, #0]
 8005b60:	9307      	str	r3, [sp, #28]
 8005b62:	e7d7      	b.n	8005b14 <_dtoa_r+0x254>
 8005b64:	3101      	adds	r1, #1
 8005b66:	0052      	lsls	r2, r2, #1
 8005b68:	e7d8      	b.n	8005b1c <_dtoa_r+0x25c>
 8005b6a:	bf00      	nop
 8005b6c:	f3af 8000 	nop.w
 8005b70:	636f4361 	.word	0x636f4361
 8005b74:	3fd287a7 	.word	0x3fd287a7
 8005b78:	8b60c8b3 	.word	0x8b60c8b3
 8005b7c:	3fc68a28 	.word	0x3fc68a28
 8005b80:	509f79fb 	.word	0x509f79fb
 8005b84:	3fd34413 	.word	0x3fd34413
 8005b88:	08007561 	.word	0x08007561
 8005b8c:	08007578 	.word	0x08007578
 8005b90:	7ff00000 	.word	0x7ff00000
 8005b94:	08007531 	.word	0x08007531
 8005b98:	3ff80000 	.word	0x3ff80000
 8005b9c:	08007670 	.word	0x08007670
 8005ba0:	080075d0 	.word	0x080075d0
 8005ba4:	0800755d 	.word	0x0800755d
 8005ba8:	08007530 	.word	0x08007530
 8005bac:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005bb0:	6018      	str	r0, [r3, #0]
 8005bb2:	9b07      	ldr	r3, [sp, #28]
 8005bb4:	2b0e      	cmp	r3, #14
 8005bb6:	f200 80a4 	bhi.w	8005d02 <_dtoa_r+0x442>
 8005bba:	2c00      	cmp	r4, #0
 8005bbc:	f000 80a1 	beq.w	8005d02 <_dtoa_r+0x442>
 8005bc0:	2f00      	cmp	r7, #0
 8005bc2:	dd33      	ble.n	8005c2c <_dtoa_r+0x36c>
 8005bc4:	4bad      	ldr	r3, [pc, #692]	@ (8005e7c <_dtoa_r+0x5bc>)
 8005bc6:	f007 020f 	and.w	r2, r7, #15
 8005bca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005bce:	ed93 7b00 	vldr	d7, [r3]
 8005bd2:	05f8      	lsls	r0, r7, #23
 8005bd4:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005bd8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005bdc:	d516      	bpl.n	8005c0c <_dtoa_r+0x34c>
 8005bde:	4ba8      	ldr	r3, [pc, #672]	@ (8005e80 <_dtoa_r+0x5c0>)
 8005be0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005be4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005be8:	f7fa fe30 	bl	800084c <__aeabi_ddiv>
 8005bec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005bf0:	f004 040f 	and.w	r4, r4, #15
 8005bf4:	2603      	movs	r6, #3
 8005bf6:	4da2      	ldr	r5, [pc, #648]	@ (8005e80 <_dtoa_r+0x5c0>)
 8005bf8:	b954      	cbnz	r4, 8005c10 <_dtoa_r+0x350>
 8005bfa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005bfe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c02:	f7fa fe23 	bl	800084c <__aeabi_ddiv>
 8005c06:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c0a:	e028      	b.n	8005c5e <_dtoa_r+0x39e>
 8005c0c:	2602      	movs	r6, #2
 8005c0e:	e7f2      	b.n	8005bf6 <_dtoa_r+0x336>
 8005c10:	07e1      	lsls	r1, r4, #31
 8005c12:	d508      	bpl.n	8005c26 <_dtoa_r+0x366>
 8005c14:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c18:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005c1c:	f7fa fcec 	bl	80005f8 <__aeabi_dmul>
 8005c20:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005c24:	3601      	adds	r6, #1
 8005c26:	1064      	asrs	r4, r4, #1
 8005c28:	3508      	adds	r5, #8
 8005c2a:	e7e5      	b.n	8005bf8 <_dtoa_r+0x338>
 8005c2c:	f000 80d2 	beq.w	8005dd4 <_dtoa_r+0x514>
 8005c30:	427c      	negs	r4, r7
 8005c32:	4b92      	ldr	r3, [pc, #584]	@ (8005e7c <_dtoa_r+0x5bc>)
 8005c34:	4d92      	ldr	r5, [pc, #584]	@ (8005e80 <_dtoa_r+0x5c0>)
 8005c36:	f004 020f 	and.w	r2, r4, #15
 8005c3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c42:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005c46:	f7fa fcd7 	bl	80005f8 <__aeabi_dmul>
 8005c4a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c4e:	1124      	asrs	r4, r4, #4
 8005c50:	2300      	movs	r3, #0
 8005c52:	2602      	movs	r6, #2
 8005c54:	2c00      	cmp	r4, #0
 8005c56:	f040 80b2 	bne.w	8005dbe <_dtoa_r+0x4fe>
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d1d3      	bne.n	8005c06 <_dtoa_r+0x346>
 8005c5e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005c60:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	f000 80b7 	beq.w	8005dd8 <_dtoa_r+0x518>
 8005c6a:	4b86      	ldr	r3, [pc, #536]	@ (8005e84 <_dtoa_r+0x5c4>)
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	4620      	mov	r0, r4
 8005c70:	4629      	mov	r1, r5
 8005c72:	f7fa ff33 	bl	8000adc <__aeabi_dcmplt>
 8005c76:	2800      	cmp	r0, #0
 8005c78:	f000 80ae 	beq.w	8005dd8 <_dtoa_r+0x518>
 8005c7c:	9b07      	ldr	r3, [sp, #28]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	f000 80aa 	beq.w	8005dd8 <_dtoa_r+0x518>
 8005c84:	9b00      	ldr	r3, [sp, #0]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	dd37      	ble.n	8005cfa <_dtoa_r+0x43a>
 8005c8a:	1e7b      	subs	r3, r7, #1
 8005c8c:	9304      	str	r3, [sp, #16]
 8005c8e:	4620      	mov	r0, r4
 8005c90:	4b7d      	ldr	r3, [pc, #500]	@ (8005e88 <_dtoa_r+0x5c8>)
 8005c92:	2200      	movs	r2, #0
 8005c94:	4629      	mov	r1, r5
 8005c96:	f7fa fcaf 	bl	80005f8 <__aeabi_dmul>
 8005c9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c9e:	9c00      	ldr	r4, [sp, #0]
 8005ca0:	3601      	adds	r6, #1
 8005ca2:	4630      	mov	r0, r6
 8005ca4:	f7fa fc3e 	bl	8000524 <__aeabi_i2d>
 8005ca8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005cac:	f7fa fca4 	bl	80005f8 <__aeabi_dmul>
 8005cb0:	4b76      	ldr	r3, [pc, #472]	@ (8005e8c <_dtoa_r+0x5cc>)
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	f7fa faea 	bl	800028c <__adddf3>
 8005cb8:	4605      	mov	r5, r0
 8005cba:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005cbe:	2c00      	cmp	r4, #0
 8005cc0:	f040 808d 	bne.w	8005dde <_dtoa_r+0x51e>
 8005cc4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005cc8:	4b71      	ldr	r3, [pc, #452]	@ (8005e90 <_dtoa_r+0x5d0>)
 8005cca:	2200      	movs	r2, #0
 8005ccc:	f7fa fadc 	bl	8000288 <__aeabi_dsub>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	460b      	mov	r3, r1
 8005cd4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005cd8:	462a      	mov	r2, r5
 8005cda:	4633      	mov	r3, r6
 8005cdc:	f7fa ff1c 	bl	8000b18 <__aeabi_dcmpgt>
 8005ce0:	2800      	cmp	r0, #0
 8005ce2:	f040 828b 	bne.w	80061fc <_dtoa_r+0x93c>
 8005ce6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005cea:	462a      	mov	r2, r5
 8005cec:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005cf0:	f7fa fef4 	bl	8000adc <__aeabi_dcmplt>
 8005cf4:	2800      	cmp	r0, #0
 8005cf6:	f040 8128 	bne.w	8005f4a <_dtoa_r+0x68a>
 8005cfa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005cfe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005d02:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	f2c0 815a 	blt.w	8005fbe <_dtoa_r+0x6fe>
 8005d0a:	2f0e      	cmp	r7, #14
 8005d0c:	f300 8157 	bgt.w	8005fbe <_dtoa_r+0x6fe>
 8005d10:	4b5a      	ldr	r3, [pc, #360]	@ (8005e7c <_dtoa_r+0x5bc>)
 8005d12:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005d16:	ed93 7b00 	vldr	d7, [r3]
 8005d1a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	ed8d 7b00 	vstr	d7, [sp]
 8005d22:	da03      	bge.n	8005d2c <_dtoa_r+0x46c>
 8005d24:	9b07      	ldr	r3, [sp, #28]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	f340 8101 	ble.w	8005f2e <_dtoa_r+0x66e>
 8005d2c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005d30:	4656      	mov	r6, sl
 8005d32:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005d36:	4620      	mov	r0, r4
 8005d38:	4629      	mov	r1, r5
 8005d3a:	f7fa fd87 	bl	800084c <__aeabi_ddiv>
 8005d3e:	f7fa ff0b 	bl	8000b58 <__aeabi_d2iz>
 8005d42:	4680      	mov	r8, r0
 8005d44:	f7fa fbee 	bl	8000524 <__aeabi_i2d>
 8005d48:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005d4c:	f7fa fc54 	bl	80005f8 <__aeabi_dmul>
 8005d50:	4602      	mov	r2, r0
 8005d52:	460b      	mov	r3, r1
 8005d54:	4620      	mov	r0, r4
 8005d56:	4629      	mov	r1, r5
 8005d58:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005d5c:	f7fa fa94 	bl	8000288 <__aeabi_dsub>
 8005d60:	f806 4b01 	strb.w	r4, [r6], #1
 8005d64:	9d07      	ldr	r5, [sp, #28]
 8005d66:	eba6 040a 	sub.w	r4, r6, sl
 8005d6a:	42a5      	cmp	r5, r4
 8005d6c:	4602      	mov	r2, r0
 8005d6e:	460b      	mov	r3, r1
 8005d70:	f040 8117 	bne.w	8005fa2 <_dtoa_r+0x6e2>
 8005d74:	f7fa fa8a 	bl	800028c <__adddf3>
 8005d78:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005d7c:	4604      	mov	r4, r0
 8005d7e:	460d      	mov	r5, r1
 8005d80:	f7fa feca 	bl	8000b18 <__aeabi_dcmpgt>
 8005d84:	2800      	cmp	r0, #0
 8005d86:	f040 80f9 	bne.w	8005f7c <_dtoa_r+0x6bc>
 8005d8a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005d8e:	4620      	mov	r0, r4
 8005d90:	4629      	mov	r1, r5
 8005d92:	f7fa fe99 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d96:	b118      	cbz	r0, 8005da0 <_dtoa_r+0x4e0>
 8005d98:	f018 0f01 	tst.w	r8, #1
 8005d9c:	f040 80ee 	bne.w	8005f7c <_dtoa_r+0x6bc>
 8005da0:	4649      	mov	r1, r9
 8005da2:	4658      	mov	r0, fp
 8005da4:	f000 fc90 	bl	80066c8 <_Bfree>
 8005da8:	2300      	movs	r3, #0
 8005daa:	7033      	strb	r3, [r6, #0]
 8005dac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005dae:	3701      	adds	r7, #1
 8005db0:	601f      	str	r7, [r3, #0]
 8005db2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	f000 831d 	beq.w	80063f4 <_dtoa_r+0xb34>
 8005dba:	601e      	str	r6, [r3, #0]
 8005dbc:	e31a      	b.n	80063f4 <_dtoa_r+0xb34>
 8005dbe:	07e2      	lsls	r2, r4, #31
 8005dc0:	d505      	bpl.n	8005dce <_dtoa_r+0x50e>
 8005dc2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005dc6:	f7fa fc17 	bl	80005f8 <__aeabi_dmul>
 8005dca:	3601      	adds	r6, #1
 8005dcc:	2301      	movs	r3, #1
 8005dce:	1064      	asrs	r4, r4, #1
 8005dd0:	3508      	adds	r5, #8
 8005dd2:	e73f      	b.n	8005c54 <_dtoa_r+0x394>
 8005dd4:	2602      	movs	r6, #2
 8005dd6:	e742      	b.n	8005c5e <_dtoa_r+0x39e>
 8005dd8:	9c07      	ldr	r4, [sp, #28]
 8005dda:	9704      	str	r7, [sp, #16]
 8005ddc:	e761      	b.n	8005ca2 <_dtoa_r+0x3e2>
 8005dde:	4b27      	ldr	r3, [pc, #156]	@ (8005e7c <_dtoa_r+0x5bc>)
 8005de0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005de2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005de6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005dea:	4454      	add	r4, sl
 8005dec:	2900      	cmp	r1, #0
 8005dee:	d053      	beq.n	8005e98 <_dtoa_r+0x5d8>
 8005df0:	4928      	ldr	r1, [pc, #160]	@ (8005e94 <_dtoa_r+0x5d4>)
 8005df2:	2000      	movs	r0, #0
 8005df4:	f7fa fd2a 	bl	800084c <__aeabi_ddiv>
 8005df8:	4633      	mov	r3, r6
 8005dfa:	462a      	mov	r2, r5
 8005dfc:	f7fa fa44 	bl	8000288 <__aeabi_dsub>
 8005e00:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005e04:	4656      	mov	r6, sl
 8005e06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e0a:	f7fa fea5 	bl	8000b58 <__aeabi_d2iz>
 8005e0e:	4605      	mov	r5, r0
 8005e10:	f7fa fb88 	bl	8000524 <__aeabi_i2d>
 8005e14:	4602      	mov	r2, r0
 8005e16:	460b      	mov	r3, r1
 8005e18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e1c:	f7fa fa34 	bl	8000288 <__aeabi_dsub>
 8005e20:	3530      	adds	r5, #48	@ 0x30
 8005e22:	4602      	mov	r2, r0
 8005e24:	460b      	mov	r3, r1
 8005e26:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005e2a:	f806 5b01 	strb.w	r5, [r6], #1
 8005e2e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005e32:	f7fa fe53 	bl	8000adc <__aeabi_dcmplt>
 8005e36:	2800      	cmp	r0, #0
 8005e38:	d171      	bne.n	8005f1e <_dtoa_r+0x65e>
 8005e3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005e3e:	4911      	ldr	r1, [pc, #68]	@ (8005e84 <_dtoa_r+0x5c4>)
 8005e40:	2000      	movs	r0, #0
 8005e42:	f7fa fa21 	bl	8000288 <__aeabi_dsub>
 8005e46:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005e4a:	f7fa fe47 	bl	8000adc <__aeabi_dcmplt>
 8005e4e:	2800      	cmp	r0, #0
 8005e50:	f040 8095 	bne.w	8005f7e <_dtoa_r+0x6be>
 8005e54:	42a6      	cmp	r6, r4
 8005e56:	f43f af50 	beq.w	8005cfa <_dtoa_r+0x43a>
 8005e5a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005e5e:	4b0a      	ldr	r3, [pc, #40]	@ (8005e88 <_dtoa_r+0x5c8>)
 8005e60:	2200      	movs	r2, #0
 8005e62:	f7fa fbc9 	bl	80005f8 <__aeabi_dmul>
 8005e66:	4b08      	ldr	r3, [pc, #32]	@ (8005e88 <_dtoa_r+0x5c8>)
 8005e68:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e72:	f7fa fbc1 	bl	80005f8 <__aeabi_dmul>
 8005e76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e7a:	e7c4      	b.n	8005e06 <_dtoa_r+0x546>
 8005e7c:	08007670 	.word	0x08007670
 8005e80:	08007648 	.word	0x08007648
 8005e84:	3ff00000 	.word	0x3ff00000
 8005e88:	40240000 	.word	0x40240000
 8005e8c:	401c0000 	.word	0x401c0000
 8005e90:	40140000 	.word	0x40140000
 8005e94:	3fe00000 	.word	0x3fe00000
 8005e98:	4631      	mov	r1, r6
 8005e9a:	4628      	mov	r0, r5
 8005e9c:	f7fa fbac 	bl	80005f8 <__aeabi_dmul>
 8005ea0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005ea4:	9415      	str	r4, [sp, #84]	@ 0x54
 8005ea6:	4656      	mov	r6, sl
 8005ea8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005eac:	f7fa fe54 	bl	8000b58 <__aeabi_d2iz>
 8005eb0:	4605      	mov	r5, r0
 8005eb2:	f7fa fb37 	bl	8000524 <__aeabi_i2d>
 8005eb6:	4602      	mov	r2, r0
 8005eb8:	460b      	mov	r3, r1
 8005eba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ebe:	f7fa f9e3 	bl	8000288 <__aeabi_dsub>
 8005ec2:	3530      	adds	r5, #48	@ 0x30
 8005ec4:	f806 5b01 	strb.w	r5, [r6], #1
 8005ec8:	4602      	mov	r2, r0
 8005eca:	460b      	mov	r3, r1
 8005ecc:	42a6      	cmp	r6, r4
 8005ece:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005ed2:	f04f 0200 	mov.w	r2, #0
 8005ed6:	d124      	bne.n	8005f22 <_dtoa_r+0x662>
 8005ed8:	4bac      	ldr	r3, [pc, #688]	@ (800618c <_dtoa_r+0x8cc>)
 8005eda:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005ede:	f7fa f9d5 	bl	800028c <__adddf3>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	460b      	mov	r3, r1
 8005ee6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005eea:	f7fa fe15 	bl	8000b18 <__aeabi_dcmpgt>
 8005eee:	2800      	cmp	r0, #0
 8005ef0:	d145      	bne.n	8005f7e <_dtoa_r+0x6be>
 8005ef2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005ef6:	49a5      	ldr	r1, [pc, #660]	@ (800618c <_dtoa_r+0x8cc>)
 8005ef8:	2000      	movs	r0, #0
 8005efa:	f7fa f9c5 	bl	8000288 <__aeabi_dsub>
 8005efe:	4602      	mov	r2, r0
 8005f00:	460b      	mov	r3, r1
 8005f02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f06:	f7fa fde9 	bl	8000adc <__aeabi_dcmplt>
 8005f0a:	2800      	cmp	r0, #0
 8005f0c:	f43f aef5 	beq.w	8005cfa <_dtoa_r+0x43a>
 8005f10:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8005f12:	1e73      	subs	r3, r6, #1
 8005f14:	9315      	str	r3, [sp, #84]	@ 0x54
 8005f16:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005f1a:	2b30      	cmp	r3, #48	@ 0x30
 8005f1c:	d0f8      	beq.n	8005f10 <_dtoa_r+0x650>
 8005f1e:	9f04      	ldr	r7, [sp, #16]
 8005f20:	e73e      	b.n	8005da0 <_dtoa_r+0x4e0>
 8005f22:	4b9b      	ldr	r3, [pc, #620]	@ (8006190 <_dtoa_r+0x8d0>)
 8005f24:	f7fa fb68 	bl	80005f8 <__aeabi_dmul>
 8005f28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f2c:	e7bc      	b.n	8005ea8 <_dtoa_r+0x5e8>
 8005f2e:	d10c      	bne.n	8005f4a <_dtoa_r+0x68a>
 8005f30:	4b98      	ldr	r3, [pc, #608]	@ (8006194 <_dtoa_r+0x8d4>)
 8005f32:	2200      	movs	r2, #0
 8005f34:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005f38:	f7fa fb5e 	bl	80005f8 <__aeabi_dmul>
 8005f3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005f40:	f7fa fde0 	bl	8000b04 <__aeabi_dcmpge>
 8005f44:	2800      	cmp	r0, #0
 8005f46:	f000 8157 	beq.w	80061f8 <_dtoa_r+0x938>
 8005f4a:	2400      	movs	r4, #0
 8005f4c:	4625      	mov	r5, r4
 8005f4e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005f50:	43db      	mvns	r3, r3
 8005f52:	9304      	str	r3, [sp, #16]
 8005f54:	4656      	mov	r6, sl
 8005f56:	2700      	movs	r7, #0
 8005f58:	4621      	mov	r1, r4
 8005f5a:	4658      	mov	r0, fp
 8005f5c:	f000 fbb4 	bl	80066c8 <_Bfree>
 8005f60:	2d00      	cmp	r5, #0
 8005f62:	d0dc      	beq.n	8005f1e <_dtoa_r+0x65e>
 8005f64:	b12f      	cbz	r7, 8005f72 <_dtoa_r+0x6b2>
 8005f66:	42af      	cmp	r7, r5
 8005f68:	d003      	beq.n	8005f72 <_dtoa_r+0x6b2>
 8005f6a:	4639      	mov	r1, r7
 8005f6c:	4658      	mov	r0, fp
 8005f6e:	f000 fbab 	bl	80066c8 <_Bfree>
 8005f72:	4629      	mov	r1, r5
 8005f74:	4658      	mov	r0, fp
 8005f76:	f000 fba7 	bl	80066c8 <_Bfree>
 8005f7a:	e7d0      	b.n	8005f1e <_dtoa_r+0x65e>
 8005f7c:	9704      	str	r7, [sp, #16]
 8005f7e:	4633      	mov	r3, r6
 8005f80:	461e      	mov	r6, r3
 8005f82:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005f86:	2a39      	cmp	r2, #57	@ 0x39
 8005f88:	d107      	bne.n	8005f9a <_dtoa_r+0x6da>
 8005f8a:	459a      	cmp	sl, r3
 8005f8c:	d1f8      	bne.n	8005f80 <_dtoa_r+0x6c0>
 8005f8e:	9a04      	ldr	r2, [sp, #16]
 8005f90:	3201      	adds	r2, #1
 8005f92:	9204      	str	r2, [sp, #16]
 8005f94:	2230      	movs	r2, #48	@ 0x30
 8005f96:	f88a 2000 	strb.w	r2, [sl]
 8005f9a:	781a      	ldrb	r2, [r3, #0]
 8005f9c:	3201      	adds	r2, #1
 8005f9e:	701a      	strb	r2, [r3, #0]
 8005fa0:	e7bd      	b.n	8005f1e <_dtoa_r+0x65e>
 8005fa2:	4b7b      	ldr	r3, [pc, #492]	@ (8006190 <_dtoa_r+0x8d0>)
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	f7fa fb27 	bl	80005f8 <__aeabi_dmul>
 8005faa:	2200      	movs	r2, #0
 8005fac:	2300      	movs	r3, #0
 8005fae:	4604      	mov	r4, r0
 8005fb0:	460d      	mov	r5, r1
 8005fb2:	f7fa fd89 	bl	8000ac8 <__aeabi_dcmpeq>
 8005fb6:	2800      	cmp	r0, #0
 8005fb8:	f43f aebb 	beq.w	8005d32 <_dtoa_r+0x472>
 8005fbc:	e6f0      	b.n	8005da0 <_dtoa_r+0x4e0>
 8005fbe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005fc0:	2a00      	cmp	r2, #0
 8005fc2:	f000 80db 	beq.w	800617c <_dtoa_r+0x8bc>
 8005fc6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005fc8:	2a01      	cmp	r2, #1
 8005fca:	f300 80bf 	bgt.w	800614c <_dtoa_r+0x88c>
 8005fce:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8005fd0:	2a00      	cmp	r2, #0
 8005fd2:	f000 80b7 	beq.w	8006144 <_dtoa_r+0x884>
 8005fd6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005fda:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005fdc:	4646      	mov	r6, r8
 8005fde:	9a08      	ldr	r2, [sp, #32]
 8005fe0:	2101      	movs	r1, #1
 8005fe2:	441a      	add	r2, r3
 8005fe4:	4658      	mov	r0, fp
 8005fe6:	4498      	add	r8, r3
 8005fe8:	9208      	str	r2, [sp, #32]
 8005fea:	f000 fc21 	bl	8006830 <__i2b>
 8005fee:	4605      	mov	r5, r0
 8005ff0:	b15e      	cbz	r6, 800600a <_dtoa_r+0x74a>
 8005ff2:	9b08      	ldr	r3, [sp, #32]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	dd08      	ble.n	800600a <_dtoa_r+0x74a>
 8005ff8:	42b3      	cmp	r3, r6
 8005ffa:	9a08      	ldr	r2, [sp, #32]
 8005ffc:	bfa8      	it	ge
 8005ffe:	4633      	movge	r3, r6
 8006000:	eba8 0803 	sub.w	r8, r8, r3
 8006004:	1af6      	subs	r6, r6, r3
 8006006:	1ad3      	subs	r3, r2, r3
 8006008:	9308      	str	r3, [sp, #32]
 800600a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800600c:	b1f3      	cbz	r3, 800604c <_dtoa_r+0x78c>
 800600e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006010:	2b00      	cmp	r3, #0
 8006012:	f000 80b7 	beq.w	8006184 <_dtoa_r+0x8c4>
 8006016:	b18c      	cbz	r4, 800603c <_dtoa_r+0x77c>
 8006018:	4629      	mov	r1, r5
 800601a:	4622      	mov	r2, r4
 800601c:	4658      	mov	r0, fp
 800601e:	f000 fcc7 	bl	80069b0 <__pow5mult>
 8006022:	464a      	mov	r2, r9
 8006024:	4601      	mov	r1, r0
 8006026:	4605      	mov	r5, r0
 8006028:	4658      	mov	r0, fp
 800602a:	f000 fc17 	bl	800685c <__multiply>
 800602e:	4649      	mov	r1, r9
 8006030:	9004      	str	r0, [sp, #16]
 8006032:	4658      	mov	r0, fp
 8006034:	f000 fb48 	bl	80066c8 <_Bfree>
 8006038:	9b04      	ldr	r3, [sp, #16]
 800603a:	4699      	mov	r9, r3
 800603c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800603e:	1b1a      	subs	r2, r3, r4
 8006040:	d004      	beq.n	800604c <_dtoa_r+0x78c>
 8006042:	4649      	mov	r1, r9
 8006044:	4658      	mov	r0, fp
 8006046:	f000 fcb3 	bl	80069b0 <__pow5mult>
 800604a:	4681      	mov	r9, r0
 800604c:	2101      	movs	r1, #1
 800604e:	4658      	mov	r0, fp
 8006050:	f000 fbee 	bl	8006830 <__i2b>
 8006054:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006056:	4604      	mov	r4, r0
 8006058:	2b00      	cmp	r3, #0
 800605a:	f000 81cf 	beq.w	80063fc <_dtoa_r+0xb3c>
 800605e:	461a      	mov	r2, r3
 8006060:	4601      	mov	r1, r0
 8006062:	4658      	mov	r0, fp
 8006064:	f000 fca4 	bl	80069b0 <__pow5mult>
 8006068:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800606a:	2b01      	cmp	r3, #1
 800606c:	4604      	mov	r4, r0
 800606e:	f300 8095 	bgt.w	800619c <_dtoa_r+0x8dc>
 8006072:	9b02      	ldr	r3, [sp, #8]
 8006074:	2b00      	cmp	r3, #0
 8006076:	f040 8087 	bne.w	8006188 <_dtoa_r+0x8c8>
 800607a:	9b03      	ldr	r3, [sp, #12]
 800607c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006080:	2b00      	cmp	r3, #0
 8006082:	f040 8089 	bne.w	8006198 <_dtoa_r+0x8d8>
 8006086:	9b03      	ldr	r3, [sp, #12]
 8006088:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800608c:	0d1b      	lsrs	r3, r3, #20
 800608e:	051b      	lsls	r3, r3, #20
 8006090:	b12b      	cbz	r3, 800609e <_dtoa_r+0x7de>
 8006092:	9b08      	ldr	r3, [sp, #32]
 8006094:	3301      	adds	r3, #1
 8006096:	9308      	str	r3, [sp, #32]
 8006098:	f108 0801 	add.w	r8, r8, #1
 800609c:	2301      	movs	r3, #1
 800609e:	930a      	str	r3, [sp, #40]	@ 0x28
 80060a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	f000 81b0 	beq.w	8006408 <_dtoa_r+0xb48>
 80060a8:	6923      	ldr	r3, [r4, #16]
 80060aa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80060ae:	6918      	ldr	r0, [r3, #16]
 80060b0:	f000 fb72 	bl	8006798 <__hi0bits>
 80060b4:	f1c0 0020 	rsb	r0, r0, #32
 80060b8:	9b08      	ldr	r3, [sp, #32]
 80060ba:	4418      	add	r0, r3
 80060bc:	f010 001f 	ands.w	r0, r0, #31
 80060c0:	d077      	beq.n	80061b2 <_dtoa_r+0x8f2>
 80060c2:	f1c0 0320 	rsb	r3, r0, #32
 80060c6:	2b04      	cmp	r3, #4
 80060c8:	dd6b      	ble.n	80061a2 <_dtoa_r+0x8e2>
 80060ca:	9b08      	ldr	r3, [sp, #32]
 80060cc:	f1c0 001c 	rsb	r0, r0, #28
 80060d0:	4403      	add	r3, r0
 80060d2:	4480      	add	r8, r0
 80060d4:	4406      	add	r6, r0
 80060d6:	9308      	str	r3, [sp, #32]
 80060d8:	f1b8 0f00 	cmp.w	r8, #0
 80060dc:	dd05      	ble.n	80060ea <_dtoa_r+0x82a>
 80060de:	4649      	mov	r1, r9
 80060e0:	4642      	mov	r2, r8
 80060e2:	4658      	mov	r0, fp
 80060e4:	f000 fcbe 	bl	8006a64 <__lshift>
 80060e8:	4681      	mov	r9, r0
 80060ea:	9b08      	ldr	r3, [sp, #32]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	dd05      	ble.n	80060fc <_dtoa_r+0x83c>
 80060f0:	4621      	mov	r1, r4
 80060f2:	461a      	mov	r2, r3
 80060f4:	4658      	mov	r0, fp
 80060f6:	f000 fcb5 	bl	8006a64 <__lshift>
 80060fa:	4604      	mov	r4, r0
 80060fc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d059      	beq.n	80061b6 <_dtoa_r+0x8f6>
 8006102:	4621      	mov	r1, r4
 8006104:	4648      	mov	r0, r9
 8006106:	f000 fd19 	bl	8006b3c <__mcmp>
 800610a:	2800      	cmp	r0, #0
 800610c:	da53      	bge.n	80061b6 <_dtoa_r+0x8f6>
 800610e:	1e7b      	subs	r3, r7, #1
 8006110:	9304      	str	r3, [sp, #16]
 8006112:	4649      	mov	r1, r9
 8006114:	2300      	movs	r3, #0
 8006116:	220a      	movs	r2, #10
 8006118:	4658      	mov	r0, fp
 800611a:	f000 faf7 	bl	800670c <__multadd>
 800611e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006120:	4681      	mov	r9, r0
 8006122:	2b00      	cmp	r3, #0
 8006124:	f000 8172 	beq.w	800640c <_dtoa_r+0xb4c>
 8006128:	2300      	movs	r3, #0
 800612a:	4629      	mov	r1, r5
 800612c:	220a      	movs	r2, #10
 800612e:	4658      	mov	r0, fp
 8006130:	f000 faec 	bl	800670c <__multadd>
 8006134:	9b00      	ldr	r3, [sp, #0]
 8006136:	2b00      	cmp	r3, #0
 8006138:	4605      	mov	r5, r0
 800613a:	dc67      	bgt.n	800620c <_dtoa_r+0x94c>
 800613c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800613e:	2b02      	cmp	r3, #2
 8006140:	dc41      	bgt.n	80061c6 <_dtoa_r+0x906>
 8006142:	e063      	b.n	800620c <_dtoa_r+0x94c>
 8006144:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006146:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800614a:	e746      	b.n	8005fda <_dtoa_r+0x71a>
 800614c:	9b07      	ldr	r3, [sp, #28]
 800614e:	1e5c      	subs	r4, r3, #1
 8006150:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006152:	42a3      	cmp	r3, r4
 8006154:	bfbf      	itttt	lt
 8006156:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006158:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800615a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800615c:	1ae3      	sublt	r3, r4, r3
 800615e:	bfb4      	ite	lt
 8006160:	18d2      	addlt	r2, r2, r3
 8006162:	1b1c      	subge	r4, r3, r4
 8006164:	9b07      	ldr	r3, [sp, #28]
 8006166:	bfbc      	itt	lt
 8006168:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800616a:	2400      	movlt	r4, #0
 800616c:	2b00      	cmp	r3, #0
 800616e:	bfb5      	itete	lt
 8006170:	eba8 0603 	sublt.w	r6, r8, r3
 8006174:	9b07      	ldrge	r3, [sp, #28]
 8006176:	2300      	movlt	r3, #0
 8006178:	4646      	movge	r6, r8
 800617a:	e730      	b.n	8005fde <_dtoa_r+0x71e>
 800617c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800617e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006180:	4646      	mov	r6, r8
 8006182:	e735      	b.n	8005ff0 <_dtoa_r+0x730>
 8006184:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006186:	e75c      	b.n	8006042 <_dtoa_r+0x782>
 8006188:	2300      	movs	r3, #0
 800618a:	e788      	b.n	800609e <_dtoa_r+0x7de>
 800618c:	3fe00000 	.word	0x3fe00000
 8006190:	40240000 	.word	0x40240000
 8006194:	40140000 	.word	0x40140000
 8006198:	9b02      	ldr	r3, [sp, #8]
 800619a:	e780      	b.n	800609e <_dtoa_r+0x7de>
 800619c:	2300      	movs	r3, #0
 800619e:	930a      	str	r3, [sp, #40]	@ 0x28
 80061a0:	e782      	b.n	80060a8 <_dtoa_r+0x7e8>
 80061a2:	d099      	beq.n	80060d8 <_dtoa_r+0x818>
 80061a4:	9a08      	ldr	r2, [sp, #32]
 80061a6:	331c      	adds	r3, #28
 80061a8:	441a      	add	r2, r3
 80061aa:	4498      	add	r8, r3
 80061ac:	441e      	add	r6, r3
 80061ae:	9208      	str	r2, [sp, #32]
 80061b0:	e792      	b.n	80060d8 <_dtoa_r+0x818>
 80061b2:	4603      	mov	r3, r0
 80061b4:	e7f6      	b.n	80061a4 <_dtoa_r+0x8e4>
 80061b6:	9b07      	ldr	r3, [sp, #28]
 80061b8:	9704      	str	r7, [sp, #16]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	dc20      	bgt.n	8006200 <_dtoa_r+0x940>
 80061be:	9300      	str	r3, [sp, #0]
 80061c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061c2:	2b02      	cmp	r3, #2
 80061c4:	dd1e      	ble.n	8006204 <_dtoa_r+0x944>
 80061c6:	9b00      	ldr	r3, [sp, #0]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	f47f aec0 	bne.w	8005f4e <_dtoa_r+0x68e>
 80061ce:	4621      	mov	r1, r4
 80061d0:	2205      	movs	r2, #5
 80061d2:	4658      	mov	r0, fp
 80061d4:	f000 fa9a 	bl	800670c <__multadd>
 80061d8:	4601      	mov	r1, r0
 80061da:	4604      	mov	r4, r0
 80061dc:	4648      	mov	r0, r9
 80061de:	f000 fcad 	bl	8006b3c <__mcmp>
 80061e2:	2800      	cmp	r0, #0
 80061e4:	f77f aeb3 	ble.w	8005f4e <_dtoa_r+0x68e>
 80061e8:	4656      	mov	r6, sl
 80061ea:	2331      	movs	r3, #49	@ 0x31
 80061ec:	f806 3b01 	strb.w	r3, [r6], #1
 80061f0:	9b04      	ldr	r3, [sp, #16]
 80061f2:	3301      	adds	r3, #1
 80061f4:	9304      	str	r3, [sp, #16]
 80061f6:	e6ae      	b.n	8005f56 <_dtoa_r+0x696>
 80061f8:	9c07      	ldr	r4, [sp, #28]
 80061fa:	9704      	str	r7, [sp, #16]
 80061fc:	4625      	mov	r5, r4
 80061fe:	e7f3      	b.n	80061e8 <_dtoa_r+0x928>
 8006200:	9b07      	ldr	r3, [sp, #28]
 8006202:	9300      	str	r3, [sp, #0]
 8006204:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006206:	2b00      	cmp	r3, #0
 8006208:	f000 8104 	beq.w	8006414 <_dtoa_r+0xb54>
 800620c:	2e00      	cmp	r6, #0
 800620e:	dd05      	ble.n	800621c <_dtoa_r+0x95c>
 8006210:	4629      	mov	r1, r5
 8006212:	4632      	mov	r2, r6
 8006214:	4658      	mov	r0, fp
 8006216:	f000 fc25 	bl	8006a64 <__lshift>
 800621a:	4605      	mov	r5, r0
 800621c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800621e:	2b00      	cmp	r3, #0
 8006220:	d05a      	beq.n	80062d8 <_dtoa_r+0xa18>
 8006222:	6869      	ldr	r1, [r5, #4]
 8006224:	4658      	mov	r0, fp
 8006226:	f000 fa0f 	bl	8006648 <_Balloc>
 800622a:	4606      	mov	r6, r0
 800622c:	b928      	cbnz	r0, 800623a <_dtoa_r+0x97a>
 800622e:	4b84      	ldr	r3, [pc, #528]	@ (8006440 <_dtoa_r+0xb80>)
 8006230:	4602      	mov	r2, r0
 8006232:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006236:	f7ff bb5a 	b.w	80058ee <_dtoa_r+0x2e>
 800623a:	692a      	ldr	r2, [r5, #16]
 800623c:	3202      	adds	r2, #2
 800623e:	0092      	lsls	r2, r2, #2
 8006240:	f105 010c 	add.w	r1, r5, #12
 8006244:	300c      	adds	r0, #12
 8006246:	f000 fe3d 	bl	8006ec4 <memcpy>
 800624a:	2201      	movs	r2, #1
 800624c:	4631      	mov	r1, r6
 800624e:	4658      	mov	r0, fp
 8006250:	f000 fc08 	bl	8006a64 <__lshift>
 8006254:	f10a 0301 	add.w	r3, sl, #1
 8006258:	9307      	str	r3, [sp, #28]
 800625a:	9b00      	ldr	r3, [sp, #0]
 800625c:	4453      	add	r3, sl
 800625e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006260:	9b02      	ldr	r3, [sp, #8]
 8006262:	f003 0301 	and.w	r3, r3, #1
 8006266:	462f      	mov	r7, r5
 8006268:	930a      	str	r3, [sp, #40]	@ 0x28
 800626a:	4605      	mov	r5, r0
 800626c:	9b07      	ldr	r3, [sp, #28]
 800626e:	4621      	mov	r1, r4
 8006270:	3b01      	subs	r3, #1
 8006272:	4648      	mov	r0, r9
 8006274:	9300      	str	r3, [sp, #0]
 8006276:	f7ff fa98 	bl	80057aa <quorem>
 800627a:	4639      	mov	r1, r7
 800627c:	9002      	str	r0, [sp, #8]
 800627e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006282:	4648      	mov	r0, r9
 8006284:	f000 fc5a 	bl	8006b3c <__mcmp>
 8006288:	462a      	mov	r2, r5
 800628a:	9008      	str	r0, [sp, #32]
 800628c:	4621      	mov	r1, r4
 800628e:	4658      	mov	r0, fp
 8006290:	f000 fc70 	bl	8006b74 <__mdiff>
 8006294:	68c2      	ldr	r2, [r0, #12]
 8006296:	4606      	mov	r6, r0
 8006298:	bb02      	cbnz	r2, 80062dc <_dtoa_r+0xa1c>
 800629a:	4601      	mov	r1, r0
 800629c:	4648      	mov	r0, r9
 800629e:	f000 fc4d 	bl	8006b3c <__mcmp>
 80062a2:	4602      	mov	r2, r0
 80062a4:	4631      	mov	r1, r6
 80062a6:	4658      	mov	r0, fp
 80062a8:	920e      	str	r2, [sp, #56]	@ 0x38
 80062aa:	f000 fa0d 	bl	80066c8 <_Bfree>
 80062ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062b0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80062b2:	9e07      	ldr	r6, [sp, #28]
 80062b4:	ea43 0102 	orr.w	r1, r3, r2
 80062b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80062ba:	4319      	orrs	r1, r3
 80062bc:	d110      	bne.n	80062e0 <_dtoa_r+0xa20>
 80062be:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80062c2:	d029      	beq.n	8006318 <_dtoa_r+0xa58>
 80062c4:	9b08      	ldr	r3, [sp, #32]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	dd02      	ble.n	80062d0 <_dtoa_r+0xa10>
 80062ca:	9b02      	ldr	r3, [sp, #8]
 80062cc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80062d0:	9b00      	ldr	r3, [sp, #0]
 80062d2:	f883 8000 	strb.w	r8, [r3]
 80062d6:	e63f      	b.n	8005f58 <_dtoa_r+0x698>
 80062d8:	4628      	mov	r0, r5
 80062da:	e7bb      	b.n	8006254 <_dtoa_r+0x994>
 80062dc:	2201      	movs	r2, #1
 80062de:	e7e1      	b.n	80062a4 <_dtoa_r+0x9e4>
 80062e0:	9b08      	ldr	r3, [sp, #32]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	db04      	blt.n	80062f0 <_dtoa_r+0xa30>
 80062e6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80062e8:	430b      	orrs	r3, r1
 80062ea:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80062ec:	430b      	orrs	r3, r1
 80062ee:	d120      	bne.n	8006332 <_dtoa_r+0xa72>
 80062f0:	2a00      	cmp	r2, #0
 80062f2:	dded      	ble.n	80062d0 <_dtoa_r+0xa10>
 80062f4:	4649      	mov	r1, r9
 80062f6:	2201      	movs	r2, #1
 80062f8:	4658      	mov	r0, fp
 80062fa:	f000 fbb3 	bl	8006a64 <__lshift>
 80062fe:	4621      	mov	r1, r4
 8006300:	4681      	mov	r9, r0
 8006302:	f000 fc1b 	bl	8006b3c <__mcmp>
 8006306:	2800      	cmp	r0, #0
 8006308:	dc03      	bgt.n	8006312 <_dtoa_r+0xa52>
 800630a:	d1e1      	bne.n	80062d0 <_dtoa_r+0xa10>
 800630c:	f018 0f01 	tst.w	r8, #1
 8006310:	d0de      	beq.n	80062d0 <_dtoa_r+0xa10>
 8006312:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006316:	d1d8      	bne.n	80062ca <_dtoa_r+0xa0a>
 8006318:	9a00      	ldr	r2, [sp, #0]
 800631a:	2339      	movs	r3, #57	@ 0x39
 800631c:	7013      	strb	r3, [r2, #0]
 800631e:	4633      	mov	r3, r6
 8006320:	461e      	mov	r6, r3
 8006322:	3b01      	subs	r3, #1
 8006324:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006328:	2a39      	cmp	r2, #57	@ 0x39
 800632a:	d052      	beq.n	80063d2 <_dtoa_r+0xb12>
 800632c:	3201      	adds	r2, #1
 800632e:	701a      	strb	r2, [r3, #0]
 8006330:	e612      	b.n	8005f58 <_dtoa_r+0x698>
 8006332:	2a00      	cmp	r2, #0
 8006334:	dd07      	ble.n	8006346 <_dtoa_r+0xa86>
 8006336:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800633a:	d0ed      	beq.n	8006318 <_dtoa_r+0xa58>
 800633c:	9a00      	ldr	r2, [sp, #0]
 800633e:	f108 0301 	add.w	r3, r8, #1
 8006342:	7013      	strb	r3, [r2, #0]
 8006344:	e608      	b.n	8005f58 <_dtoa_r+0x698>
 8006346:	9b07      	ldr	r3, [sp, #28]
 8006348:	9a07      	ldr	r2, [sp, #28]
 800634a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800634e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006350:	4293      	cmp	r3, r2
 8006352:	d028      	beq.n	80063a6 <_dtoa_r+0xae6>
 8006354:	4649      	mov	r1, r9
 8006356:	2300      	movs	r3, #0
 8006358:	220a      	movs	r2, #10
 800635a:	4658      	mov	r0, fp
 800635c:	f000 f9d6 	bl	800670c <__multadd>
 8006360:	42af      	cmp	r7, r5
 8006362:	4681      	mov	r9, r0
 8006364:	f04f 0300 	mov.w	r3, #0
 8006368:	f04f 020a 	mov.w	r2, #10
 800636c:	4639      	mov	r1, r7
 800636e:	4658      	mov	r0, fp
 8006370:	d107      	bne.n	8006382 <_dtoa_r+0xac2>
 8006372:	f000 f9cb 	bl	800670c <__multadd>
 8006376:	4607      	mov	r7, r0
 8006378:	4605      	mov	r5, r0
 800637a:	9b07      	ldr	r3, [sp, #28]
 800637c:	3301      	adds	r3, #1
 800637e:	9307      	str	r3, [sp, #28]
 8006380:	e774      	b.n	800626c <_dtoa_r+0x9ac>
 8006382:	f000 f9c3 	bl	800670c <__multadd>
 8006386:	4629      	mov	r1, r5
 8006388:	4607      	mov	r7, r0
 800638a:	2300      	movs	r3, #0
 800638c:	220a      	movs	r2, #10
 800638e:	4658      	mov	r0, fp
 8006390:	f000 f9bc 	bl	800670c <__multadd>
 8006394:	4605      	mov	r5, r0
 8006396:	e7f0      	b.n	800637a <_dtoa_r+0xaba>
 8006398:	9b00      	ldr	r3, [sp, #0]
 800639a:	2b00      	cmp	r3, #0
 800639c:	bfcc      	ite	gt
 800639e:	461e      	movgt	r6, r3
 80063a0:	2601      	movle	r6, #1
 80063a2:	4456      	add	r6, sl
 80063a4:	2700      	movs	r7, #0
 80063a6:	4649      	mov	r1, r9
 80063a8:	2201      	movs	r2, #1
 80063aa:	4658      	mov	r0, fp
 80063ac:	f000 fb5a 	bl	8006a64 <__lshift>
 80063b0:	4621      	mov	r1, r4
 80063b2:	4681      	mov	r9, r0
 80063b4:	f000 fbc2 	bl	8006b3c <__mcmp>
 80063b8:	2800      	cmp	r0, #0
 80063ba:	dcb0      	bgt.n	800631e <_dtoa_r+0xa5e>
 80063bc:	d102      	bne.n	80063c4 <_dtoa_r+0xb04>
 80063be:	f018 0f01 	tst.w	r8, #1
 80063c2:	d1ac      	bne.n	800631e <_dtoa_r+0xa5e>
 80063c4:	4633      	mov	r3, r6
 80063c6:	461e      	mov	r6, r3
 80063c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80063cc:	2a30      	cmp	r2, #48	@ 0x30
 80063ce:	d0fa      	beq.n	80063c6 <_dtoa_r+0xb06>
 80063d0:	e5c2      	b.n	8005f58 <_dtoa_r+0x698>
 80063d2:	459a      	cmp	sl, r3
 80063d4:	d1a4      	bne.n	8006320 <_dtoa_r+0xa60>
 80063d6:	9b04      	ldr	r3, [sp, #16]
 80063d8:	3301      	adds	r3, #1
 80063da:	9304      	str	r3, [sp, #16]
 80063dc:	2331      	movs	r3, #49	@ 0x31
 80063de:	f88a 3000 	strb.w	r3, [sl]
 80063e2:	e5b9      	b.n	8005f58 <_dtoa_r+0x698>
 80063e4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80063e6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006444 <_dtoa_r+0xb84>
 80063ea:	b11b      	cbz	r3, 80063f4 <_dtoa_r+0xb34>
 80063ec:	f10a 0308 	add.w	r3, sl, #8
 80063f0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80063f2:	6013      	str	r3, [r2, #0]
 80063f4:	4650      	mov	r0, sl
 80063f6:	b019      	add	sp, #100	@ 0x64
 80063f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063fe:	2b01      	cmp	r3, #1
 8006400:	f77f ae37 	ble.w	8006072 <_dtoa_r+0x7b2>
 8006404:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006406:	930a      	str	r3, [sp, #40]	@ 0x28
 8006408:	2001      	movs	r0, #1
 800640a:	e655      	b.n	80060b8 <_dtoa_r+0x7f8>
 800640c:	9b00      	ldr	r3, [sp, #0]
 800640e:	2b00      	cmp	r3, #0
 8006410:	f77f aed6 	ble.w	80061c0 <_dtoa_r+0x900>
 8006414:	4656      	mov	r6, sl
 8006416:	4621      	mov	r1, r4
 8006418:	4648      	mov	r0, r9
 800641a:	f7ff f9c6 	bl	80057aa <quorem>
 800641e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006422:	f806 8b01 	strb.w	r8, [r6], #1
 8006426:	9b00      	ldr	r3, [sp, #0]
 8006428:	eba6 020a 	sub.w	r2, r6, sl
 800642c:	4293      	cmp	r3, r2
 800642e:	ddb3      	ble.n	8006398 <_dtoa_r+0xad8>
 8006430:	4649      	mov	r1, r9
 8006432:	2300      	movs	r3, #0
 8006434:	220a      	movs	r2, #10
 8006436:	4658      	mov	r0, fp
 8006438:	f000 f968 	bl	800670c <__multadd>
 800643c:	4681      	mov	r9, r0
 800643e:	e7ea      	b.n	8006416 <_dtoa_r+0xb56>
 8006440:	080075d0 	.word	0x080075d0
 8006444:	08007554 	.word	0x08007554

08006448 <_free_r>:
 8006448:	b538      	push	{r3, r4, r5, lr}
 800644a:	4605      	mov	r5, r0
 800644c:	2900      	cmp	r1, #0
 800644e:	d041      	beq.n	80064d4 <_free_r+0x8c>
 8006450:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006454:	1f0c      	subs	r4, r1, #4
 8006456:	2b00      	cmp	r3, #0
 8006458:	bfb8      	it	lt
 800645a:	18e4      	addlt	r4, r4, r3
 800645c:	f000 f8e8 	bl	8006630 <__malloc_lock>
 8006460:	4a1d      	ldr	r2, [pc, #116]	@ (80064d8 <_free_r+0x90>)
 8006462:	6813      	ldr	r3, [r2, #0]
 8006464:	b933      	cbnz	r3, 8006474 <_free_r+0x2c>
 8006466:	6063      	str	r3, [r4, #4]
 8006468:	6014      	str	r4, [r2, #0]
 800646a:	4628      	mov	r0, r5
 800646c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006470:	f000 b8e4 	b.w	800663c <__malloc_unlock>
 8006474:	42a3      	cmp	r3, r4
 8006476:	d908      	bls.n	800648a <_free_r+0x42>
 8006478:	6820      	ldr	r0, [r4, #0]
 800647a:	1821      	adds	r1, r4, r0
 800647c:	428b      	cmp	r3, r1
 800647e:	bf01      	itttt	eq
 8006480:	6819      	ldreq	r1, [r3, #0]
 8006482:	685b      	ldreq	r3, [r3, #4]
 8006484:	1809      	addeq	r1, r1, r0
 8006486:	6021      	streq	r1, [r4, #0]
 8006488:	e7ed      	b.n	8006466 <_free_r+0x1e>
 800648a:	461a      	mov	r2, r3
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	b10b      	cbz	r3, 8006494 <_free_r+0x4c>
 8006490:	42a3      	cmp	r3, r4
 8006492:	d9fa      	bls.n	800648a <_free_r+0x42>
 8006494:	6811      	ldr	r1, [r2, #0]
 8006496:	1850      	adds	r0, r2, r1
 8006498:	42a0      	cmp	r0, r4
 800649a:	d10b      	bne.n	80064b4 <_free_r+0x6c>
 800649c:	6820      	ldr	r0, [r4, #0]
 800649e:	4401      	add	r1, r0
 80064a0:	1850      	adds	r0, r2, r1
 80064a2:	4283      	cmp	r3, r0
 80064a4:	6011      	str	r1, [r2, #0]
 80064a6:	d1e0      	bne.n	800646a <_free_r+0x22>
 80064a8:	6818      	ldr	r0, [r3, #0]
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	6053      	str	r3, [r2, #4]
 80064ae:	4408      	add	r0, r1
 80064b0:	6010      	str	r0, [r2, #0]
 80064b2:	e7da      	b.n	800646a <_free_r+0x22>
 80064b4:	d902      	bls.n	80064bc <_free_r+0x74>
 80064b6:	230c      	movs	r3, #12
 80064b8:	602b      	str	r3, [r5, #0]
 80064ba:	e7d6      	b.n	800646a <_free_r+0x22>
 80064bc:	6820      	ldr	r0, [r4, #0]
 80064be:	1821      	adds	r1, r4, r0
 80064c0:	428b      	cmp	r3, r1
 80064c2:	bf04      	itt	eq
 80064c4:	6819      	ldreq	r1, [r3, #0]
 80064c6:	685b      	ldreq	r3, [r3, #4]
 80064c8:	6063      	str	r3, [r4, #4]
 80064ca:	bf04      	itt	eq
 80064cc:	1809      	addeq	r1, r1, r0
 80064ce:	6021      	streq	r1, [r4, #0]
 80064d0:	6054      	str	r4, [r2, #4]
 80064d2:	e7ca      	b.n	800646a <_free_r+0x22>
 80064d4:	bd38      	pop	{r3, r4, r5, pc}
 80064d6:	bf00      	nop
 80064d8:	20000488 	.word	0x20000488

080064dc <malloc>:
 80064dc:	4b02      	ldr	r3, [pc, #8]	@ (80064e8 <malloc+0xc>)
 80064de:	4601      	mov	r1, r0
 80064e0:	6818      	ldr	r0, [r3, #0]
 80064e2:	f000 b825 	b.w	8006530 <_malloc_r>
 80064e6:	bf00      	nop
 80064e8:	20000018 	.word	0x20000018

080064ec <sbrk_aligned>:
 80064ec:	b570      	push	{r4, r5, r6, lr}
 80064ee:	4e0f      	ldr	r6, [pc, #60]	@ (800652c <sbrk_aligned+0x40>)
 80064f0:	460c      	mov	r4, r1
 80064f2:	6831      	ldr	r1, [r6, #0]
 80064f4:	4605      	mov	r5, r0
 80064f6:	b911      	cbnz	r1, 80064fe <sbrk_aligned+0x12>
 80064f8:	f000 fcd4 	bl	8006ea4 <_sbrk_r>
 80064fc:	6030      	str	r0, [r6, #0]
 80064fe:	4621      	mov	r1, r4
 8006500:	4628      	mov	r0, r5
 8006502:	f000 fccf 	bl	8006ea4 <_sbrk_r>
 8006506:	1c43      	adds	r3, r0, #1
 8006508:	d103      	bne.n	8006512 <sbrk_aligned+0x26>
 800650a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800650e:	4620      	mov	r0, r4
 8006510:	bd70      	pop	{r4, r5, r6, pc}
 8006512:	1cc4      	adds	r4, r0, #3
 8006514:	f024 0403 	bic.w	r4, r4, #3
 8006518:	42a0      	cmp	r0, r4
 800651a:	d0f8      	beq.n	800650e <sbrk_aligned+0x22>
 800651c:	1a21      	subs	r1, r4, r0
 800651e:	4628      	mov	r0, r5
 8006520:	f000 fcc0 	bl	8006ea4 <_sbrk_r>
 8006524:	3001      	adds	r0, #1
 8006526:	d1f2      	bne.n	800650e <sbrk_aligned+0x22>
 8006528:	e7ef      	b.n	800650a <sbrk_aligned+0x1e>
 800652a:	bf00      	nop
 800652c:	20000484 	.word	0x20000484

08006530 <_malloc_r>:
 8006530:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006534:	1ccd      	adds	r5, r1, #3
 8006536:	f025 0503 	bic.w	r5, r5, #3
 800653a:	3508      	adds	r5, #8
 800653c:	2d0c      	cmp	r5, #12
 800653e:	bf38      	it	cc
 8006540:	250c      	movcc	r5, #12
 8006542:	2d00      	cmp	r5, #0
 8006544:	4606      	mov	r6, r0
 8006546:	db01      	blt.n	800654c <_malloc_r+0x1c>
 8006548:	42a9      	cmp	r1, r5
 800654a:	d904      	bls.n	8006556 <_malloc_r+0x26>
 800654c:	230c      	movs	r3, #12
 800654e:	6033      	str	r3, [r6, #0]
 8006550:	2000      	movs	r0, #0
 8006552:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006556:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800662c <_malloc_r+0xfc>
 800655a:	f000 f869 	bl	8006630 <__malloc_lock>
 800655e:	f8d8 3000 	ldr.w	r3, [r8]
 8006562:	461c      	mov	r4, r3
 8006564:	bb44      	cbnz	r4, 80065b8 <_malloc_r+0x88>
 8006566:	4629      	mov	r1, r5
 8006568:	4630      	mov	r0, r6
 800656a:	f7ff ffbf 	bl	80064ec <sbrk_aligned>
 800656e:	1c43      	adds	r3, r0, #1
 8006570:	4604      	mov	r4, r0
 8006572:	d158      	bne.n	8006626 <_malloc_r+0xf6>
 8006574:	f8d8 4000 	ldr.w	r4, [r8]
 8006578:	4627      	mov	r7, r4
 800657a:	2f00      	cmp	r7, #0
 800657c:	d143      	bne.n	8006606 <_malloc_r+0xd6>
 800657e:	2c00      	cmp	r4, #0
 8006580:	d04b      	beq.n	800661a <_malloc_r+0xea>
 8006582:	6823      	ldr	r3, [r4, #0]
 8006584:	4639      	mov	r1, r7
 8006586:	4630      	mov	r0, r6
 8006588:	eb04 0903 	add.w	r9, r4, r3
 800658c:	f000 fc8a 	bl	8006ea4 <_sbrk_r>
 8006590:	4581      	cmp	r9, r0
 8006592:	d142      	bne.n	800661a <_malloc_r+0xea>
 8006594:	6821      	ldr	r1, [r4, #0]
 8006596:	1a6d      	subs	r5, r5, r1
 8006598:	4629      	mov	r1, r5
 800659a:	4630      	mov	r0, r6
 800659c:	f7ff ffa6 	bl	80064ec <sbrk_aligned>
 80065a0:	3001      	adds	r0, #1
 80065a2:	d03a      	beq.n	800661a <_malloc_r+0xea>
 80065a4:	6823      	ldr	r3, [r4, #0]
 80065a6:	442b      	add	r3, r5
 80065a8:	6023      	str	r3, [r4, #0]
 80065aa:	f8d8 3000 	ldr.w	r3, [r8]
 80065ae:	685a      	ldr	r2, [r3, #4]
 80065b0:	bb62      	cbnz	r2, 800660c <_malloc_r+0xdc>
 80065b2:	f8c8 7000 	str.w	r7, [r8]
 80065b6:	e00f      	b.n	80065d8 <_malloc_r+0xa8>
 80065b8:	6822      	ldr	r2, [r4, #0]
 80065ba:	1b52      	subs	r2, r2, r5
 80065bc:	d420      	bmi.n	8006600 <_malloc_r+0xd0>
 80065be:	2a0b      	cmp	r2, #11
 80065c0:	d917      	bls.n	80065f2 <_malloc_r+0xc2>
 80065c2:	1961      	adds	r1, r4, r5
 80065c4:	42a3      	cmp	r3, r4
 80065c6:	6025      	str	r5, [r4, #0]
 80065c8:	bf18      	it	ne
 80065ca:	6059      	strne	r1, [r3, #4]
 80065cc:	6863      	ldr	r3, [r4, #4]
 80065ce:	bf08      	it	eq
 80065d0:	f8c8 1000 	streq.w	r1, [r8]
 80065d4:	5162      	str	r2, [r4, r5]
 80065d6:	604b      	str	r3, [r1, #4]
 80065d8:	4630      	mov	r0, r6
 80065da:	f000 f82f 	bl	800663c <__malloc_unlock>
 80065de:	f104 000b 	add.w	r0, r4, #11
 80065e2:	1d23      	adds	r3, r4, #4
 80065e4:	f020 0007 	bic.w	r0, r0, #7
 80065e8:	1ac2      	subs	r2, r0, r3
 80065ea:	bf1c      	itt	ne
 80065ec:	1a1b      	subne	r3, r3, r0
 80065ee:	50a3      	strne	r3, [r4, r2]
 80065f0:	e7af      	b.n	8006552 <_malloc_r+0x22>
 80065f2:	6862      	ldr	r2, [r4, #4]
 80065f4:	42a3      	cmp	r3, r4
 80065f6:	bf0c      	ite	eq
 80065f8:	f8c8 2000 	streq.w	r2, [r8]
 80065fc:	605a      	strne	r2, [r3, #4]
 80065fe:	e7eb      	b.n	80065d8 <_malloc_r+0xa8>
 8006600:	4623      	mov	r3, r4
 8006602:	6864      	ldr	r4, [r4, #4]
 8006604:	e7ae      	b.n	8006564 <_malloc_r+0x34>
 8006606:	463c      	mov	r4, r7
 8006608:	687f      	ldr	r7, [r7, #4]
 800660a:	e7b6      	b.n	800657a <_malloc_r+0x4a>
 800660c:	461a      	mov	r2, r3
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	42a3      	cmp	r3, r4
 8006612:	d1fb      	bne.n	800660c <_malloc_r+0xdc>
 8006614:	2300      	movs	r3, #0
 8006616:	6053      	str	r3, [r2, #4]
 8006618:	e7de      	b.n	80065d8 <_malloc_r+0xa8>
 800661a:	230c      	movs	r3, #12
 800661c:	6033      	str	r3, [r6, #0]
 800661e:	4630      	mov	r0, r6
 8006620:	f000 f80c 	bl	800663c <__malloc_unlock>
 8006624:	e794      	b.n	8006550 <_malloc_r+0x20>
 8006626:	6005      	str	r5, [r0, #0]
 8006628:	e7d6      	b.n	80065d8 <_malloc_r+0xa8>
 800662a:	bf00      	nop
 800662c:	20000488 	.word	0x20000488

08006630 <__malloc_lock>:
 8006630:	4801      	ldr	r0, [pc, #4]	@ (8006638 <__malloc_lock+0x8>)
 8006632:	f7ff b8b8 	b.w	80057a6 <__retarget_lock_acquire_recursive>
 8006636:	bf00      	nop
 8006638:	20000480 	.word	0x20000480

0800663c <__malloc_unlock>:
 800663c:	4801      	ldr	r0, [pc, #4]	@ (8006644 <__malloc_unlock+0x8>)
 800663e:	f7ff b8b3 	b.w	80057a8 <__retarget_lock_release_recursive>
 8006642:	bf00      	nop
 8006644:	20000480 	.word	0x20000480

08006648 <_Balloc>:
 8006648:	b570      	push	{r4, r5, r6, lr}
 800664a:	69c6      	ldr	r6, [r0, #28]
 800664c:	4604      	mov	r4, r0
 800664e:	460d      	mov	r5, r1
 8006650:	b976      	cbnz	r6, 8006670 <_Balloc+0x28>
 8006652:	2010      	movs	r0, #16
 8006654:	f7ff ff42 	bl	80064dc <malloc>
 8006658:	4602      	mov	r2, r0
 800665a:	61e0      	str	r0, [r4, #28]
 800665c:	b920      	cbnz	r0, 8006668 <_Balloc+0x20>
 800665e:	4b18      	ldr	r3, [pc, #96]	@ (80066c0 <_Balloc+0x78>)
 8006660:	4818      	ldr	r0, [pc, #96]	@ (80066c4 <_Balloc+0x7c>)
 8006662:	216b      	movs	r1, #107	@ 0x6b
 8006664:	f000 fc3c 	bl	8006ee0 <__assert_func>
 8006668:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800666c:	6006      	str	r6, [r0, #0]
 800666e:	60c6      	str	r6, [r0, #12]
 8006670:	69e6      	ldr	r6, [r4, #28]
 8006672:	68f3      	ldr	r3, [r6, #12]
 8006674:	b183      	cbz	r3, 8006698 <_Balloc+0x50>
 8006676:	69e3      	ldr	r3, [r4, #28]
 8006678:	68db      	ldr	r3, [r3, #12]
 800667a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800667e:	b9b8      	cbnz	r0, 80066b0 <_Balloc+0x68>
 8006680:	2101      	movs	r1, #1
 8006682:	fa01 f605 	lsl.w	r6, r1, r5
 8006686:	1d72      	adds	r2, r6, #5
 8006688:	0092      	lsls	r2, r2, #2
 800668a:	4620      	mov	r0, r4
 800668c:	f000 fc46 	bl	8006f1c <_calloc_r>
 8006690:	b160      	cbz	r0, 80066ac <_Balloc+0x64>
 8006692:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006696:	e00e      	b.n	80066b6 <_Balloc+0x6e>
 8006698:	2221      	movs	r2, #33	@ 0x21
 800669a:	2104      	movs	r1, #4
 800669c:	4620      	mov	r0, r4
 800669e:	f000 fc3d 	bl	8006f1c <_calloc_r>
 80066a2:	69e3      	ldr	r3, [r4, #28]
 80066a4:	60f0      	str	r0, [r6, #12]
 80066a6:	68db      	ldr	r3, [r3, #12]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d1e4      	bne.n	8006676 <_Balloc+0x2e>
 80066ac:	2000      	movs	r0, #0
 80066ae:	bd70      	pop	{r4, r5, r6, pc}
 80066b0:	6802      	ldr	r2, [r0, #0]
 80066b2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80066b6:	2300      	movs	r3, #0
 80066b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80066bc:	e7f7      	b.n	80066ae <_Balloc+0x66>
 80066be:	bf00      	nop
 80066c0:	08007561 	.word	0x08007561
 80066c4:	080075e1 	.word	0x080075e1

080066c8 <_Bfree>:
 80066c8:	b570      	push	{r4, r5, r6, lr}
 80066ca:	69c6      	ldr	r6, [r0, #28]
 80066cc:	4605      	mov	r5, r0
 80066ce:	460c      	mov	r4, r1
 80066d0:	b976      	cbnz	r6, 80066f0 <_Bfree+0x28>
 80066d2:	2010      	movs	r0, #16
 80066d4:	f7ff ff02 	bl	80064dc <malloc>
 80066d8:	4602      	mov	r2, r0
 80066da:	61e8      	str	r0, [r5, #28]
 80066dc:	b920      	cbnz	r0, 80066e8 <_Bfree+0x20>
 80066de:	4b09      	ldr	r3, [pc, #36]	@ (8006704 <_Bfree+0x3c>)
 80066e0:	4809      	ldr	r0, [pc, #36]	@ (8006708 <_Bfree+0x40>)
 80066e2:	218f      	movs	r1, #143	@ 0x8f
 80066e4:	f000 fbfc 	bl	8006ee0 <__assert_func>
 80066e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80066ec:	6006      	str	r6, [r0, #0]
 80066ee:	60c6      	str	r6, [r0, #12]
 80066f0:	b13c      	cbz	r4, 8006702 <_Bfree+0x3a>
 80066f2:	69eb      	ldr	r3, [r5, #28]
 80066f4:	6862      	ldr	r2, [r4, #4]
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80066fc:	6021      	str	r1, [r4, #0]
 80066fe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006702:	bd70      	pop	{r4, r5, r6, pc}
 8006704:	08007561 	.word	0x08007561
 8006708:	080075e1 	.word	0x080075e1

0800670c <__multadd>:
 800670c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006710:	690d      	ldr	r5, [r1, #16]
 8006712:	4607      	mov	r7, r0
 8006714:	460c      	mov	r4, r1
 8006716:	461e      	mov	r6, r3
 8006718:	f101 0c14 	add.w	ip, r1, #20
 800671c:	2000      	movs	r0, #0
 800671e:	f8dc 3000 	ldr.w	r3, [ip]
 8006722:	b299      	uxth	r1, r3
 8006724:	fb02 6101 	mla	r1, r2, r1, r6
 8006728:	0c1e      	lsrs	r6, r3, #16
 800672a:	0c0b      	lsrs	r3, r1, #16
 800672c:	fb02 3306 	mla	r3, r2, r6, r3
 8006730:	b289      	uxth	r1, r1
 8006732:	3001      	adds	r0, #1
 8006734:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006738:	4285      	cmp	r5, r0
 800673a:	f84c 1b04 	str.w	r1, [ip], #4
 800673e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006742:	dcec      	bgt.n	800671e <__multadd+0x12>
 8006744:	b30e      	cbz	r6, 800678a <__multadd+0x7e>
 8006746:	68a3      	ldr	r3, [r4, #8]
 8006748:	42ab      	cmp	r3, r5
 800674a:	dc19      	bgt.n	8006780 <__multadd+0x74>
 800674c:	6861      	ldr	r1, [r4, #4]
 800674e:	4638      	mov	r0, r7
 8006750:	3101      	adds	r1, #1
 8006752:	f7ff ff79 	bl	8006648 <_Balloc>
 8006756:	4680      	mov	r8, r0
 8006758:	b928      	cbnz	r0, 8006766 <__multadd+0x5a>
 800675a:	4602      	mov	r2, r0
 800675c:	4b0c      	ldr	r3, [pc, #48]	@ (8006790 <__multadd+0x84>)
 800675e:	480d      	ldr	r0, [pc, #52]	@ (8006794 <__multadd+0x88>)
 8006760:	21ba      	movs	r1, #186	@ 0xba
 8006762:	f000 fbbd 	bl	8006ee0 <__assert_func>
 8006766:	6922      	ldr	r2, [r4, #16]
 8006768:	3202      	adds	r2, #2
 800676a:	f104 010c 	add.w	r1, r4, #12
 800676e:	0092      	lsls	r2, r2, #2
 8006770:	300c      	adds	r0, #12
 8006772:	f000 fba7 	bl	8006ec4 <memcpy>
 8006776:	4621      	mov	r1, r4
 8006778:	4638      	mov	r0, r7
 800677a:	f7ff ffa5 	bl	80066c8 <_Bfree>
 800677e:	4644      	mov	r4, r8
 8006780:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006784:	3501      	adds	r5, #1
 8006786:	615e      	str	r6, [r3, #20]
 8006788:	6125      	str	r5, [r4, #16]
 800678a:	4620      	mov	r0, r4
 800678c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006790:	080075d0 	.word	0x080075d0
 8006794:	080075e1 	.word	0x080075e1

08006798 <__hi0bits>:
 8006798:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800679c:	4603      	mov	r3, r0
 800679e:	bf36      	itet	cc
 80067a0:	0403      	lslcc	r3, r0, #16
 80067a2:	2000      	movcs	r0, #0
 80067a4:	2010      	movcc	r0, #16
 80067a6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80067aa:	bf3c      	itt	cc
 80067ac:	021b      	lslcc	r3, r3, #8
 80067ae:	3008      	addcc	r0, #8
 80067b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80067b4:	bf3c      	itt	cc
 80067b6:	011b      	lslcc	r3, r3, #4
 80067b8:	3004      	addcc	r0, #4
 80067ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067be:	bf3c      	itt	cc
 80067c0:	009b      	lslcc	r3, r3, #2
 80067c2:	3002      	addcc	r0, #2
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	db05      	blt.n	80067d4 <__hi0bits+0x3c>
 80067c8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80067cc:	f100 0001 	add.w	r0, r0, #1
 80067d0:	bf08      	it	eq
 80067d2:	2020      	moveq	r0, #32
 80067d4:	4770      	bx	lr

080067d6 <__lo0bits>:
 80067d6:	6803      	ldr	r3, [r0, #0]
 80067d8:	4602      	mov	r2, r0
 80067da:	f013 0007 	ands.w	r0, r3, #7
 80067de:	d00b      	beq.n	80067f8 <__lo0bits+0x22>
 80067e0:	07d9      	lsls	r1, r3, #31
 80067e2:	d421      	bmi.n	8006828 <__lo0bits+0x52>
 80067e4:	0798      	lsls	r0, r3, #30
 80067e6:	bf49      	itett	mi
 80067e8:	085b      	lsrmi	r3, r3, #1
 80067ea:	089b      	lsrpl	r3, r3, #2
 80067ec:	2001      	movmi	r0, #1
 80067ee:	6013      	strmi	r3, [r2, #0]
 80067f0:	bf5c      	itt	pl
 80067f2:	6013      	strpl	r3, [r2, #0]
 80067f4:	2002      	movpl	r0, #2
 80067f6:	4770      	bx	lr
 80067f8:	b299      	uxth	r1, r3
 80067fa:	b909      	cbnz	r1, 8006800 <__lo0bits+0x2a>
 80067fc:	0c1b      	lsrs	r3, r3, #16
 80067fe:	2010      	movs	r0, #16
 8006800:	b2d9      	uxtb	r1, r3
 8006802:	b909      	cbnz	r1, 8006808 <__lo0bits+0x32>
 8006804:	3008      	adds	r0, #8
 8006806:	0a1b      	lsrs	r3, r3, #8
 8006808:	0719      	lsls	r1, r3, #28
 800680a:	bf04      	itt	eq
 800680c:	091b      	lsreq	r3, r3, #4
 800680e:	3004      	addeq	r0, #4
 8006810:	0799      	lsls	r1, r3, #30
 8006812:	bf04      	itt	eq
 8006814:	089b      	lsreq	r3, r3, #2
 8006816:	3002      	addeq	r0, #2
 8006818:	07d9      	lsls	r1, r3, #31
 800681a:	d403      	bmi.n	8006824 <__lo0bits+0x4e>
 800681c:	085b      	lsrs	r3, r3, #1
 800681e:	f100 0001 	add.w	r0, r0, #1
 8006822:	d003      	beq.n	800682c <__lo0bits+0x56>
 8006824:	6013      	str	r3, [r2, #0]
 8006826:	4770      	bx	lr
 8006828:	2000      	movs	r0, #0
 800682a:	4770      	bx	lr
 800682c:	2020      	movs	r0, #32
 800682e:	4770      	bx	lr

08006830 <__i2b>:
 8006830:	b510      	push	{r4, lr}
 8006832:	460c      	mov	r4, r1
 8006834:	2101      	movs	r1, #1
 8006836:	f7ff ff07 	bl	8006648 <_Balloc>
 800683a:	4602      	mov	r2, r0
 800683c:	b928      	cbnz	r0, 800684a <__i2b+0x1a>
 800683e:	4b05      	ldr	r3, [pc, #20]	@ (8006854 <__i2b+0x24>)
 8006840:	4805      	ldr	r0, [pc, #20]	@ (8006858 <__i2b+0x28>)
 8006842:	f240 1145 	movw	r1, #325	@ 0x145
 8006846:	f000 fb4b 	bl	8006ee0 <__assert_func>
 800684a:	2301      	movs	r3, #1
 800684c:	6144      	str	r4, [r0, #20]
 800684e:	6103      	str	r3, [r0, #16]
 8006850:	bd10      	pop	{r4, pc}
 8006852:	bf00      	nop
 8006854:	080075d0 	.word	0x080075d0
 8006858:	080075e1 	.word	0x080075e1

0800685c <__multiply>:
 800685c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006860:	4614      	mov	r4, r2
 8006862:	690a      	ldr	r2, [r1, #16]
 8006864:	6923      	ldr	r3, [r4, #16]
 8006866:	429a      	cmp	r2, r3
 8006868:	bfa8      	it	ge
 800686a:	4623      	movge	r3, r4
 800686c:	460f      	mov	r7, r1
 800686e:	bfa4      	itt	ge
 8006870:	460c      	movge	r4, r1
 8006872:	461f      	movge	r7, r3
 8006874:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006878:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800687c:	68a3      	ldr	r3, [r4, #8]
 800687e:	6861      	ldr	r1, [r4, #4]
 8006880:	eb0a 0609 	add.w	r6, sl, r9
 8006884:	42b3      	cmp	r3, r6
 8006886:	b085      	sub	sp, #20
 8006888:	bfb8      	it	lt
 800688a:	3101      	addlt	r1, #1
 800688c:	f7ff fedc 	bl	8006648 <_Balloc>
 8006890:	b930      	cbnz	r0, 80068a0 <__multiply+0x44>
 8006892:	4602      	mov	r2, r0
 8006894:	4b44      	ldr	r3, [pc, #272]	@ (80069a8 <__multiply+0x14c>)
 8006896:	4845      	ldr	r0, [pc, #276]	@ (80069ac <__multiply+0x150>)
 8006898:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800689c:	f000 fb20 	bl	8006ee0 <__assert_func>
 80068a0:	f100 0514 	add.w	r5, r0, #20
 80068a4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80068a8:	462b      	mov	r3, r5
 80068aa:	2200      	movs	r2, #0
 80068ac:	4543      	cmp	r3, r8
 80068ae:	d321      	bcc.n	80068f4 <__multiply+0x98>
 80068b0:	f107 0114 	add.w	r1, r7, #20
 80068b4:	f104 0214 	add.w	r2, r4, #20
 80068b8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80068bc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80068c0:	9302      	str	r3, [sp, #8]
 80068c2:	1b13      	subs	r3, r2, r4
 80068c4:	3b15      	subs	r3, #21
 80068c6:	f023 0303 	bic.w	r3, r3, #3
 80068ca:	3304      	adds	r3, #4
 80068cc:	f104 0715 	add.w	r7, r4, #21
 80068d0:	42ba      	cmp	r2, r7
 80068d2:	bf38      	it	cc
 80068d4:	2304      	movcc	r3, #4
 80068d6:	9301      	str	r3, [sp, #4]
 80068d8:	9b02      	ldr	r3, [sp, #8]
 80068da:	9103      	str	r1, [sp, #12]
 80068dc:	428b      	cmp	r3, r1
 80068de:	d80c      	bhi.n	80068fa <__multiply+0x9e>
 80068e0:	2e00      	cmp	r6, #0
 80068e2:	dd03      	ble.n	80068ec <__multiply+0x90>
 80068e4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d05b      	beq.n	80069a4 <__multiply+0x148>
 80068ec:	6106      	str	r6, [r0, #16]
 80068ee:	b005      	add	sp, #20
 80068f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068f4:	f843 2b04 	str.w	r2, [r3], #4
 80068f8:	e7d8      	b.n	80068ac <__multiply+0x50>
 80068fa:	f8b1 a000 	ldrh.w	sl, [r1]
 80068fe:	f1ba 0f00 	cmp.w	sl, #0
 8006902:	d024      	beq.n	800694e <__multiply+0xf2>
 8006904:	f104 0e14 	add.w	lr, r4, #20
 8006908:	46a9      	mov	r9, r5
 800690a:	f04f 0c00 	mov.w	ip, #0
 800690e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006912:	f8d9 3000 	ldr.w	r3, [r9]
 8006916:	fa1f fb87 	uxth.w	fp, r7
 800691a:	b29b      	uxth	r3, r3
 800691c:	fb0a 330b 	mla	r3, sl, fp, r3
 8006920:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8006924:	f8d9 7000 	ldr.w	r7, [r9]
 8006928:	4463      	add	r3, ip
 800692a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800692e:	fb0a c70b 	mla	r7, sl, fp, ip
 8006932:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006936:	b29b      	uxth	r3, r3
 8006938:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800693c:	4572      	cmp	r2, lr
 800693e:	f849 3b04 	str.w	r3, [r9], #4
 8006942:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006946:	d8e2      	bhi.n	800690e <__multiply+0xb2>
 8006948:	9b01      	ldr	r3, [sp, #4]
 800694a:	f845 c003 	str.w	ip, [r5, r3]
 800694e:	9b03      	ldr	r3, [sp, #12]
 8006950:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006954:	3104      	adds	r1, #4
 8006956:	f1b9 0f00 	cmp.w	r9, #0
 800695a:	d021      	beq.n	80069a0 <__multiply+0x144>
 800695c:	682b      	ldr	r3, [r5, #0]
 800695e:	f104 0c14 	add.w	ip, r4, #20
 8006962:	46ae      	mov	lr, r5
 8006964:	f04f 0a00 	mov.w	sl, #0
 8006968:	f8bc b000 	ldrh.w	fp, [ip]
 800696c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006970:	fb09 770b 	mla	r7, r9, fp, r7
 8006974:	4457      	add	r7, sl
 8006976:	b29b      	uxth	r3, r3
 8006978:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800697c:	f84e 3b04 	str.w	r3, [lr], #4
 8006980:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006984:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006988:	f8be 3000 	ldrh.w	r3, [lr]
 800698c:	fb09 330a 	mla	r3, r9, sl, r3
 8006990:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006994:	4562      	cmp	r2, ip
 8006996:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800699a:	d8e5      	bhi.n	8006968 <__multiply+0x10c>
 800699c:	9f01      	ldr	r7, [sp, #4]
 800699e:	51eb      	str	r3, [r5, r7]
 80069a0:	3504      	adds	r5, #4
 80069a2:	e799      	b.n	80068d8 <__multiply+0x7c>
 80069a4:	3e01      	subs	r6, #1
 80069a6:	e79b      	b.n	80068e0 <__multiply+0x84>
 80069a8:	080075d0 	.word	0x080075d0
 80069ac:	080075e1 	.word	0x080075e1

080069b0 <__pow5mult>:
 80069b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069b4:	4615      	mov	r5, r2
 80069b6:	f012 0203 	ands.w	r2, r2, #3
 80069ba:	4607      	mov	r7, r0
 80069bc:	460e      	mov	r6, r1
 80069be:	d007      	beq.n	80069d0 <__pow5mult+0x20>
 80069c0:	4c25      	ldr	r4, [pc, #148]	@ (8006a58 <__pow5mult+0xa8>)
 80069c2:	3a01      	subs	r2, #1
 80069c4:	2300      	movs	r3, #0
 80069c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80069ca:	f7ff fe9f 	bl	800670c <__multadd>
 80069ce:	4606      	mov	r6, r0
 80069d0:	10ad      	asrs	r5, r5, #2
 80069d2:	d03d      	beq.n	8006a50 <__pow5mult+0xa0>
 80069d4:	69fc      	ldr	r4, [r7, #28]
 80069d6:	b97c      	cbnz	r4, 80069f8 <__pow5mult+0x48>
 80069d8:	2010      	movs	r0, #16
 80069da:	f7ff fd7f 	bl	80064dc <malloc>
 80069de:	4602      	mov	r2, r0
 80069e0:	61f8      	str	r0, [r7, #28]
 80069e2:	b928      	cbnz	r0, 80069f0 <__pow5mult+0x40>
 80069e4:	4b1d      	ldr	r3, [pc, #116]	@ (8006a5c <__pow5mult+0xac>)
 80069e6:	481e      	ldr	r0, [pc, #120]	@ (8006a60 <__pow5mult+0xb0>)
 80069e8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80069ec:	f000 fa78 	bl	8006ee0 <__assert_func>
 80069f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80069f4:	6004      	str	r4, [r0, #0]
 80069f6:	60c4      	str	r4, [r0, #12]
 80069f8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80069fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006a00:	b94c      	cbnz	r4, 8006a16 <__pow5mult+0x66>
 8006a02:	f240 2171 	movw	r1, #625	@ 0x271
 8006a06:	4638      	mov	r0, r7
 8006a08:	f7ff ff12 	bl	8006830 <__i2b>
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006a12:	4604      	mov	r4, r0
 8006a14:	6003      	str	r3, [r0, #0]
 8006a16:	f04f 0900 	mov.w	r9, #0
 8006a1a:	07eb      	lsls	r3, r5, #31
 8006a1c:	d50a      	bpl.n	8006a34 <__pow5mult+0x84>
 8006a1e:	4631      	mov	r1, r6
 8006a20:	4622      	mov	r2, r4
 8006a22:	4638      	mov	r0, r7
 8006a24:	f7ff ff1a 	bl	800685c <__multiply>
 8006a28:	4631      	mov	r1, r6
 8006a2a:	4680      	mov	r8, r0
 8006a2c:	4638      	mov	r0, r7
 8006a2e:	f7ff fe4b 	bl	80066c8 <_Bfree>
 8006a32:	4646      	mov	r6, r8
 8006a34:	106d      	asrs	r5, r5, #1
 8006a36:	d00b      	beq.n	8006a50 <__pow5mult+0xa0>
 8006a38:	6820      	ldr	r0, [r4, #0]
 8006a3a:	b938      	cbnz	r0, 8006a4c <__pow5mult+0x9c>
 8006a3c:	4622      	mov	r2, r4
 8006a3e:	4621      	mov	r1, r4
 8006a40:	4638      	mov	r0, r7
 8006a42:	f7ff ff0b 	bl	800685c <__multiply>
 8006a46:	6020      	str	r0, [r4, #0]
 8006a48:	f8c0 9000 	str.w	r9, [r0]
 8006a4c:	4604      	mov	r4, r0
 8006a4e:	e7e4      	b.n	8006a1a <__pow5mult+0x6a>
 8006a50:	4630      	mov	r0, r6
 8006a52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a56:	bf00      	nop
 8006a58:	0800763c 	.word	0x0800763c
 8006a5c:	08007561 	.word	0x08007561
 8006a60:	080075e1 	.word	0x080075e1

08006a64 <__lshift>:
 8006a64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a68:	460c      	mov	r4, r1
 8006a6a:	6849      	ldr	r1, [r1, #4]
 8006a6c:	6923      	ldr	r3, [r4, #16]
 8006a6e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006a72:	68a3      	ldr	r3, [r4, #8]
 8006a74:	4607      	mov	r7, r0
 8006a76:	4691      	mov	r9, r2
 8006a78:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006a7c:	f108 0601 	add.w	r6, r8, #1
 8006a80:	42b3      	cmp	r3, r6
 8006a82:	db0b      	blt.n	8006a9c <__lshift+0x38>
 8006a84:	4638      	mov	r0, r7
 8006a86:	f7ff fddf 	bl	8006648 <_Balloc>
 8006a8a:	4605      	mov	r5, r0
 8006a8c:	b948      	cbnz	r0, 8006aa2 <__lshift+0x3e>
 8006a8e:	4602      	mov	r2, r0
 8006a90:	4b28      	ldr	r3, [pc, #160]	@ (8006b34 <__lshift+0xd0>)
 8006a92:	4829      	ldr	r0, [pc, #164]	@ (8006b38 <__lshift+0xd4>)
 8006a94:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006a98:	f000 fa22 	bl	8006ee0 <__assert_func>
 8006a9c:	3101      	adds	r1, #1
 8006a9e:	005b      	lsls	r3, r3, #1
 8006aa0:	e7ee      	b.n	8006a80 <__lshift+0x1c>
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	f100 0114 	add.w	r1, r0, #20
 8006aa8:	f100 0210 	add.w	r2, r0, #16
 8006aac:	4618      	mov	r0, r3
 8006aae:	4553      	cmp	r3, sl
 8006ab0:	db33      	blt.n	8006b1a <__lshift+0xb6>
 8006ab2:	6920      	ldr	r0, [r4, #16]
 8006ab4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006ab8:	f104 0314 	add.w	r3, r4, #20
 8006abc:	f019 091f 	ands.w	r9, r9, #31
 8006ac0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006ac4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006ac8:	d02b      	beq.n	8006b22 <__lshift+0xbe>
 8006aca:	f1c9 0e20 	rsb	lr, r9, #32
 8006ace:	468a      	mov	sl, r1
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	6818      	ldr	r0, [r3, #0]
 8006ad4:	fa00 f009 	lsl.w	r0, r0, r9
 8006ad8:	4310      	orrs	r0, r2
 8006ada:	f84a 0b04 	str.w	r0, [sl], #4
 8006ade:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ae2:	459c      	cmp	ip, r3
 8006ae4:	fa22 f20e 	lsr.w	r2, r2, lr
 8006ae8:	d8f3      	bhi.n	8006ad2 <__lshift+0x6e>
 8006aea:	ebac 0304 	sub.w	r3, ip, r4
 8006aee:	3b15      	subs	r3, #21
 8006af0:	f023 0303 	bic.w	r3, r3, #3
 8006af4:	3304      	adds	r3, #4
 8006af6:	f104 0015 	add.w	r0, r4, #21
 8006afa:	4584      	cmp	ip, r0
 8006afc:	bf38      	it	cc
 8006afe:	2304      	movcc	r3, #4
 8006b00:	50ca      	str	r2, [r1, r3]
 8006b02:	b10a      	cbz	r2, 8006b08 <__lshift+0xa4>
 8006b04:	f108 0602 	add.w	r6, r8, #2
 8006b08:	3e01      	subs	r6, #1
 8006b0a:	4638      	mov	r0, r7
 8006b0c:	612e      	str	r6, [r5, #16]
 8006b0e:	4621      	mov	r1, r4
 8006b10:	f7ff fdda 	bl	80066c8 <_Bfree>
 8006b14:	4628      	mov	r0, r5
 8006b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b1a:	f842 0f04 	str.w	r0, [r2, #4]!
 8006b1e:	3301      	adds	r3, #1
 8006b20:	e7c5      	b.n	8006aae <__lshift+0x4a>
 8006b22:	3904      	subs	r1, #4
 8006b24:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b28:	f841 2f04 	str.w	r2, [r1, #4]!
 8006b2c:	459c      	cmp	ip, r3
 8006b2e:	d8f9      	bhi.n	8006b24 <__lshift+0xc0>
 8006b30:	e7ea      	b.n	8006b08 <__lshift+0xa4>
 8006b32:	bf00      	nop
 8006b34:	080075d0 	.word	0x080075d0
 8006b38:	080075e1 	.word	0x080075e1

08006b3c <__mcmp>:
 8006b3c:	690a      	ldr	r2, [r1, #16]
 8006b3e:	4603      	mov	r3, r0
 8006b40:	6900      	ldr	r0, [r0, #16]
 8006b42:	1a80      	subs	r0, r0, r2
 8006b44:	b530      	push	{r4, r5, lr}
 8006b46:	d10e      	bne.n	8006b66 <__mcmp+0x2a>
 8006b48:	3314      	adds	r3, #20
 8006b4a:	3114      	adds	r1, #20
 8006b4c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006b50:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006b54:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006b58:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006b5c:	4295      	cmp	r5, r2
 8006b5e:	d003      	beq.n	8006b68 <__mcmp+0x2c>
 8006b60:	d205      	bcs.n	8006b6e <__mcmp+0x32>
 8006b62:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006b66:	bd30      	pop	{r4, r5, pc}
 8006b68:	42a3      	cmp	r3, r4
 8006b6a:	d3f3      	bcc.n	8006b54 <__mcmp+0x18>
 8006b6c:	e7fb      	b.n	8006b66 <__mcmp+0x2a>
 8006b6e:	2001      	movs	r0, #1
 8006b70:	e7f9      	b.n	8006b66 <__mcmp+0x2a>
	...

08006b74 <__mdiff>:
 8006b74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b78:	4689      	mov	r9, r1
 8006b7a:	4606      	mov	r6, r0
 8006b7c:	4611      	mov	r1, r2
 8006b7e:	4648      	mov	r0, r9
 8006b80:	4614      	mov	r4, r2
 8006b82:	f7ff ffdb 	bl	8006b3c <__mcmp>
 8006b86:	1e05      	subs	r5, r0, #0
 8006b88:	d112      	bne.n	8006bb0 <__mdiff+0x3c>
 8006b8a:	4629      	mov	r1, r5
 8006b8c:	4630      	mov	r0, r6
 8006b8e:	f7ff fd5b 	bl	8006648 <_Balloc>
 8006b92:	4602      	mov	r2, r0
 8006b94:	b928      	cbnz	r0, 8006ba2 <__mdiff+0x2e>
 8006b96:	4b3f      	ldr	r3, [pc, #252]	@ (8006c94 <__mdiff+0x120>)
 8006b98:	f240 2137 	movw	r1, #567	@ 0x237
 8006b9c:	483e      	ldr	r0, [pc, #248]	@ (8006c98 <__mdiff+0x124>)
 8006b9e:	f000 f99f 	bl	8006ee0 <__assert_func>
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006ba8:	4610      	mov	r0, r2
 8006baa:	b003      	add	sp, #12
 8006bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bb0:	bfbc      	itt	lt
 8006bb2:	464b      	movlt	r3, r9
 8006bb4:	46a1      	movlt	r9, r4
 8006bb6:	4630      	mov	r0, r6
 8006bb8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006bbc:	bfba      	itte	lt
 8006bbe:	461c      	movlt	r4, r3
 8006bc0:	2501      	movlt	r5, #1
 8006bc2:	2500      	movge	r5, #0
 8006bc4:	f7ff fd40 	bl	8006648 <_Balloc>
 8006bc8:	4602      	mov	r2, r0
 8006bca:	b918      	cbnz	r0, 8006bd4 <__mdiff+0x60>
 8006bcc:	4b31      	ldr	r3, [pc, #196]	@ (8006c94 <__mdiff+0x120>)
 8006bce:	f240 2145 	movw	r1, #581	@ 0x245
 8006bd2:	e7e3      	b.n	8006b9c <__mdiff+0x28>
 8006bd4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006bd8:	6926      	ldr	r6, [r4, #16]
 8006bda:	60c5      	str	r5, [r0, #12]
 8006bdc:	f109 0310 	add.w	r3, r9, #16
 8006be0:	f109 0514 	add.w	r5, r9, #20
 8006be4:	f104 0e14 	add.w	lr, r4, #20
 8006be8:	f100 0b14 	add.w	fp, r0, #20
 8006bec:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006bf0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006bf4:	9301      	str	r3, [sp, #4]
 8006bf6:	46d9      	mov	r9, fp
 8006bf8:	f04f 0c00 	mov.w	ip, #0
 8006bfc:	9b01      	ldr	r3, [sp, #4]
 8006bfe:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006c02:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006c06:	9301      	str	r3, [sp, #4]
 8006c08:	fa1f f38a 	uxth.w	r3, sl
 8006c0c:	4619      	mov	r1, r3
 8006c0e:	b283      	uxth	r3, r0
 8006c10:	1acb      	subs	r3, r1, r3
 8006c12:	0c00      	lsrs	r0, r0, #16
 8006c14:	4463      	add	r3, ip
 8006c16:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006c1a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006c24:	4576      	cmp	r6, lr
 8006c26:	f849 3b04 	str.w	r3, [r9], #4
 8006c2a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006c2e:	d8e5      	bhi.n	8006bfc <__mdiff+0x88>
 8006c30:	1b33      	subs	r3, r6, r4
 8006c32:	3b15      	subs	r3, #21
 8006c34:	f023 0303 	bic.w	r3, r3, #3
 8006c38:	3415      	adds	r4, #21
 8006c3a:	3304      	adds	r3, #4
 8006c3c:	42a6      	cmp	r6, r4
 8006c3e:	bf38      	it	cc
 8006c40:	2304      	movcc	r3, #4
 8006c42:	441d      	add	r5, r3
 8006c44:	445b      	add	r3, fp
 8006c46:	461e      	mov	r6, r3
 8006c48:	462c      	mov	r4, r5
 8006c4a:	4544      	cmp	r4, r8
 8006c4c:	d30e      	bcc.n	8006c6c <__mdiff+0xf8>
 8006c4e:	f108 0103 	add.w	r1, r8, #3
 8006c52:	1b49      	subs	r1, r1, r5
 8006c54:	f021 0103 	bic.w	r1, r1, #3
 8006c58:	3d03      	subs	r5, #3
 8006c5a:	45a8      	cmp	r8, r5
 8006c5c:	bf38      	it	cc
 8006c5e:	2100      	movcc	r1, #0
 8006c60:	440b      	add	r3, r1
 8006c62:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006c66:	b191      	cbz	r1, 8006c8e <__mdiff+0x11a>
 8006c68:	6117      	str	r7, [r2, #16]
 8006c6a:	e79d      	b.n	8006ba8 <__mdiff+0x34>
 8006c6c:	f854 1b04 	ldr.w	r1, [r4], #4
 8006c70:	46e6      	mov	lr, ip
 8006c72:	0c08      	lsrs	r0, r1, #16
 8006c74:	fa1c fc81 	uxtah	ip, ip, r1
 8006c78:	4471      	add	r1, lr
 8006c7a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006c7e:	b289      	uxth	r1, r1
 8006c80:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006c84:	f846 1b04 	str.w	r1, [r6], #4
 8006c88:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006c8c:	e7dd      	b.n	8006c4a <__mdiff+0xd6>
 8006c8e:	3f01      	subs	r7, #1
 8006c90:	e7e7      	b.n	8006c62 <__mdiff+0xee>
 8006c92:	bf00      	nop
 8006c94:	080075d0 	.word	0x080075d0
 8006c98:	080075e1 	.word	0x080075e1

08006c9c <__d2b>:
 8006c9c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006ca0:	460f      	mov	r7, r1
 8006ca2:	2101      	movs	r1, #1
 8006ca4:	ec59 8b10 	vmov	r8, r9, d0
 8006ca8:	4616      	mov	r6, r2
 8006caa:	f7ff fccd 	bl	8006648 <_Balloc>
 8006cae:	4604      	mov	r4, r0
 8006cb0:	b930      	cbnz	r0, 8006cc0 <__d2b+0x24>
 8006cb2:	4602      	mov	r2, r0
 8006cb4:	4b23      	ldr	r3, [pc, #140]	@ (8006d44 <__d2b+0xa8>)
 8006cb6:	4824      	ldr	r0, [pc, #144]	@ (8006d48 <__d2b+0xac>)
 8006cb8:	f240 310f 	movw	r1, #783	@ 0x30f
 8006cbc:	f000 f910 	bl	8006ee0 <__assert_func>
 8006cc0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006cc4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006cc8:	b10d      	cbz	r5, 8006cce <__d2b+0x32>
 8006cca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006cce:	9301      	str	r3, [sp, #4]
 8006cd0:	f1b8 0300 	subs.w	r3, r8, #0
 8006cd4:	d023      	beq.n	8006d1e <__d2b+0x82>
 8006cd6:	4668      	mov	r0, sp
 8006cd8:	9300      	str	r3, [sp, #0]
 8006cda:	f7ff fd7c 	bl	80067d6 <__lo0bits>
 8006cde:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006ce2:	b1d0      	cbz	r0, 8006d1a <__d2b+0x7e>
 8006ce4:	f1c0 0320 	rsb	r3, r0, #32
 8006ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8006cec:	430b      	orrs	r3, r1
 8006cee:	40c2      	lsrs	r2, r0
 8006cf0:	6163      	str	r3, [r4, #20]
 8006cf2:	9201      	str	r2, [sp, #4]
 8006cf4:	9b01      	ldr	r3, [sp, #4]
 8006cf6:	61a3      	str	r3, [r4, #24]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	bf0c      	ite	eq
 8006cfc:	2201      	moveq	r2, #1
 8006cfe:	2202      	movne	r2, #2
 8006d00:	6122      	str	r2, [r4, #16]
 8006d02:	b1a5      	cbz	r5, 8006d2e <__d2b+0x92>
 8006d04:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006d08:	4405      	add	r5, r0
 8006d0a:	603d      	str	r5, [r7, #0]
 8006d0c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006d10:	6030      	str	r0, [r6, #0]
 8006d12:	4620      	mov	r0, r4
 8006d14:	b003      	add	sp, #12
 8006d16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006d1a:	6161      	str	r1, [r4, #20]
 8006d1c:	e7ea      	b.n	8006cf4 <__d2b+0x58>
 8006d1e:	a801      	add	r0, sp, #4
 8006d20:	f7ff fd59 	bl	80067d6 <__lo0bits>
 8006d24:	9b01      	ldr	r3, [sp, #4]
 8006d26:	6163      	str	r3, [r4, #20]
 8006d28:	3020      	adds	r0, #32
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	e7e8      	b.n	8006d00 <__d2b+0x64>
 8006d2e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006d32:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006d36:	6038      	str	r0, [r7, #0]
 8006d38:	6918      	ldr	r0, [r3, #16]
 8006d3a:	f7ff fd2d 	bl	8006798 <__hi0bits>
 8006d3e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006d42:	e7e5      	b.n	8006d10 <__d2b+0x74>
 8006d44:	080075d0 	.word	0x080075d0
 8006d48:	080075e1 	.word	0x080075e1

08006d4c <__sflush_r>:
 8006d4c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d54:	0716      	lsls	r6, r2, #28
 8006d56:	4605      	mov	r5, r0
 8006d58:	460c      	mov	r4, r1
 8006d5a:	d454      	bmi.n	8006e06 <__sflush_r+0xba>
 8006d5c:	684b      	ldr	r3, [r1, #4]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	dc02      	bgt.n	8006d68 <__sflush_r+0x1c>
 8006d62:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	dd48      	ble.n	8006dfa <__sflush_r+0xae>
 8006d68:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006d6a:	2e00      	cmp	r6, #0
 8006d6c:	d045      	beq.n	8006dfa <__sflush_r+0xae>
 8006d6e:	2300      	movs	r3, #0
 8006d70:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006d74:	682f      	ldr	r7, [r5, #0]
 8006d76:	6a21      	ldr	r1, [r4, #32]
 8006d78:	602b      	str	r3, [r5, #0]
 8006d7a:	d030      	beq.n	8006dde <__sflush_r+0x92>
 8006d7c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006d7e:	89a3      	ldrh	r3, [r4, #12]
 8006d80:	0759      	lsls	r1, r3, #29
 8006d82:	d505      	bpl.n	8006d90 <__sflush_r+0x44>
 8006d84:	6863      	ldr	r3, [r4, #4]
 8006d86:	1ad2      	subs	r2, r2, r3
 8006d88:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006d8a:	b10b      	cbz	r3, 8006d90 <__sflush_r+0x44>
 8006d8c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006d8e:	1ad2      	subs	r2, r2, r3
 8006d90:	2300      	movs	r3, #0
 8006d92:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006d94:	6a21      	ldr	r1, [r4, #32]
 8006d96:	4628      	mov	r0, r5
 8006d98:	47b0      	blx	r6
 8006d9a:	1c43      	adds	r3, r0, #1
 8006d9c:	89a3      	ldrh	r3, [r4, #12]
 8006d9e:	d106      	bne.n	8006dae <__sflush_r+0x62>
 8006da0:	6829      	ldr	r1, [r5, #0]
 8006da2:	291d      	cmp	r1, #29
 8006da4:	d82b      	bhi.n	8006dfe <__sflush_r+0xb2>
 8006da6:	4a2a      	ldr	r2, [pc, #168]	@ (8006e50 <__sflush_r+0x104>)
 8006da8:	410a      	asrs	r2, r1
 8006daa:	07d6      	lsls	r6, r2, #31
 8006dac:	d427      	bmi.n	8006dfe <__sflush_r+0xb2>
 8006dae:	2200      	movs	r2, #0
 8006db0:	6062      	str	r2, [r4, #4]
 8006db2:	04d9      	lsls	r1, r3, #19
 8006db4:	6922      	ldr	r2, [r4, #16]
 8006db6:	6022      	str	r2, [r4, #0]
 8006db8:	d504      	bpl.n	8006dc4 <__sflush_r+0x78>
 8006dba:	1c42      	adds	r2, r0, #1
 8006dbc:	d101      	bne.n	8006dc2 <__sflush_r+0x76>
 8006dbe:	682b      	ldr	r3, [r5, #0]
 8006dc0:	b903      	cbnz	r3, 8006dc4 <__sflush_r+0x78>
 8006dc2:	6560      	str	r0, [r4, #84]	@ 0x54
 8006dc4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006dc6:	602f      	str	r7, [r5, #0]
 8006dc8:	b1b9      	cbz	r1, 8006dfa <__sflush_r+0xae>
 8006dca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006dce:	4299      	cmp	r1, r3
 8006dd0:	d002      	beq.n	8006dd8 <__sflush_r+0x8c>
 8006dd2:	4628      	mov	r0, r5
 8006dd4:	f7ff fb38 	bl	8006448 <_free_r>
 8006dd8:	2300      	movs	r3, #0
 8006dda:	6363      	str	r3, [r4, #52]	@ 0x34
 8006ddc:	e00d      	b.n	8006dfa <__sflush_r+0xae>
 8006dde:	2301      	movs	r3, #1
 8006de0:	4628      	mov	r0, r5
 8006de2:	47b0      	blx	r6
 8006de4:	4602      	mov	r2, r0
 8006de6:	1c50      	adds	r0, r2, #1
 8006de8:	d1c9      	bne.n	8006d7e <__sflush_r+0x32>
 8006dea:	682b      	ldr	r3, [r5, #0]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d0c6      	beq.n	8006d7e <__sflush_r+0x32>
 8006df0:	2b1d      	cmp	r3, #29
 8006df2:	d001      	beq.n	8006df8 <__sflush_r+0xac>
 8006df4:	2b16      	cmp	r3, #22
 8006df6:	d11e      	bne.n	8006e36 <__sflush_r+0xea>
 8006df8:	602f      	str	r7, [r5, #0]
 8006dfa:	2000      	movs	r0, #0
 8006dfc:	e022      	b.n	8006e44 <__sflush_r+0xf8>
 8006dfe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e02:	b21b      	sxth	r3, r3
 8006e04:	e01b      	b.n	8006e3e <__sflush_r+0xf2>
 8006e06:	690f      	ldr	r7, [r1, #16]
 8006e08:	2f00      	cmp	r7, #0
 8006e0a:	d0f6      	beq.n	8006dfa <__sflush_r+0xae>
 8006e0c:	0793      	lsls	r3, r2, #30
 8006e0e:	680e      	ldr	r6, [r1, #0]
 8006e10:	bf08      	it	eq
 8006e12:	694b      	ldreq	r3, [r1, #20]
 8006e14:	600f      	str	r7, [r1, #0]
 8006e16:	bf18      	it	ne
 8006e18:	2300      	movne	r3, #0
 8006e1a:	eba6 0807 	sub.w	r8, r6, r7
 8006e1e:	608b      	str	r3, [r1, #8]
 8006e20:	f1b8 0f00 	cmp.w	r8, #0
 8006e24:	dde9      	ble.n	8006dfa <__sflush_r+0xae>
 8006e26:	6a21      	ldr	r1, [r4, #32]
 8006e28:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006e2a:	4643      	mov	r3, r8
 8006e2c:	463a      	mov	r2, r7
 8006e2e:	4628      	mov	r0, r5
 8006e30:	47b0      	blx	r6
 8006e32:	2800      	cmp	r0, #0
 8006e34:	dc08      	bgt.n	8006e48 <__sflush_r+0xfc>
 8006e36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e3e:	81a3      	strh	r3, [r4, #12]
 8006e40:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006e44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e48:	4407      	add	r7, r0
 8006e4a:	eba8 0800 	sub.w	r8, r8, r0
 8006e4e:	e7e7      	b.n	8006e20 <__sflush_r+0xd4>
 8006e50:	dfbffffe 	.word	0xdfbffffe

08006e54 <_fflush_r>:
 8006e54:	b538      	push	{r3, r4, r5, lr}
 8006e56:	690b      	ldr	r3, [r1, #16]
 8006e58:	4605      	mov	r5, r0
 8006e5a:	460c      	mov	r4, r1
 8006e5c:	b913      	cbnz	r3, 8006e64 <_fflush_r+0x10>
 8006e5e:	2500      	movs	r5, #0
 8006e60:	4628      	mov	r0, r5
 8006e62:	bd38      	pop	{r3, r4, r5, pc}
 8006e64:	b118      	cbz	r0, 8006e6e <_fflush_r+0x1a>
 8006e66:	6a03      	ldr	r3, [r0, #32]
 8006e68:	b90b      	cbnz	r3, 8006e6e <_fflush_r+0x1a>
 8006e6a:	f7fe fba5 	bl	80055b8 <__sinit>
 8006e6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d0f3      	beq.n	8006e5e <_fflush_r+0xa>
 8006e76:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006e78:	07d0      	lsls	r0, r2, #31
 8006e7a:	d404      	bmi.n	8006e86 <_fflush_r+0x32>
 8006e7c:	0599      	lsls	r1, r3, #22
 8006e7e:	d402      	bmi.n	8006e86 <_fflush_r+0x32>
 8006e80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006e82:	f7fe fc90 	bl	80057a6 <__retarget_lock_acquire_recursive>
 8006e86:	4628      	mov	r0, r5
 8006e88:	4621      	mov	r1, r4
 8006e8a:	f7ff ff5f 	bl	8006d4c <__sflush_r>
 8006e8e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006e90:	07da      	lsls	r2, r3, #31
 8006e92:	4605      	mov	r5, r0
 8006e94:	d4e4      	bmi.n	8006e60 <_fflush_r+0xc>
 8006e96:	89a3      	ldrh	r3, [r4, #12]
 8006e98:	059b      	lsls	r3, r3, #22
 8006e9a:	d4e1      	bmi.n	8006e60 <_fflush_r+0xc>
 8006e9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006e9e:	f7fe fc83 	bl	80057a8 <__retarget_lock_release_recursive>
 8006ea2:	e7dd      	b.n	8006e60 <_fflush_r+0xc>

08006ea4 <_sbrk_r>:
 8006ea4:	b538      	push	{r3, r4, r5, lr}
 8006ea6:	4d06      	ldr	r5, [pc, #24]	@ (8006ec0 <_sbrk_r+0x1c>)
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	4604      	mov	r4, r0
 8006eac:	4608      	mov	r0, r1
 8006eae:	602b      	str	r3, [r5, #0]
 8006eb0:	f7fa fdd4 	bl	8001a5c <_sbrk>
 8006eb4:	1c43      	adds	r3, r0, #1
 8006eb6:	d102      	bne.n	8006ebe <_sbrk_r+0x1a>
 8006eb8:	682b      	ldr	r3, [r5, #0]
 8006eba:	b103      	cbz	r3, 8006ebe <_sbrk_r+0x1a>
 8006ebc:	6023      	str	r3, [r4, #0]
 8006ebe:	bd38      	pop	{r3, r4, r5, pc}
 8006ec0:	2000047c 	.word	0x2000047c

08006ec4 <memcpy>:
 8006ec4:	440a      	add	r2, r1
 8006ec6:	4291      	cmp	r1, r2
 8006ec8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006ecc:	d100      	bne.n	8006ed0 <memcpy+0xc>
 8006ece:	4770      	bx	lr
 8006ed0:	b510      	push	{r4, lr}
 8006ed2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ed6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006eda:	4291      	cmp	r1, r2
 8006edc:	d1f9      	bne.n	8006ed2 <memcpy+0xe>
 8006ede:	bd10      	pop	{r4, pc}

08006ee0 <__assert_func>:
 8006ee0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006ee2:	4614      	mov	r4, r2
 8006ee4:	461a      	mov	r2, r3
 8006ee6:	4b09      	ldr	r3, [pc, #36]	@ (8006f0c <__assert_func+0x2c>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4605      	mov	r5, r0
 8006eec:	68d8      	ldr	r0, [r3, #12]
 8006eee:	b954      	cbnz	r4, 8006f06 <__assert_func+0x26>
 8006ef0:	4b07      	ldr	r3, [pc, #28]	@ (8006f10 <__assert_func+0x30>)
 8006ef2:	461c      	mov	r4, r3
 8006ef4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006ef8:	9100      	str	r1, [sp, #0]
 8006efa:	462b      	mov	r3, r5
 8006efc:	4905      	ldr	r1, [pc, #20]	@ (8006f14 <__assert_func+0x34>)
 8006efe:	f000 f841 	bl	8006f84 <fiprintf>
 8006f02:	f000 f851 	bl	8006fa8 <abort>
 8006f06:	4b04      	ldr	r3, [pc, #16]	@ (8006f18 <__assert_func+0x38>)
 8006f08:	e7f4      	b.n	8006ef4 <__assert_func+0x14>
 8006f0a:	bf00      	nop
 8006f0c:	20000018 	.word	0x20000018
 8006f10:	0800777d 	.word	0x0800777d
 8006f14:	0800774f 	.word	0x0800774f
 8006f18:	08007742 	.word	0x08007742

08006f1c <_calloc_r>:
 8006f1c:	b570      	push	{r4, r5, r6, lr}
 8006f1e:	fba1 5402 	umull	r5, r4, r1, r2
 8006f22:	b93c      	cbnz	r4, 8006f34 <_calloc_r+0x18>
 8006f24:	4629      	mov	r1, r5
 8006f26:	f7ff fb03 	bl	8006530 <_malloc_r>
 8006f2a:	4606      	mov	r6, r0
 8006f2c:	b928      	cbnz	r0, 8006f3a <_calloc_r+0x1e>
 8006f2e:	2600      	movs	r6, #0
 8006f30:	4630      	mov	r0, r6
 8006f32:	bd70      	pop	{r4, r5, r6, pc}
 8006f34:	220c      	movs	r2, #12
 8006f36:	6002      	str	r2, [r0, #0]
 8006f38:	e7f9      	b.n	8006f2e <_calloc_r+0x12>
 8006f3a:	462a      	mov	r2, r5
 8006f3c:	4621      	mov	r1, r4
 8006f3e:	f7fe fbb4 	bl	80056aa <memset>
 8006f42:	e7f5      	b.n	8006f30 <_calloc_r+0x14>

08006f44 <__ascii_mbtowc>:
 8006f44:	b082      	sub	sp, #8
 8006f46:	b901      	cbnz	r1, 8006f4a <__ascii_mbtowc+0x6>
 8006f48:	a901      	add	r1, sp, #4
 8006f4a:	b142      	cbz	r2, 8006f5e <__ascii_mbtowc+0x1a>
 8006f4c:	b14b      	cbz	r3, 8006f62 <__ascii_mbtowc+0x1e>
 8006f4e:	7813      	ldrb	r3, [r2, #0]
 8006f50:	600b      	str	r3, [r1, #0]
 8006f52:	7812      	ldrb	r2, [r2, #0]
 8006f54:	1e10      	subs	r0, r2, #0
 8006f56:	bf18      	it	ne
 8006f58:	2001      	movne	r0, #1
 8006f5a:	b002      	add	sp, #8
 8006f5c:	4770      	bx	lr
 8006f5e:	4610      	mov	r0, r2
 8006f60:	e7fb      	b.n	8006f5a <__ascii_mbtowc+0x16>
 8006f62:	f06f 0001 	mvn.w	r0, #1
 8006f66:	e7f8      	b.n	8006f5a <__ascii_mbtowc+0x16>

08006f68 <__ascii_wctomb>:
 8006f68:	4603      	mov	r3, r0
 8006f6a:	4608      	mov	r0, r1
 8006f6c:	b141      	cbz	r1, 8006f80 <__ascii_wctomb+0x18>
 8006f6e:	2aff      	cmp	r2, #255	@ 0xff
 8006f70:	d904      	bls.n	8006f7c <__ascii_wctomb+0x14>
 8006f72:	228a      	movs	r2, #138	@ 0x8a
 8006f74:	601a      	str	r2, [r3, #0]
 8006f76:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006f7a:	4770      	bx	lr
 8006f7c:	700a      	strb	r2, [r1, #0]
 8006f7e:	2001      	movs	r0, #1
 8006f80:	4770      	bx	lr
	...

08006f84 <fiprintf>:
 8006f84:	b40e      	push	{r1, r2, r3}
 8006f86:	b503      	push	{r0, r1, lr}
 8006f88:	4601      	mov	r1, r0
 8006f8a:	ab03      	add	r3, sp, #12
 8006f8c:	4805      	ldr	r0, [pc, #20]	@ (8006fa4 <fiprintf+0x20>)
 8006f8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f92:	6800      	ldr	r0, [r0, #0]
 8006f94:	9301      	str	r3, [sp, #4]
 8006f96:	f000 f837 	bl	8007008 <_vfiprintf_r>
 8006f9a:	b002      	add	sp, #8
 8006f9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006fa0:	b003      	add	sp, #12
 8006fa2:	4770      	bx	lr
 8006fa4:	20000018 	.word	0x20000018

08006fa8 <abort>:
 8006fa8:	b508      	push	{r3, lr}
 8006faa:	2006      	movs	r0, #6
 8006fac:	f000 fa00 	bl	80073b0 <raise>
 8006fb0:	2001      	movs	r0, #1
 8006fb2:	f7fa fcdb 	bl	800196c <_exit>

08006fb6 <__sfputc_r>:
 8006fb6:	6893      	ldr	r3, [r2, #8]
 8006fb8:	3b01      	subs	r3, #1
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	b410      	push	{r4}
 8006fbe:	6093      	str	r3, [r2, #8]
 8006fc0:	da08      	bge.n	8006fd4 <__sfputc_r+0x1e>
 8006fc2:	6994      	ldr	r4, [r2, #24]
 8006fc4:	42a3      	cmp	r3, r4
 8006fc6:	db01      	blt.n	8006fcc <__sfputc_r+0x16>
 8006fc8:	290a      	cmp	r1, #10
 8006fca:	d103      	bne.n	8006fd4 <__sfputc_r+0x1e>
 8006fcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006fd0:	f000 b932 	b.w	8007238 <__swbuf_r>
 8006fd4:	6813      	ldr	r3, [r2, #0]
 8006fd6:	1c58      	adds	r0, r3, #1
 8006fd8:	6010      	str	r0, [r2, #0]
 8006fda:	7019      	strb	r1, [r3, #0]
 8006fdc:	4608      	mov	r0, r1
 8006fde:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006fe2:	4770      	bx	lr

08006fe4 <__sfputs_r>:
 8006fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fe6:	4606      	mov	r6, r0
 8006fe8:	460f      	mov	r7, r1
 8006fea:	4614      	mov	r4, r2
 8006fec:	18d5      	adds	r5, r2, r3
 8006fee:	42ac      	cmp	r4, r5
 8006ff0:	d101      	bne.n	8006ff6 <__sfputs_r+0x12>
 8006ff2:	2000      	movs	r0, #0
 8006ff4:	e007      	b.n	8007006 <__sfputs_r+0x22>
 8006ff6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ffa:	463a      	mov	r2, r7
 8006ffc:	4630      	mov	r0, r6
 8006ffe:	f7ff ffda 	bl	8006fb6 <__sfputc_r>
 8007002:	1c43      	adds	r3, r0, #1
 8007004:	d1f3      	bne.n	8006fee <__sfputs_r+0xa>
 8007006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007008 <_vfiprintf_r>:
 8007008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800700c:	460d      	mov	r5, r1
 800700e:	b09d      	sub	sp, #116	@ 0x74
 8007010:	4614      	mov	r4, r2
 8007012:	4698      	mov	r8, r3
 8007014:	4606      	mov	r6, r0
 8007016:	b118      	cbz	r0, 8007020 <_vfiprintf_r+0x18>
 8007018:	6a03      	ldr	r3, [r0, #32]
 800701a:	b90b      	cbnz	r3, 8007020 <_vfiprintf_r+0x18>
 800701c:	f7fe facc 	bl	80055b8 <__sinit>
 8007020:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007022:	07d9      	lsls	r1, r3, #31
 8007024:	d405      	bmi.n	8007032 <_vfiprintf_r+0x2a>
 8007026:	89ab      	ldrh	r3, [r5, #12]
 8007028:	059a      	lsls	r2, r3, #22
 800702a:	d402      	bmi.n	8007032 <_vfiprintf_r+0x2a>
 800702c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800702e:	f7fe fbba 	bl	80057a6 <__retarget_lock_acquire_recursive>
 8007032:	89ab      	ldrh	r3, [r5, #12]
 8007034:	071b      	lsls	r3, r3, #28
 8007036:	d501      	bpl.n	800703c <_vfiprintf_r+0x34>
 8007038:	692b      	ldr	r3, [r5, #16]
 800703a:	b99b      	cbnz	r3, 8007064 <_vfiprintf_r+0x5c>
 800703c:	4629      	mov	r1, r5
 800703e:	4630      	mov	r0, r6
 8007040:	f000 f938 	bl	80072b4 <__swsetup_r>
 8007044:	b170      	cbz	r0, 8007064 <_vfiprintf_r+0x5c>
 8007046:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007048:	07dc      	lsls	r4, r3, #31
 800704a:	d504      	bpl.n	8007056 <_vfiprintf_r+0x4e>
 800704c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007050:	b01d      	add	sp, #116	@ 0x74
 8007052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007056:	89ab      	ldrh	r3, [r5, #12]
 8007058:	0598      	lsls	r0, r3, #22
 800705a:	d4f7      	bmi.n	800704c <_vfiprintf_r+0x44>
 800705c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800705e:	f7fe fba3 	bl	80057a8 <__retarget_lock_release_recursive>
 8007062:	e7f3      	b.n	800704c <_vfiprintf_r+0x44>
 8007064:	2300      	movs	r3, #0
 8007066:	9309      	str	r3, [sp, #36]	@ 0x24
 8007068:	2320      	movs	r3, #32
 800706a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800706e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007072:	2330      	movs	r3, #48	@ 0x30
 8007074:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007224 <_vfiprintf_r+0x21c>
 8007078:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800707c:	f04f 0901 	mov.w	r9, #1
 8007080:	4623      	mov	r3, r4
 8007082:	469a      	mov	sl, r3
 8007084:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007088:	b10a      	cbz	r2, 800708e <_vfiprintf_r+0x86>
 800708a:	2a25      	cmp	r2, #37	@ 0x25
 800708c:	d1f9      	bne.n	8007082 <_vfiprintf_r+0x7a>
 800708e:	ebba 0b04 	subs.w	fp, sl, r4
 8007092:	d00b      	beq.n	80070ac <_vfiprintf_r+0xa4>
 8007094:	465b      	mov	r3, fp
 8007096:	4622      	mov	r2, r4
 8007098:	4629      	mov	r1, r5
 800709a:	4630      	mov	r0, r6
 800709c:	f7ff ffa2 	bl	8006fe4 <__sfputs_r>
 80070a0:	3001      	adds	r0, #1
 80070a2:	f000 80a7 	beq.w	80071f4 <_vfiprintf_r+0x1ec>
 80070a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80070a8:	445a      	add	r2, fp
 80070aa:	9209      	str	r2, [sp, #36]	@ 0x24
 80070ac:	f89a 3000 	ldrb.w	r3, [sl]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	f000 809f 	beq.w	80071f4 <_vfiprintf_r+0x1ec>
 80070b6:	2300      	movs	r3, #0
 80070b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80070bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80070c0:	f10a 0a01 	add.w	sl, sl, #1
 80070c4:	9304      	str	r3, [sp, #16]
 80070c6:	9307      	str	r3, [sp, #28]
 80070c8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80070cc:	931a      	str	r3, [sp, #104]	@ 0x68
 80070ce:	4654      	mov	r4, sl
 80070d0:	2205      	movs	r2, #5
 80070d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070d6:	4853      	ldr	r0, [pc, #332]	@ (8007224 <_vfiprintf_r+0x21c>)
 80070d8:	f7f9 f87a 	bl	80001d0 <memchr>
 80070dc:	9a04      	ldr	r2, [sp, #16]
 80070de:	b9d8      	cbnz	r0, 8007118 <_vfiprintf_r+0x110>
 80070e0:	06d1      	lsls	r1, r2, #27
 80070e2:	bf44      	itt	mi
 80070e4:	2320      	movmi	r3, #32
 80070e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80070ea:	0713      	lsls	r3, r2, #28
 80070ec:	bf44      	itt	mi
 80070ee:	232b      	movmi	r3, #43	@ 0x2b
 80070f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80070f4:	f89a 3000 	ldrb.w	r3, [sl]
 80070f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80070fa:	d015      	beq.n	8007128 <_vfiprintf_r+0x120>
 80070fc:	9a07      	ldr	r2, [sp, #28]
 80070fe:	4654      	mov	r4, sl
 8007100:	2000      	movs	r0, #0
 8007102:	f04f 0c0a 	mov.w	ip, #10
 8007106:	4621      	mov	r1, r4
 8007108:	f811 3b01 	ldrb.w	r3, [r1], #1
 800710c:	3b30      	subs	r3, #48	@ 0x30
 800710e:	2b09      	cmp	r3, #9
 8007110:	d94b      	bls.n	80071aa <_vfiprintf_r+0x1a2>
 8007112:	b1b0      	cbz	r0, 8007142 <_vfiprintf_r+0x13a>
 8007114:	9207      	str	r2, [sp, #28]
 8007116:	e014      	b.n	8007142 <_vfiprintf_r+0x13a>
 8007118:	eba0 0308 	sub.w	r3, r0, r8
 800711c:	fa09 f303 	lsl.w	r3, r9, r3
 8007120:	4313      	orrs	r3, r2
 8007122:	9304      	str	r3, [sp, #16]
 8007124:	46a2      	mov	sl, r4
 8007126:	e7d2      	b.n	80070ce <_vfiprintf_r+0xc6>
 8007128:	9b03      	ldr	r3, [sp, #12]
 800712a:	1d19      	adds	r1, r3, #4
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	9103      	str	r1, [sp, #12]
 8007130:	2b00      	cmp	r3, #0
 8007132:	bfbb      	ittet	lt
 8007134:	425b      	neglt	r3, r3
 8007136:	f042 0202 	orrlt.w	r2, r2, #2
 800713a:	9307      	strge	r3, [sp, #28]
 800713c:	9307      	strlt	r3, [sp, #28]
 800713e:	bfb8      	it	lt
 8007140:	9204      	strlt	r2, [sp, #16]
 8007142:	7823      	ldrb	r3, [r4, #0]
 8007144:	2b2e      	cmp	r3, #46	@ 0x2e
 8007146:	d10a      	bne.n	800715e <_vfiprintf_r+0x156>
 8007148:	7863      	ldrb	r3, [r4, #1]
 800714a:	2b2a      	cmp	r3, #42	@ 0x2a
 800714c:	d132      	bne.n	80071b4 <_vfiprintf_r+0x1ac>
 800714e:	9b03      	ldr	r3, [sp, #12]
 8007150:	1d1a      	adds	r2, r3, #4
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	9203      	str	r2, [sp, #12]
 8007156:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800715a:	3402      	adds	r4, #2
 800715c:	9305      	str	r3, [sp, #20]
 800715e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007234 <_vfiprintf_r+0x22c>
 8007162:	7821      	ldrb	r1, [r4, #0]
 8007164:	2203      	movs	r2, #3
 8007166:	4650      	mov	r0, sl
 8007168:	f7f9 f832 	bl	80001d0 <memchr>
 800716c:	b138      	cbz	r0, 800717e <_vfiprintf_r+0x176>
 800716e:	9b04      	ldr	r3, [sp, #16]
 8007170:	eba0 000a 	sub.w	r0, r0, sl
 8007174:	2240      	movs	r2, #64	@ 0x40
 8007176:	4082      	lsls	r2, r0
 8007178:	4313      	orrs	r3, r2
 800717a:	3401      	adds	r4, #1
 800717c:	9304      	str	r3, [sp, #16]
 800717e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007182:	4829      	ldr	r0, [pc, #164]	@ (8007228 <_vfiprintf_r+0x220>)
 8007184:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007188:	2206      	movs	r2, #6
 800718a:	f7f9 f821 	bl	80001d0 <memchr>
 800718e:	2800      	cmp	r0, #0
 8007190:	d03f      	beq.n	8007212 <_vfiprintf_r+0x20a>
 8007192:	4b26      	ldr	r3, [pc, #152]	@ (800722c <_vfiprintf_r+0x224>)
 8007194:	bb1b      	cbnz	r3, 80071de <_vfiprintf_r+0x1d6>
 8007196:	9b03      	ldr	r3, [sp, #12]
 8007198:	3307      	adds	r3, #7
 800719a:	f023 0307 	bic.w	r3, r3, #7
 800719e:	3308      	adds	r3, #8
 80071a0:	9303      	str	r3, [sp, #12]
 80071a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071a4:	443b      	add	r3, r7
 80071a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80071a8:	e76a      	b.n	8007080 <_vfiprintf_r+0x78>
 80071aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80071ae:	460c      	mov	r4, r1
 80071b0:	2001      	movs	r0, #1
 80071b2:	e7a8      	b.n	8007106 <_vfiprintf_r+0xfe>
 80071b4:	2300      	movs	r3, #0
 80071b6:	3401      	adds	r4, #1
 80071b8:	9305      	str	r3, [sp, #20]
 80071ba:	4619      	mov	r1, r3
 80071bc:	f04f 0c0a 	mov.w	ip, #10
 80071c0:	4620      	mov	r0, r4
 80071c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80071c6:	3a30      	subs	r2, #48	@ 0x30
 80071c8:	2a09      	cmp	r2, #9
 80071ca:	d903      	bls.n	80071d4 <_vfiprintf_r+0x1cc>
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d0c6      	beq.n	800715e <_vfiprintf_r+0x156>
 80071d0:	9105      	str	r1, [sp, #20]
 80071d2:	e7c4      	b.n	800715e <_vfiprintf_r+0x156>
 80071d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80071d8:	4604      	mov	r4, r0
 80071da:	2301      	movs	r3, #1
 80071dc:	e7f0      	b.n	80071c0 <_vfiprintf_r+0x1b8>
 80071de:	ab03      	add	r3, sp, #12
 80071e0:	9300      	str	r3, [sp, #0]
 80071e2:	462a      	mov	r2, r5
 80071e4:	4b12      	ldr	r3, [pc, #72]	@ (8007230 <_vfiprintf_r+0x228>)
 80071e6:	a904      	add	r1, sp, #16
 80071e8:	4630      	mov	r0, r6
 80071ea:	f7fd fda1 	bl	8004d30 <_printf_float>
 80071ee:	4607      	mov	r7, r0
 80071f0:	1c78      	adds	r0, r7, #1
 80071f2:	d1d6      	bne.n	80071a2 <_vfiprintf_r+0x19a>
 80071f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80071f6:	07d9      	lsls	r1, r3, #31
 80071f8:	d405      	bmi.n	8007206 <_vfiprintf_r+0x1fe>
 80071fa:	89ab      	ldrh	r3, [r5, #12]
 80071fc:	059a      	lsls	r2, r3, #22
 80071fe:	d402      	bmi.n	8007206 <_vfiprintf_r+0x1fe>
 8007200:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007202:	f7fe fad1 	bl	80057a8 <__retarget_lock_release_recursive>
 8007206:	89ab      	ldrh	r3, [r5, #12]
 8007208:	065b      	lsls	r3, r3, #25
 800720a:	f53f af1f 	bmi.w	800704c <_vfiprintf_r+0x44>
 800720e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007210:	e71e      	b.n	8007050 <_vfiprintf_r+0x48>
 8007212:	ab03      	add	r3, sp, #12
 8007214:	9300      	str	r3, [sp, #0]
 8007216:	462a      	mov	r2, r5
 8007218:	4b05      	ldr	r3, [pc, #20]	@ (8007230 <_vfiprintf_r+0x228>)
 800721a:	a904      	add	r1, sp, #16
 800721c:	4630      	mov	r0, r6
 800721e:	f7fe f81f 	bl	8005260 <_printf_i>
 8007222:	e7e4      	b.n	80071ee <_vfiprintf_r+0x1e6>
 8007224:	0800787f 	.word	0x0800787f
 8007228:	08007889 	.word	0x08007889
 800722c:	08004d31 	.word	0x08004d31
 8007230:	08006fe5 	.word	0x08006fe5
 8007234:	08007885 	.word	0x08007885

08007238 <__swbuf_r>:
 8007238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800723a:	460e      	mov	r6, r1
 800723c:	4614      	mov	r4, r2
 800723e:	4605      	mov	r5, r0
 8007240:	b118      	cbz	r0, 800724a <__swbuf_r+0x12>
 8007242:	6a03      	ldr	r3, [r0, #32]
 8007244:	b90b      	cbnz	r3, 800724a <__swbuf_r+0x12>
 8007246:	f7fe f9b7 	bl	80055b8 <__sinit>
 800724a:	69a3      	ldr	r3, [r4, #24]
 800724c:	60a3      	str	r3, [r4, #8]
 800724e:	89a3      	ldrh	r3, [r4, #12]
 8007250:	071a      	lsls	r2, r3, #28
 8007252:	d501      	bpl.n	8007258 <__swbuf_r+0x20>
 8007254:	6923      	ldr	r3, [r4, #16]
 8007256:	b943      	cbnz	r3, 800726a <__swbuf_r+0x32>
 8007258:	4621      	mov	r1, r4
 800725a:	4628      	mov	r0, r5
 800725c:	f000 f82a 	bl	80072b4 <__swsetup_r>
 8007260:	b118      	cbz	r0, 800726a <__swbuf_r+0x32>
 8007262:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8007266:	4638      	mov	r0, r7
 8007268:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800726a:	6823      	ldr	r3, [r4, #0]
 800726c:	6922      	ldr	r2, [r4, #16]
 800726e:	1a98      	subs	r0, r3, r2
 8007270:	6963      	ldr	r3, [r4, #20]
 8007272:	b2f6      	uxtb	r6, r6
 8007274:	4283      	cmp	r3, r0
 8007276:	4637      	mov	r7, r6
 8007278:	dc05      	bgt.n	8007286 <__swbuf_r+0x4e>
 800727a:	4621      	mov	r1, r4
 800727c:	4628      	mov	r0, r5
 800727e:	f7ff fde9 	bl	8006e54 <_fflush_r>
 8007282:	2800      	cmp	r0, #0
 8007284:	d1ed      	bne.n	8007262 <__swbuf_r+0x2a>
 8007286:	68a3      	ldr	r3, [r4, #8]
 8007288:	3b01      	subs	r3, #1
 800728a:	60a3      	str	r3, [r4, #8]
 800728c:	6823      	ldr	r3, [r4, #0]
 800728e:	1c5a      	adds	r2, r3, #1
 8007290:	6022      	str	r2, [r4, #0]
 8007292:	701e      	strb	r6, [r3, #0]
 8007294:	6962      	ldr	r2, [r4, #20]
 8007296:	1c43      	adds	r3, r0, #1
 8007298:	429a      	cmp	r2, r3
 800729a:	d004      	beq.n	80072a6 <__swbuf_r+0x6e>
 800729c:	89a3      	ldrh	r3, [r4, #12]
 800729e:	07db      	lsls	r3, r3, #31
 80072a0:	d5e1      	bpl.n	8007266 <__swbuf_r+0x2e>
 80072a2:	2e0a      	cmp	r6, #10
 80072a4:	d1df      	bne.n	8007266 <__swbuf_r+0x2e>
 80072a6:	4621      	mov	r1, r4
 80072a8:	4628      	mov	r0, r5
 80072aa:	f7ff fdd3 	bl	8006e54 <_fflush_r>
 80072ae:	2800      	cmp	r0, #0
 80072b0:	d0d9      	beq.n	8007266 <__swbuf_r+0x2e>
 80072b2:	e7d6      	b.n	8007262 <__swbuf_r+0x2a>

080072b4 <__swsetup_r>:
 80072b4:	b538      	push	{r3, r4, r5, lr}
 80072b6:	4b29      	ldr	r3, [pc, #164]	@ (800735c <__swsetup_r+0xa8>)
 80072b8:	4605      	mov	r5, r0
 80072ba:	6818      	ldr	r0, [r3, #0]
 80072bc:	460c      	mov	r4, r1
 80072be:	b118      	cbz	r0, 80072c8 <__swsetup_r+0x14>
 80072c0:	6a03      	ldr	r3, [r0, #32]
 80072c2:	b90b      	cbnz	r3, 80072c8 <__swsetup_r+0x14>
 80072c4:	f7fe f978 	bl	80055b8 <__sinit>
 80072c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072cc:	0719      	lsls	r1, r3, #28
 80072ce:	d422      	bmi.n	8007316 <__swsetup_r+0x62>
 80072d0:	06da      	lsls	r2, r3, #27
 80072d2:	d407      	bmi.n	80072e4 <__swsetup_r+0x30>
 80072d4:	2209      	movs	r2, #9
 80072d6:	602a      	str	r2, [r5, #0]
 80072d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80072dc:	81a3      	strh	r3, [r4, #12]
 80072de:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80072e2:	e033      	b.n	800734c <__swsetup_r+0x98>
 80072e4:	0758      	lsls	r0, r3, #29
 80072e6:	d512      	bpl.n	800730e <__swsetup_r+0x5a>
 80072e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80072ea:	b141      	cbz	r1, 80072fe <__swsetup_r+0x4a>
 80072ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80072f0:	4299      	cmp	r1, r3
 80072f2:	d002      	beq.n	80072fa <__swsetup_r+0x46>
 80072f4:	4628      	mov	r0, r5
 80072f6:	f7ff f8a7 	bl	8006448 <_free_r>
 80072fa:	2300      	movs	r3, #0
 80072fc:	6363      	str	r3, [r4, #52]	@ 0x34
 80072fe:	89a3      	ldrh	r3, [r4, #12]
 8007300:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007304:	81a3      	strh	r3, [r4, #12]
 8007306:	2300      	movs	r3, #0
 8007308:	6063      	str	r3, [r4, #4]
 800730a:	6923      	ldr	r3, [r4, #16]
 800730c:	6023      	str	r3, [r4, #0]
 800730e:	89a3      	ldrh	r3, [r4, #12]
 8007310:	f043 0308 	orr.w	r3, r3, #8
 8007314:	81a3      	strh	r3, [r4, #12]
 8007316:	6923      	ldr	r3, [r4, #16]
 8007318:	b94b      	cbnz	r3, 800732e <__swsetup_r+0x7a>
 800731a:	89a3      	ldrh	r3, [r4, #12]
 800731c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007320:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007324:	d003      	beq.n	800732e <__swsetup_r+0x7a>
 8007326:	4621      	mov	r1, r4
 8007328:	4628      	mov	r0, r5
 800732a:	f000 f883 	bl	8007434 <__smakebuf_r>
 800732e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007332:	f013 0201 	ands.w	r2, r3, #1
 8007336:	d00a      	beq.n	800734e <__swsetup_r+0x9a>
 8007338:	2200      	movs	r2, #0
 800733a:	60a2      	str	r2, [r4, #8]
 800733c:	6962      	ldr	r2, [r4, #20]
 800733e:	4252      	negs	r2, r2
 8007340:	61a2      	str	r2, [r4, #24]
 8007342:	6922      	ldr	r2, [r4, #16]
 8007344:	b942      	cbnz	r2, 8007358 <__swsetup_r+0xa4>
 8007346:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800734a:	d1c5      	bne.n	80072d8 <__swsetup_r+0x24>
 800734c:	bd38      	pop	{r3, r4, r5, pc}
 800734e:	0799      	lsls	r1, r3, #30
 8007350:	bf58      	it	pl
 8007352:	6962      	ldrpl	r2, [r4, #20]
 8007354:	60a2      	str	r2, [r4, #8]
 8007356:	e7f4      	b.n	8007342 <__swsetup_r+0x8e>
 8007358:	2000      	movs	r0, #0
 800735a:	e7f7      	b.n	800734c <__swsetup_r+0x98>
 800735c:	20000018 	.word	0x20000018

08007360 <_raise_r>:
 8007360:	291f      	cmp	r1, #31
 8007362:	b538      	push	{r3, r4, r5, lr}
 8007364:	4605      	mov	r5, r0
 8007366:	460c      	mov	r4, r1
 8007368:	d904      	bls.n	8007374 <_raise_r+0x14>
 800736a:	2316      	movs	r3, #22
 800736c:	6003      	str	r3, [r0, #0]
 800736e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007372:	bd38      	pop	{r3, r4, r5, pc}
 8007374:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007376:	b112      	cbz	r2, 800737e <_raise_r+0x1e>
 8007378:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800737c:	b94b      	cbnz	r3, 8007392 <_raise_r+0x32>
 800737e:	4628      	mov	r0, r5
 8007380:	f000 f830 	bl	80073e4 <_getpid_r>
 8007384:	4622      	mov	r2, r4
 8007386:	4601      	mov	r1, r0
 8007388:	4628      	mov	r0, r5
 800738a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800738e:	f000 b817 	b.w	80073c0 <_kill_r>
 8007392:	2b01      	cmp	r3, #1
 8007394:	d00a      	beq.n	80073ac <_raise_r+0x4c>
 8007396:	1c59      	adds	r1, r3, #1
 8007398:	d103      	bne.n	80073a2 <_raise_r+0x42>
 800739a:	2316      	movs	r3, #22
 800739c:	6003      	str	r3, [r0, #0]
 800739e:	2001      	movs	r0, #1
 80073a0:	e7e7      	b.n	8007372 <_raise_r+0x12>
 80073a2:	2100      	movs	r1, #0
 80073a4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80073a8:	4620      	mov	r0, r4
 80073aa:	4798      	blx	r3
 80073ac:	2000      	movs	r0, #0
 80073ae:	e7e0      	b.n	8007372 <_raise_r+0x12>

080073b0 <raise>:
 80073b0:	4b02      	ldr	r3, [pc, #8]	@ (80073bc <raise+0xc>)
 80073b2:	4601      	mov	r1, r0
 80073b4:	6818      	ldr	r0, [r3, #0]
 80073b6:	f7ff bfd3 	b.w	8007360 <_raise_r>
 80073ba:	bf00      	nop
 80073bc:	20000018 	.word	0x20000018

080073c0 <_kill_r>:
 80073c0:	b538      	push	{r3, r4, r5, lr}
 80073c2:	4d07      	ldr	r5, [pc, #28]	@ (80073e0 <_kill_r+0x20>)
 80073c4:	2300      	movs	r3, #0
 80073c6:	4604      	mov	r4, r0
 80073c8:	4608      	mov	r0, r1
 80073ca:	4611      	mov	r1, r2
 80073cc:	602b      	str	r3, [r5, #0]
 80073ce:	f7fa fabd 	bl	800194c <_kill>
 80073d2:	1c43      	adds	r3, r0, #1
 80073d4:	d102      	bne.n	80073dc <_kill_r+0x1c>
 80073d6:	682b      	ldr	r3, [r5, #0]
 80073d8:	b103      	cbz	r3, 80073dc <_kill_r+0x1c>
 80073da:	6023      	str	r3, [r4, #0]
 80073dc:	bd38      	pop	{r3, r4, r5, pc}
 80073de:	bf00      	nop
 80073e0:	2000047c 	.word	0x2000047c

080073e4 <_getpid_r>:
 80073e4:	f7fa baaa 	b.w	800193c <_getpid>

080073e8 <__swhatbuf_r>:
 80073e8:	b570      	push	{r4, r5, r6, lr}
 80073ea:	460c      	mov	r4, r1
 80073ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073f0:	2900      	cmp	r1, #0
 80073f2:	b096      	sub	sp, #88	@ 0x58
 80073f4:	4615      	mov	r5, r2
 80073f6:	461e      	mov	r6, r3
 80073f8:	da0d      	bge.n	8007416 <__swhatbuf_r+0x2e>
 80073fa:	89a3      	ldrh	r3, [r4, #12]
 80073fc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007400:	f04f 0100 	mov.w	r1, #0
 8007404:	bf14      	ite	ne
 8007406:	2340      	movne	r3, #64	@ 0x40
 8007408:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800740c:	2000      	movs	r0, #0
 800740e:	6031      	str	r1, [r6, #0]
 8007410:	602b      	str	r3, [r5, #0]
 8007412:	b016      	add	sp, #88	@ 0x58
 8007414:	bd70      	pop	{r4, r5, r6, pc}
 8007416:	466a      	mov	r2, sp
 8007418:	f000 f848 	bl	80074ac <_fstat_r>
 800741c:	2800      	cmp	r0, #0
 800741e:	dbec      	blt.n	80073fa <__swhatbuf_r+0x12>
 8007420:	9901      	ldr	r1, [sp, #4]
 8007422:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007426:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800742a:	4259      	negs	r1, r3
 800742c:	4159      	adcs	r1, r3
 800742e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007432:	e7eb      	b.n	800740c <__swhatbuf_r+0x24>

08007434 <__smakebuf_r>:
 8007434:	898b      	ldrh	r3, [r1, #12]
 8007436:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007438:	079d      	lsls	r5, r3, #30
 800743a:	4606      	mov	r6, r0
 800743c:	460c      	mov	r4, r1
 800743e:	d507      	bpl.n	8007450 <__smakebuf_r+0x1c>
 8007440:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007444:	6023      	str	r3, [r4, #0]
 8007446:	6123      	str	r3, [r4, #16]
 8007448:	2301      	movs	r3, #1
 800744a:	6163      	str	r3, [r4, #20]
 800744c:	b003      	add	sp, #12
 800744e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007450:	ab01      	add	r3, sp, #4
 8007452:	466a      	mov	r2, sp
 8007454:	f7ff ffc8 	bl	80073e8 <__swhatbuf_r>
 8007458:	9f00      	ldr	r7, [sp, #0]
 800745a:	4605      	mov	r5, r0
 800745c:	4639      	mov	r1, r7
 800745e:	4630      	mov	r0, r6
 8007460:	f7ff f866 	bl	8006530 <_malloc_r>
 8007464:	b948      	cbnz	r0, 800747a <__smakebuf_r+0x46>
 8007466:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800746a:	059a      	lsls	r2, r3, #22
 800746c:	d4ee      	bmi.n	800744c <__smakebuf_r+0x18>
 800746e:	f023 0303 	bic.w	r3, r3, #3
 8007472:	f043 0302 	orr.w	r3, r3, #2
 8007476:	81a3      	strh	r3, [r4, #12]
 8007478:	e7e2      	b.n	8007440 <__smakebuf_r+0xc>
 800747a:	89a3      	ldrh	r3, [r4, #12]
 800747c:	6020      	str	r0, [r4, #0]
 800747e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007482:	81a3      	strh	r3, [r4, #12]
 8007484:	9b01      	ldr	r3, [sp, #4]
 8007486:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800748a:	b15b      	cbz	r3, 80074a4 <__smakebuf_r+0x70>
 800748c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007490:	4630      	mov	r0, r6
 8007492:	f000 f81d 	bl	80074d0 <_isatty_r>
 8007496:	b128      	cbz	r0, 80074a4 <__smakebuf_r+0x70>
 8007498:	89a3      	ldrh	r3, [r4, #12]
 800749a:	f023 0303 	bic.w	r3, r3, #3
 800749e:	f043 0301 	orr.w	r3, r3, #1
 80074a2:	81a3      	strh	r3, [r4, #12]
 80074a4:	89a3      	ldrh	r3, [r4, #12]
 80074a6:	431d      	orrs	r5, r3
 80074a8:	81a5      	strh	r5, [r4, #12]
 80074aa:	e7cf      	b.n	800744c <__smakebuf_r+0x18>

080074ac <_fstat_r>:
 80074ac:	b538      	push	{r3, r4, r5, lr}
 80074ae:	4d07      	ldr	r5, [pc, #28]	@ (80074cc <_fstat_r+0x20>)
 80074b0:	2300      	movs	r3, #0
 80074b2:	4604      	mov	r4, r0
 80074b4:	4608      	mov	r0, r1
 80074b6:	4611      	mov	r1, r2
 80074b8:	602b      	str	r3, [r5, #0]
 80074ba:	f7fa faa7 	bl	8001a0c <_fstat>
 80074be:	1c43      	adds	r3, r0, #1
 80074c0:	d102      	bne.n	80074c8 <_fstat_r+0x1c>
 80074c2:	682b      	ldr	r3, [r5, #0]
 80074c4:	b103      	cbz	r3, 80074c8 <_fstat_r+0x1c>
 80074c6:	6023      	str	r3, [r4, #0]
 80074c8:	bd38      	pop	{r3, r4, r5, pc}
 80074ca:	bf00      	nop
 80074cc:	2000047c 	.word	0x2000047c

080074d0 <_isatty_r>:
 80074d0:	b538      	push	{r3, r4, r5, lr}
 80074d2:	4d06      	ldr	r5, [pc, #24]	@ (80074ec <_isatty_r+0x1c>)
 80074d4:	2300      	movs	r3, #0
 80074d6:	4604      	mov	r4, r0
 80074d8:	4608      	mov	r0, r1
 80074da:	602b      	str	r3, [r5, #0]
 80074dc:	f7fa faa6 	bl	8001a2c <_isatty>
 80074e0:	1c43      	adds	r3, r0, #1
 80074e2:	d102      	bne.n	80074ea <_isatty_r+0x1a>
 80074e4:	682b      	ldr	r3, [r5, #0]
 80074e6:	b103      	cbz	r3, 80074ea <_isatty_r+0x1a>
 80074e8:	6023      	str	r3, [r4, #0]
 80074ea:	bd38      	pop	{r3, r4, r5, pc}
 80074ec:	2000047c 	.word	0x2000047c

080074f0 <_init>:
 80074f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074f2:	bf00      	nop
 80074f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074f6:	bc08      	pop	{r3}
 80074f8:	469e      	mov	lr, r3
 80074fa:	4770      	bx	lr

080074fc <_fini>:
 80074fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074fe:	bf00      	nop
 8007500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007502:	bc08      	pop	{r3}
 8007504:	469e      	mov	lr, r3
 8007506:	4770      	bx	lr
